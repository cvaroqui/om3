// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/auth/info)
	GetAuthInfo(ctx echo.Context) error
	// Refresh access token
	// (POST /api/auth/refresh)
	PostAuthRefresh(ctx echo.Context, params PostAuthRefreshParams) error
	// Get a new access token
	// (POST /api/auth/token)
	PostAuthToken(ctx echo.Context, params PostAuthTokenParams) error

	// (GET /api/auth/whoami)
	GetAuthWhoAmI(ctx echo.Context) error

	// (POST /api/cluster/action/abort)
	PostClusterActionAbort(ctx echo.Context) error

	// (POST /api/cluster/action/freeze)
	PostClusterActionFreeze(ctx echo.Context) error

	// (POST /api/cluster/action/unfreeze)
	PostClusterActionUnfreeze(ctx echo.Context) error

	// (GET /api/cluster/config)
	GetClusterConfig(ctx echo.Context, params GetClusterConfigParams) error

	// (PATCH /api/cluster/config)
	PatchClusterConfig(ctx echo.Context, params PatchClusterConfigParams) error

	// (GET /api/cluster/config/file)
	GetClusterConfigFile(ctx echo.Context) error

	// (PUT /api/cluster/config/file)
	PutClusterConfigFile(ctx echo.Context) error

	// (GET /api/cluster/config/keywords)
	GetClusterConfigKeywords(ctx echo.Context, params GetClusterConfigKeywordsParams) error

	// (POST /api/cluster/join)
	PostClusterJoin(ctx echo.Context, params PostClusterJoinParams) error

	// (POST /api/cluster/leave)
	PostClusterLeave(ctx echo.Context, params PostClusterLeaveParams) error

	// (GET /api/cluster/status)
	GetClusterStatus(ctx echo.Context, params GetClusterStatusParams) error

	// (GET /api/instance)
	GetInstances(ctx echo.Context, params GetInstancesParams) error

	// (POST /api/instance/path/{namespace}/{kind}/{name}/progress)
	PostInstanceProgress(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (POST /api/instance/path/{namespace}/{kind}/{name}/status)
	PostInstanceStatus(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (GET /api/network)
	GetNetworks(ctx echo.Context, params GetNetworksParams) error

	// (GET /api/network/ip)
	GetNetworkIP(ctx echo.Context, params GetNetworkIPParams) error

	// (GET /api/node)
	GetNodes(ctx echo.Context, params GetNodesParams) error

	// (GET /api/node/info)
	GetNodesInfo(ctx echo.Context) error

	// (POST /api/node/name/{nodename}/action/abort)
	PostPeerActionAbort(ctx echo.Context, nodename InPathNodeName) error

	// (POST /api/node/name/{nodename}/action/clear)
	PostNodeActionClear(ctx echo.Context, nodename InPathNodeName) error

	// (POST /api/node/name/{nodename}/action/drain)
	PostPeerActionDrain(ctx echo.Context, nodename InPathNodeName) error

	// (POST /api/node/name/{nodename}/action/freeze)
	PostPeerActionFreeze(ctx echo.Context, nodename InPathNodeName, params PostPeerActionFreezeParams) error

	// (POST /api/node/name/{nodename}/action/push/asset)
	PostNodeActionPushAsset(ctx echo.Context, nodename InPathNodeName, params PostNodeActionPushAssetParams) error

	// (POST /api/node/name/{nodename}/action/push/disk)
	PostNodeActionPushDisk(ctx echo.Context, nodename InPathNodeName, params PostNodeActionPushDiskParams) error

	// (POST /api/node/name/{nodename}/action/push/patch)
	PostNodeActionPushPatch(ctx echo.Context, nodename InPathNodeName, params PostNodeActionPushPatchParams) error

	// (POST /api/node/name/{nodename}/action/push/pkg)
	PostNodeActionPushPkg(ctx echo.Context, nodename InPathNodeName, params PostNodeActionPushPkgParams) error

	// (POST /api/node/name/{nodename}/action/scan/capabilities)
	PostNodeActionScanCapabilities(ctx echo.Context, nodename InPathNodeName, params PostNodeActionScanCapabilitiesParams) error

	// (POST /api/node/name/{nodename}/action/sysreport)
	PostNodeActionSysreport(ctx echo.Context, nodename InPathNodeName, params PostNodeActionSysreportParams) error

	// (POST /api/node/name/{nodename}/action/unfreeze)
	PostPeerActionUnfreeze(ctx echo.Context, nodename InPathNodeName, params PostPeerActionUnfreezeParams) error

	// (GET /api/node/name/{nodename}/capabilities)
	GetNodeCapabilities(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/config)
	GetNodeConfig(ctx echo.Context, nodename InPathNodeName, params GetNodeConfigParams) error

	// (PATCH /api/node/name/{nodename}/config)
	PatchNodeConfig(ctx echo.Context, nodename InPathNodeName, params PatchNodeConfigParams) error

	// (GET /api/node/name/{nodename}/config/file)
	GetNodeConfigFile(ctx echo.Context, nodename InPathNodeName) error

	// (PUT /api/node/name/{nodename}/config/file)
	PutNodeConfigFile(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/config/keywords)
	GetNodeConfigKeywords(ctx echo.Context, nodename InPathNodeName, params GetNodeConfigKeywordsParams) error

	// (POST /api/node/name/{nodename}/daemon/action/restart)
	PostDaemonRestart(ctx echo.Context, nodename InPathNodeName) error

	// (POST /api/node/name/{nodename}/daemon/action/shutdown)
	PostDaemonShutdown(ctx echo.Context, nodename InPathNodeName, params PostDaemonShutdownParams) error

	// (POST /api/node/name/{nodename}/daemon/action/stop)
	PostDaemonStop(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/daemon/dns/dump)
	GetDaemonDNSDump(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/daemon/event)
	GetDaemonEvents(ctx echo.Context, nodename InPathNodeName, params GetDaemonEventsParams) error

	// (POST /api/node/name/{nodename}/daemon/hb/name/{name}/action/restart)
	PostDaemonHeartbeatRestart(ctx echo.Context, nodename InPathNodeName, name InPathHeartbeatName) error

	// (POST /api/node/name/{nodename}/daemon/hb/name/{name}/action/sign)
	PostDaemonHeartbeatSign(ctx echo.Context, nodename InPathNodeName, name InPathHeartbeatName) error

	// (POST /api/node/name/{nodename}/daemon/hb/name/{name}/action/start)
	PostDaemonHeartbeatStart(ctx echo.Context, nodename InPathNodeName, name InPathHeartbeatName) error

	// (POST /api/node/name/{nodename}/daemon/hb/name/{name}/action/stop)
	PostDaemonHeartbeatStop(ctx echo.Context, nodename InPathNodeName, name InPathHeartbeatName) error

	// (POST /api/node/name/{nodename}/daemon/hb/name/{name}/action/wipe)
	PostDaemonHeartbeatWipe(ctx echo.Context, nodename InPathNodeName, name InPathHeartbeatName) error

	// (POST /api/node/name/{nodename}/daemon/listener/name/{name}/action/restart)
	PostDaemonListenerRestart(ctx echo.Context, nodename InPathNodeName, name InPathListenerName) error

	// (POST /api/node/name/{nodename}/daemon/listener/name/{name}/action/start)
	PostDaemonListenerStart(ctx echo.Context, nodename InPathNodeName, name InPathListenerName) error

	// (POST /api/node/name/{nodename}/daemon/listener/name/{name}/action/stop)
	PostDaemonListenerStop(ctx echo.Context, nodename InPathNodeName, name InPathListenerName) error

	// (POST /api/node/name/{nodename}/daemon/listener/name/{name}/log/control)
	PostDaemonListenerLogControl(ctx echo.Context, nodename InPathNodeName, name InPathListenerName) error

	// (POST /api/node/name/{nodename}/daemon/log/control)
	PostDaemonLogControl(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/drbd/allocation)
	GetNodeDRBDAllocation(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/drbd/config)
	GetNodeDRBDConfig(ctx echo.Context, nodename InPathNodeName, params GetNodeDRBDConfigParams) error

	// (POST /api/node/name/{nodename}/drbd/config)
	PostNodeDRBDConfig(ctx echo.Context, nodename InPathNodeName, params PostNodeDRBDConfigParams) error

	// (POST /api/node/name/{nodename}/drbd/connect)
	PostNodeDRBDConnect(ctx echo.Context, nodename InPathNodeName, params PostNodeDRBDConnectParams) error

	// (POST /api/node/name/{nodename}/drbd/primary)
	PostNodeDRBDPrimary(ctx echo.Context, nodename InPathNodeName, params PostNodeDRBDPrimaryParams) error

	// (POST /api/node/name/{nodename}/drbd/secondary)
	PostNodeDRBDSecondary(ctx echo.Context, nodename InPathNodeName, params PostNodeDRBDSecondaryParams) error

	// (GET /api/node/name/{nodename}/drivers)
	GetNodeDriver(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name})
	GetInstance(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/boot)
	PostInstanceActionBoot(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName, params PostInstanceActionBootParams) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/delete)
	PostInstanceActionDelete(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName, params PostInstanceActionDeleteParams) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/freeze)
	PostInstanceActionFreeze(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName, params PostInstanceActionFreezeParams) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/provision)
	PostInstanceActionProvision(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName, params PostInstanceActionProvisionParams) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/prstart)
	PostInstanceActionPRStart(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName, params PostInstanceActionPRStartParams) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/prstop)
	PostInstanceActionPRStop(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName, params PostInstanceActionPRStopParams) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/push/resource/info)
	PostInstanceActionPushResourceInfo(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName, params PostInstanceActionPushResourceInfoParams) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/restart)
	PostInstanceActionRestart(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName, params PostInstanceActionRestartParams) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/run)
	PostInstanceActionRun(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName, params PostInstanceActionRunParams) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/shutdown)
	PostInstanceActionShutdown(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName, params PostInstanceActionShutdownParams) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/start)
	PostInstanceActionStart(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName, params PostInstanceActionStartParams) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/startstandby)
	PostInstanceActionStartStandby(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName, params PostInstanceActionStartStandbyParams) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/status)
	PostInstanceActionStatus(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName, params PostInstanceActionStatusParams) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/stop)
	PostInstanceActionStop(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName, params PostInstanceActionStopParams) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/sync/ingest)
	PostInstanceActionSyncIngest(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName, params PostInstanceActionSyncIngestParams) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/unfreeze)
	PostInstanceActionUnfreeze(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName, params PostInstanceActionUnfreezeParams) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/unprovision)
	PostInstanceActionUnprovision(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName, params PostInstanceActionUnprovisionParams) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/clear)
	PostInstanceClear(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (GET /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/config/file)
	GetInstanceConfigFile(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (GET /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/log)
	GetInstanceLogs(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName, params GetInstanceLogsParams) error

	// (GET /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/resource/info)
	GetInstanceResourceInfo(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (GET /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/schedule)
	GetInstanceSchedule(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/state/file)
	PostInstanceStateFile(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (GET /api/node/name/{nodename}/log)
	GetNodeLogs(ctx echo.Context, nodename InPathNodeName, params GetNodeLogsParams) error

	// (GET /api/node/name/{nodename}/ping)
	GetNodePing(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/schedule)
	GetNodeSchedule(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/ssh/hostkeys)
	GetNodeSSHHostkeys(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/ssh/key)
	GetNodeSSHKey(ctx echo.Context, nodename InPathNodeName) error

	// (PUT /api/node/name/{nodename}/ssh/trust)
	PutNodeSSHTrust(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/system/disk)
	GetNodeSystemDisk(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/system/group)
	GetNodeSystemGroup(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/system/hardware)
	GetNodeSystemHardware(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/system/ipaddress)
	GetNodeSystemIPAddress(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/system/package)
	GetNodeSystemPackage(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/system/patch)
	GetNodeSystemPatch(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/system/property)
	GetNodeSystemProperty(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/system/san/initiator)
	GetNodeSystemSANInitiator(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/system/san/path)
	GetNodeSystemSANPath(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/system/user)
	GetNodeSystemUser(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/object)
	GetObjects(ctx echo.Context, params GetObjectsParams) error

	// (GET /api/object/path)
	GetObjectPaths(ctx echo.Context, params GetObjectPathsParams) error

	// (POST /api/object/path/{namespace}/svc/{name}/disable)
	PostSvcDisable(ctx echo.Context, namespace InPathNamespace, name InPathName, params PostSvcDisableParams) error

	// (POST /api/object/path/{namespace}/svc/{name}/enable)
	PostSvcEnable(ctx echo.Context, namespace InPathNamespace, name InPathName, params PostSvcEnableParams) error

	// (GET /api/object/path/{namespace}/{kind}/{name})
	GetObject(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (POST /api/object/path/{namespace}/{kind}/{name}/action/abort)
	PostObjectActionAbort(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (POST /api/object/path/{namespace}/{kind}/{name}/action/delete)
	PostObjectActionDelete(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (POST /api/object/path/{namespace}/{kind}/{name}/action/freeze)
	PostObjectActionFreeze(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (POST /api/object/path/{namespace}/{kind}/{name}/action/giveback)
	PostObjectActionGiveback(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (POST /api/object/path/{namespace}/{kind}/{name}/action/provision)
	PostObjectActionProvision(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (POST /api/object/path/{namespace}/{kind}/{name}/action/purge)
	PostObjectActionPurge(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (POST /api/object/path/{namespace}/{kind}/{name}/action/restart)
	PostObjectActionRestart(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (POST /api/object/path/{namespace}/{kind}/{name}/action/start)
	PostObjectActionStart(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (POST /api/object/path/{namespace}/{kind}/{name}/action/stop)
	PostObjectActionStop(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (POST /api/object/path/{namespace}/{kind}/{name}/action/switch)
	PostObjectActionSwitch(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (POST /api/object/path/{namespace}/{kind}/{name}/action/unfreeze)
	PostObjectActionUnfreeze(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (POST /api/object/path/{namespace}/{kind}/{name}/action/unprovision)
	PostObjectActionUnprovision(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (GET /api/object/path/{namespace}/{kind}/{name}/config)
	GetObjectConfig(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName, params GetObjectConfigParams) error

	// (PATCH /api/object/path/{namespace}/{kind}/{name}/config)
	PatchObjectConfig(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName, params PatchObjectConfigParams) error

	// (GET /api/object/path/{namespace}/{kind}/{name}/config/file)
	GetObjectConfigFile(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (POST /api/object/path/{namespace}/{kind}/{name}/config/file)
	PostObjectConfigFile(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (PUT /api/object/path/{namespace}/{kind}/{name}/config/file)
	PutObjectConfigFile(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (GET /api/object/path/{namespace}/{kind}/{name}/config/keywords)
	GetObjectConfigKeywords(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName, params GetObjectConfigKeywordsParams) error

	// (GET /api/object/path/{namespace}/{kind}/{name}/data)
	GetObjectData(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName, params GetObjectDataParams) error

	// (PATCH /api/object/path/{namespace}/{kind}/{name}/data)
	PatchObjectData(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (DELETE /api/object/path/{namespace}/{kind}/{name}/data/key)
	DeleteObjectDataKey(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName, params DeleteObjectDataKeyParams) error

	// (GET /api/object/path/{namespace}/{kind}/{name}/data/key)
	GetObjectDataKey(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName, params GetObjectDataKeyParams) error

	// (POST /api/object/path/{namespace}/{kind}/{name}/data/key)
	PostObjectDataKey(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName, params PostObjectDataKeyParams) error

	// (PUT /api/object/path/{namespace}/{kind}/{name}/data/key)
	PutObjectDataKey(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName, params PutObjectDataKeyParams) error

	// (GET /api/object/path/{namespace}/{kind}/{name}/data/keys)
	GetObjectDataKeys(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (GET /api/object/path/{namespace}/{kind}/{name}/resource/info)
	GetObjectResourceInfo(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (GET /api/object/path/{namespace}/{kind}/{name}/schedule)
	GetObjectSchedule(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (GET /api/openapi)
	GetSwagger(ctx echo.Context) error

	// (GET /api/pool)
	GetPools(ctx echo.Context, params GetPoolsParams) error

	// (GET /api/pool/volume)
	GetPoolVolumes(ctx echo.Context, params GetPoolVolumesParams) error

	// (GET /api/relay/message)
	GetRelayMessage(ctx echo.Context, params GetRelayMessageParams) error

	// (POST /api/relay/message)
	PostRelayMessage(ctx echo.Context) error

	// (GET /api/relay/status)
	GetRelayStatus(ctx echo.Context, params GetRelayStatusParams) error

	// (GET /api/resource)
	GetResources(ctx echo.Context, params GetResourcesParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAuthInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetAuthInfo(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAuthInfo(ctx)
	return err
}

// PostAuthRefresh converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthRefresh(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthRefreshParams
	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", ctx.QueryParams(), &params.Role)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role: %s", err))
	}

	// ------------- Optional query parameter "access_duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "access_duration", ctx.QueryParams(), &params.AccessDuration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter access_duration: %s", err))
	}

	// ------------- Optional query parameter "scope" -------------

	err = runtime.BindQueryParameter("form", true, false, "scope", ctx.QueryParams(), &params.Scope)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scope: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAuthRefresh(ctx, params)
	return err
}

// PostAuthToken converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthToken(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthTokenParams
	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", ctx.QueryParams(), &params.Role)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role: %s", err))
	}

	// ------------- Optional query parameter "access_duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "access_duration", ctx.QueryParams(), &params.AccessDuration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter access_duration: %s", err))
	}

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject", ctx.QueryParams(), &params.Subject)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subject: %s", err))
	}

	// ------------- Optional query parameter "scope" -------------

	err = runtime.BindQueryParameter("form", true, false, "scope", ctx.QueryParams(), &params.Scope)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scope: %s", err))
	}

	// ------------- Optional query parameter "refresh" -------------

	err = runtime.BindQueryParameter("form", true, false, "refresh", ctx.QueryParams(), &params.Refresh)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter refresh: %s", err))
	}

	// ------------- Optional query parameter "refresh_duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "refresh_duration", ctx.QueryParams(), &params.RefreshDuration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter refresh_duration: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAuthToken(ctx, params)
	return err
}

// GetAuthWhoAmI converts echo context to params.
func (w *ServerInterfaceWrapper) GetAuthWhoAmI(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAuthWhoAmI(ctx)
	return err
}

// PostClusterActionAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostClusterActionAbort(ctx)
	return err
}

// PostClusterActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionFreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostClusterActionFreeze(ctx)
	return err
}

// PostClusterActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionUnfreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostClusterActionUnfreeze(ctx)
	return err
}

// GetClusterConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetClusterConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetClusterConfigParams
	// ------------- Optional query parameter "evaluate" -------------

	err = runtime.BindQueryParameter("form", true, false, "evaluate", ctx.QueryParams(), &params.Evaluate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter evaluate: %s", err))
	}

	// ------------- Optional query parameter "impersonate" -------------

	err = runtime.BindQueryParameter("form", true, false, "impersonate", ctx.QueryParams(), &params.Impersonate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter impersonate: %s", err))
	}

	// ------------- Optional query parameter "kw" -------------

	err = runtime.BindQueryParameter("form", true, false, "kw", ctx.QueryParams(), &params.Kw)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kw: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetClusterConfig(ctx, params)
	return err
}

// PatchClusterConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PatchClusterConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchClusterConfigParams
	// ------------- Optional query parameter "delete" -------------

	err = runtime.BindQueryParameter("form", true, false, "delete", ctx.QueryParams(), &params.Delete)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter delete: %s", err))
	}

	// ------------- Optional query parameter "unset" -------------

	err = runtime.BindQueryParameter("form", true, false, "unset", ctx.QueryParams(), &params.Unset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unset: %s", err))
	}

	// ------------- Optional query parameter "set" -------------

	err = runtime.BindQueryParameter("form", true, false, "set", ctx.QueryParams(), &params.Set)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter set: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchClusterConfig(ctx, params)
	return err
}

// GetClusterConfigFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetClusterConfigFile(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetClusterConfigFile(ctx)
	return err
}

// PutClusterConfigFile converts echo context to params.
func (w *ServerInterfaceWrapper) PutClusterConfigFile(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutClusterConfigFile(ctx)
	return err
}

// GetClusterConfigKeywords converts echo context to params.
func (w *ServerInterfaceWrapper) GetClusterConfigKeywords(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetClusterConfigKeywordsParams
	// ------------- Optional query parameter "driver" -------------

	err = runtime.BindQueryParameter("form", true, false, "driver", ctx.QueryParams(), &params.Driver)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter driver: %s", err))
	}

	// ------------- Optional query parameter "section" -------------

	err = runtime.BindQueryParameter("form", true, false, "section", ctx.QueryParams(), &params.Section)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter section: %s", err))
	}

	// ------------- Optional query parameter "option" -------------

	err = runtime.BindQueryParameter("form", true, false, "option", ctx.QueryParams(), &params.Option)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter option: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetClusterConfigKeywords(ctx, params)
	return err
}

// PostClusterJoin converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterJoin(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostClusterJoinParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostClusterJoin(ctx, params)
	return err
}

// PostClusterLeave converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterLeave(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostClusterLeaveParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostClusterLeave(ctx, params)
	return err
}

// GetClusterStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetClusterStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetClusterStatusParams
	// ------------- Optional query parameter "namespace" -------------

	err = runtime.BindQueryParameter("form", true, false, "namespace", ctx.QueryParams(), &params.Namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Optional query parameter "selector" -------------

	err = runtime.BindQueryParameter("form", true, false, "selector", ctx.QueryParams(), &params.Selector)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter selector: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetClusterStatus(ctx, params)
	return err
}

// GetInstances converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstances(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstancesParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetInstances(ctx, params)
	return err
}

// PostInstanceProgress converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceProgress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceProgress(ctx, namespace, kind, name)
	return err
}

// PostInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceStatus(ctx, namespace, kind, name)
	return err
}

// GetNetworks converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworks(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetworksParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNetworks(ctx, params)
	return err
}

// GetNetworkIP converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworkIP(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetworkIPParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNetworkIP(ctx, params)
	return err
}

// GetNodes converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodes(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodesParams
	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodes(ctx, params)
	return err
}

// GetNodesInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodesInfo(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodesInfo(ctx)
	return err
}

// PostPeerActionAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostPeerActionAbort(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostPeerActionAbort(ctx, nodename)
	return err
}

// PostNodeActionClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeActionClear(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostNodeActionClear(ctx, nodename)
	return err
}

// PostPeerActionDrain converts echo context to params.
func (w *ServerInterfaceWrapper) PostPeerActionDrain(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostPeerActionDrain(ctx, nodename)
	return err
}

// PostPeerActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostPeerActionFreeze(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostPeerActionFreezeParams
	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostPeerActionFreeze(ctx, nodename, params)
	return err
}

// PostNodeActionPushAsset converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeActionPushAsset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeActionPushAssetParams
	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostNodeActionPushAsset(ctx, nodename, params)
	return err
}

// PostNodeActionPushDisk converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeActionPushDisk(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeActionPushDiskParams
	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostNodeActionPushDisk(ctx, nodename, params)
	return err
}

// PostNodeActionPushPatch converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeActionPushPatch(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeActionPushPatchParams
	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostNodeActionPushPatch(ctx, nodename, params)
	return err
}

// PostNodeActionPushPkg converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeActionPushPkg(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeActionPushPkgParams
	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostNodeActionPushPkg(ctx, nodename, params)
	return err
}

// PostNodeActionScanCapabilities converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeActionScanCapabilities(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeActionScanCapabilitiesParams
	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostNodeActionScanCapabilities(ctx, nodename, params)
	return err
}

// PostNodeActionSysreport converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeActionSysreport(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeActionSysreportParams
	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", ctx.QueryParams(), &params.Force)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter force: %s", err))
	}

	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostNodeActionSysreport(ctx, nodename, params)
	return err
}

// PostPeerActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostPeerActionUnfreeze(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostPeerActionUnfreezeParams
	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostPeerActionUnfreeze(ctx, nodename, params)
	return err
}

// GetNodeCapabilities converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeCapabilities(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeCapabilities(ctx, nodename)
	return err
}

// GetNodeConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeConfigParams
	// ------------- Optional query parameter "kw" -------------

	err = runtime.BindQueryParameter("form", true, false, "kw", ctx.QueryParams(), &params.Kw)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kw: %s", err))
	}

	// ------------- Optional query parameter "evaluate" -------------

	err = runtime.BindQueryParameter("form", true, false, "evaluate", ctx.QueryParams(), &params.Evaluate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter evaluate: %s", err))
	}

	// ------------- Optional query parameter "impersonate" -------------

	err = runtime.BindQueryParameter("form", true, false, "impersonate", ctx.QueryParams(), &params.Impersonate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter impersonate: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeConfig(ctx, nodename, params)
	return err
}

// PatchNodeConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PatchNodeConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchNodeConfigParams
	// ------------- Optional query parameter "delete" -------------

	err = runtime.BindQueryParameter("form", true, false, "delete", ctx.QueryParams(), &params.Delete)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter delete: %s", err))
	}

	// ------------- Optional query parameter "unset" -------------

	err = runtime.BindQueryParameter("form", true, false, "unset", ctx.QueryParams(), &params.Unset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unset: %s", err))
	}

	// ------------- Optional query parameter "set" -------------

	err = runtime.BindQueryParameter("form", true, false, "set", ctx.QueryParams(), &params.Set)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter set: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchNodeConfig(ctx, nodename, params)
	return err
}

// GetNodeConfigFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeConfigFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeConfigFile(ctx, nodename)
	return err
}

// PutNodeConfigFile converts echo context to params.
func (w *ServerInterfaceWrapper) PutNodeConfigFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutNodeConfigFile(ctx, nodename)
	return err
}

// GetNodeConfigKeywords converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeConfigKeywords(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeConfigKeywordsParams
	// ------------- Optional query parameter "driver" -------------

	err = runtime.BindQueryParameter("form", true, false, "driver", ctx.QueryParams(), &params.Driver)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter driver: %s", err))
	}

	// ------------- Optional query parameter "section" -------------

	err = runtime.BindQueryParameter("form", true, false, "section", ctx.QueryParams(), &params.Section)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter section: %s", err))
	}

	// ------------- Optional query parameter "option" -------------

	err = runtime.BindQueryParameter("form", true, false, "option", ctx.QueryParams(), &params.Option)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter option: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeConfigKeywords(ctx, nodename, params)
	return err
}

// PostDaemonRestart converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonRestart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostDaemonRestart(ctx, nodename)
	return err
}

// PostDaemonShutdown converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonShutdown(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonShutdownParams
	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostDaemonShutdown(ctx, nodename, params)
	return err
}

// PostDaemonStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonStop(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostDaemonStop(ctx, nodename)
	return err
}

// GetDaemonDNSDump converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonDNSDump(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDaemonDNSDump(ctx, nodename)
	return err
}

// GetDaemonEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonEvents(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonEventsParams
	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "cache" -------------

	err = runtime.BindQueryParameter("form", true, false, "cache", ctx.QueryParams(), &params.Cache)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cache: %s", err))
	}

	// ------------- Optional query parameter "selector" -------------

	err = runtime.BindQueryParameter("form", true, false, "selector", ctx.QueryParams(), &params.Selector)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter selector: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDaemonEvents(ctx, nodename, params)
	return err
}

// PostDaemonHeartbeatRestart converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonHeartbeatRestart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathHeartbeatName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostDaemonHeartbeatRestart(ctx, nodename, name)
	return err
}

// PostDaemonHeartbeatSign converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonHeartbeatSign(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathHeartbeatName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostDaemonHeartbeatSign(ctx, nodename, name)
	return err
}

// PostDaemonHeartbeatStart converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonHeartbeatStart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathHeartbeatName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostDaemonHeartbeatStart(ctx, nodename, name)
	return err
}

// PostDaemonHeartbeatStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonHeartbeatStop(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathHeartbeatName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostDaemonHeartbeatStop(ctx, nodename, name)
	return err
}

// PostDaemonHeartbeatWipe converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonHeartbeatWipe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathHeartbeatName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostDaemonHeartbeatWipe(ctx, nodename, name)
	return err
}

// PostDaemonListenerRestart converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonListenerRestart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathListenerName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostDaemonListenerRestart(ctx, nodename, name)
	return err
}

// PostDaemonListenerStart converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonListenerStart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathListenerName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostDaemonListenerStart(ctx, nodename, name)
	return err
}

// PostDaemonListenerStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonListenerStop(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathListenerName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostDaemonListenerStop(ctx, nodename, name)
	return err
}

// PostDaemonListenerLogControl converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonListenerLogControl(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathListenerName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostDaemonListenerLogControl(ctx, nodename, name)
	return err
}

// PostDaemonLogControl converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLogControl(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostDaemonLogControl(ctx, nodename)
	return err
}

// GetNodeDRBDAllocation converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDAllocation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeDRBDAllocation(ctx, nodename)
	return err
}

// GetNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeDRBDConfig(ctx, nodename, params)
	return err
}

// PostNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeDRBDConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostNodeDRBDConfig(ctx, nodename, params)
	return err
}

// PostNodeDRBDConnect converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeDRBDConnect(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeDRBDConnectParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "node_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "node_id", ctx.QueryParams(), &params.NodeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostNodeDRBDConnect(ctx, nodename, params)
	return err
}

// PostNodeDRBDPrimary converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeDRBDPrimary(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeDRBDPrimaryParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostNodeDRBDPrimary(ctx, nodename, params)
	return err
}

// PostNodeDRBDSecondary converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeDRBDSecondary(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeDRBDSecondaryParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostNodeDRBDSecondary(ctx, nodename, params)
	return err
}

// GetNodeDriver converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDriver(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeDriver(ctx, nodename)
	return err
}

// GetInstance converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetInstance(ctx, nodename, namespace, kind, name)
	return err
}

// PostInstanceActionBoot converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceActionBoot(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostInstanceActionBootParams
	// ------------- Optional query parameter "slaves" -------------

	err = runtime.BindQueryParameter("form", true, false, "slaves", ctx.QueryParams(), &params.Slaves)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slaves: %s", err))
	}

	// ------------- Optional query parameter "master" -------------

	err = runtime.BindQueryParameter("form", true, false, "master", ctx.QueryParams(), &params.Master)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter master: %s", err))
	}

	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// ------------- Optional query parameter "rid" -------------

	err = runtime.BindQueryParameter("form", true, false, "rid", ctx.QueryParams(), &params.Rid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rid: %s", err))
	}

	// ------------- Optional query parameter "slave" -------------

	err = runtime.BindQueryParameter("form", true, false, "slave", ctx.QueryParams(), &params.Slave)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slave: %s", err))
	}

	// ------------- Optional query parameter "subset" -------------

	err = runtime.BindQueryParameter("form", true, false, "subset", ctx.QueryParams(), &params.Subset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subset: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceActionBoot(ctx, nodename, namespace, kind, name, params)
	return err
}

// PostInstanceActionDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceActionDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostInstanceActionDeleteParams
	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceActionDelete(ctx, nodename, namespace, kind, name, params)
	return err
}

// PostInstanceActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceActionFreeze(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostInstanceActionFreezeParams
	// ------------- Optional query parameter "slaves" -------------

	err = runtime.BindQueryParameter("form", true, false, "slaves", ctx.QueryParams(), &params.Slaves)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slaves: %s", err))
	}

	// ------------- Optional query parameter "master" -------------

	err = runtime.BindQueryParameter("form", true, false, "master", ctx.QueryParams(), &params.Master)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter master: %s", err))
	}

	// ------------- Optional query parameter "slave" -------------

	err = runtime.BindQueryParameter("form", true, false, "slave", ctx.QueryParams(), &params.Slave)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slave: %s", err))
	}

	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceActionFreeze(ctx, nodename, namespace, kind, name, params)
	return err
}

// PostInstanceActionProvision converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceActionProvision(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostInstanceActionProvisionParams
	// ------------- Optional query parameter "slaves" -------------

	err = runtime.BindQueryParameter("form", true, false, "slaves", ctx.QueryParams(), &params.Slaves)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slaves: %s", err))
	}

	// ------------- Optional query parameter "disable_rollback" -------------

	err = runtime.BindQueryParameter("form", true, false, "disable_rollback", ctx.QueryParams(), &params.DisableRollback)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter disable_rollback: %s", err))
	}

	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", ctx.QueryParams(), &params.Force)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter force: %s", err))
	}

	// ------------- Optional query parameter "leader" -------------

	err = runtime.BindQueryParameter("form", true, false, "leader", ctx.QueryParams(), &params.Leader)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter leader: %s", err))
	}

	// ------------- Optional query parameter "master" -------------

	err = runtime.BindQueryParameter("form", true, false, "master", ctx.QueryParams(), &params.Master)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter master: %s", err))
	}

	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// ------------- Optional query parameter "rid" -------------

	err = runtime.BindQueryParameter("form", true, false, "rid", ctx.QueryParams(), &params.Rid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rid: %s", err))
	}

	// ------------- Optional query parameter "slave" -------------

	err = runtime.BindQueryParameter("form", true, false, "slave", ctx.QueryParams(), &params.Slave)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slave: %s", err))
	}

	// ------------- Optional query parameter "state_only" -------------

	err = runtime.BindQueryParameter("form", true, false, "state_only", ctx.QueryParams(), &params.StateOnly)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state_only: %s", err))
	}

	// ------------- Optional query parameter "subset" -------------

	err = runtime.BindQueryParameter("form", true, false, "subset", ctx.QueryParams(), &params.Subset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subset: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceActionProvision(ctx, nodename, namespace, kind, name, params)
	return err
}

// PostInstanceActionPRStart converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceActionPRStart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostInstanceActionPRStartParams
	// ------------- Optional query parameter "slaves" -------------

	err = runtime.BindQueryParameter("form", true, false, "slaves", ctx.QueryParams(), &params.Slaves)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slaves: %s", err))
	}

	// ------------- Optional query parameter "disable_rollback" -------------

	err = runtime.BindQueryParameter("form", true, false, "disable_rollback", ctx.QueryParams(), &params.DisableRollback)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter disable_rollback: %s", err))
	}

	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", ctx.QueryParams(), &params.Force)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter force: %s", err))
	}

	// ------------- Optional query parameter "master" -------------

	err = runtime.BindQueryParameter("form", true, false, "master", ctx.QueryParams(), &params.Master)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter master: %s", err))
	}

	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// ------------- Optional query parameter "rid" -------------

	err = runtime.BindQueryParameter("form", true, false, "rid", ctx.QueryParams(), &params.Rid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rid: %s", err))
	}

	// ------------- Optional query parameter "slave" -------------

	err = runtime.BindQueryParameter("form", true, false, "slave", ctx.QueryParams(), &params.Slave)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slave: %s", err))
	}

	// ------------- Optional query parameter "subset" -------------

	err = runtime.BindQueryParameter("form", true, false, "subset", ctx.QueryParams(), &params.Subset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subset: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceActionPRStart(ctx, nodename, namespace, kind, name, params)
	return err
}

// PostInstanceActionPRStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceActionPRStop(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostInstanceActionPRStopParams
	// ------------- Optional query parameter "slaves" -------------

	err = runtime.BindQueryParameter("form", true, false, "slaves", ctx.QueryParams(), &params.Slaves)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slaves: %s", err))
	}

	// ------------- Optional query parameter "disable_rollback" -------------

	err = runtime.BindQueryParameter("form", true, false, "disable_rollback", ctx.QueryParams(), &params.DisableRollback)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter disable_rollback: %s", err))
	}

	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", ctx.QueryParams(), &params.Force)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter force: %s", err))
	}

	// ------------- Optional query parameter "master" -------------

	err = runtime.BindQueryParameter("form", true, false, "master", ctx.QueryParams(), &params.Master)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter master: %s", err))
	}

	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// ------------- Optional query parameter "rid" -------------

	err = runtime.BindQueryParameter("form", true, false, "rid", ctx.QueryParams(), &params.Rid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rid: %s", err))
	}

	// ------------- Optional query parameter "slave" -------------

	err = runtime.BindQueryParameter("form", true, false, "slave", ctx.QueryParams(), &params.Slave)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slave: %s", err))
	}

	// ------------- Optional query parameter "subset" -------------

	err = runtime.BindQueryParameter("form", true, false, "subset", ctx.QueryParams(), &params.Subset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subset: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceActionPRStop(ctx, nodename, namespace, kind, name, params)
	return err
}

// PostInstanceActionPushResourceInfo converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceActionPushResourceInfo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostInstanceActionPushResourceInfoParams
	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceActionPushResourceInfo(ctx, nodename, namespace, kind, name, params)
	return err
}

// PostInstanceActionRestart converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceActionRestart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostInstanceActionRestartParams
	// ------------- Optional query parameter "slaves" -------------

	err = runtime.BindQueryParameter("form", true, false, "slaves", ctx.QueryParams(), &params.Slaves)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slaves: %s", err))
	}

	// ------------- Optional query parameter "disable_rollback" -------------

	err = runtime.BindQueryParameter("form", true, false, "disable_rollback", ctx.QueryParams(), &params.DisableRollback)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter disable_rollback: %s", err))
	}

	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", ctx.QueryParams(), &params.Force)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter force: %s", err))
	}

	// ------------- Optional query parameter "master" -------------

	err = runtime.BindQueryParameter("form", true, false, "master", ctx.QueryParams(), &params.Master)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter master: %s", err))
	}

	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// ------------- Optional query parameter "rid" -------------

	err = runtime.BindQueryParameter("form", true, false, "rid", ctx.QueryParams(), &params.Rid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rid: %s", err))
	}

	// ------------- Optional query parameter "slave" -------------

	err = runtime.BindQueryParameter("form", true, false, "slave", ctx.QueryParams(), &params.Slave)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slave: %s", err))
	}

	// ------------- Optional query parameter "subset" -------------

	err = runtime.BindQueryParameter("form", true, false, "subset", ctx.QueryParams(), &params.Subset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subset: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceActionRestart(ctx, nodename, namespace, kind, name, params)
	return err
}

// PostInstanceActionRun converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceActionRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostInstanceActionRunParams
	// ------------- Optional query parameter "slaves" -------------

	err = runtime.BindQueryParameter("form", true, false, "slaves", ctx.QueryParams(), &params.Slaves)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slaves: %s", err))
	}

	// ------------- Optional query parameter "confirm" -------------

	err = runtime.BindQueryParameter("form", true, false, "confirm", ctx.QueryParams(), &params.Confirm)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter confirm: %s", err))
	}

	// ------------- Optional query parameter "cron" -------------

	err = runtime.BindQueryParameter("form", true, false, "cron", ctx.QueryParams(), &params.Cron)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cron: %s", err))
	}

	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", ctx.QueryParams(), &params.Force)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter force: %s", err))
	}

	// ------------- Optional query parameter "master" -------------

	err = runtime.BindQueryParameter("form", true, false, "master", ctx.QueryParams(), &params.Master)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter master: %s", err))
	}

	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// ------------- Optional query parameter "rid" -------------

	err = runtime.BindQueryParameter("form", true, false, "rid", ctx.QueryParams(), &params.Rid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rid: %s", err))
	}

	// ------------- Optional query parameter "slave" -------------

	err = runtime.BindQueryParameter("form", true, false, "slave", ctx.QueryParams(), &params.Slave)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slave: %s", err))
	}

	// ------------- Optional query parameter "subset" -------------

	err = runtime.BindQueryParameter("form", true, false, "subset", ctx.QueryParams(), &params.Subset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subset: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// ------------- Optional query parameter "env" -------------

	err = runtime.BindQueryParameter("form", true, false, "env", ctx.QueryParams(), &params.Env)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter env: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceActionRun(ctx, nodename, namespace, kind, name, params)
	return err
}

// PostInstanceActionShutdown converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceActionShutdown(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostInstanceActionShutdownParams
	// ------------- Optional query parameter "slaves" -------------

	err = runtime.BindQueryParameter("form", true, false, "slaves", ctx.QueryParams(), &params.Slaves)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slaves: %s", err))
	}

	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", ctx.QueryParams(), &params.Force)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter force: %s", err))
	}

	// ------------- Optional query parameter "master" -------------

	err = runtime.BindQueryParameter("form", true, false, "master", ctx.QueryParams(), &params.Master)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter master: %s", err))
	}

	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// ------------- Optional query parameter "rid" -------------

	err = runtime.BindQueryParameter("form", true, false, "rid", ctx.QueryParams(), &params.Rid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rid: %s", err))
	}

	// ------------- Optional query parameter "slave" -------------

	err = runtime.BindQueryParameter("form", true, false, "slave", ctx.QueryParams(), &params.Slave)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slave: %s", err))
	}

	// ------------- Optional query parameter "subset" -------------

	err = runtime.BindQueryParameter("form", true, false, "subset", ctx.QueryParams(), &params.Subset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subset: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceActionShutdown(ctx, nodename, namespace, kind, name, params)
	return err
}

// PostInstanceActionStart converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceActionStart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostInstanceActionStartParams
	// ------------- Optional query parameter "slaves" -------------

	err = runtime.BindQueryParameter("form", true, false, "slaves", ctx.QueryParams(), &params.Slaves)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slaves: %s", err))
	}

	// ------------- Optional query parameter "disable_rollback" -------------

	err = runtime.BindQueryParameter("form", true, false, "disable_rollback", ctx.QueryParams(), &params.DisableRollback)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter disable_rollback: %s", err))
	}

	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", ctx.QueryParams(), &params.Force)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter force: %s", err))
	}

	// ------------- Optional query parameter "master" -------------

	err = runtime.BindQueryParameter("form", true, false, "master", ctx.QueryParams(), &params.Master)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter master: %s", err))
	}

	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// ------------- Optional query parameter "rid" -------------

	err = runtime.BindQueryParameter("form", true, false, "rid", ctx.QueryParams(), &params.Rid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rid: %s", err))
	}

	// ------------- Optional query parameter "slave" -------------

	err = runtime.BindQueryParameter("form", true, false, "slave", ctx.QueryParams(), &params.Slave)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slave: %s", err))
	}

	// ------------- Optional query parameter "subset" -------------

	err = runtime.BindQueryParameter("form", true, false, "subset", ctx.QueryParams(), &params.Subset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subset: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceActionStart(ctx, nodename, namespace, kind, name, params)
	return err
}

// PostInstanceActionStartStandby converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceActionStartStandby(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostInstanceActionStartStandbyParams
	// ------------- Optional query parameter "slaves" -------------

	err = runtime.BindQueryParameter("form", true, false, "slaves", ctx.QueryParams(), &params.Slaves)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slaves: %s", err))
	}

	// ------------- Optional query parameter "disable_rollback" -------------

	err = runtime.BindQueryParameter("form", true, false, "disable_rollback", ctx.QueryParams(), &params.DisableRollback)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter disable_rollback: %s", err))
	}

	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", ctx.QueryParams(), &params.Force)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter force: %s", err))
	}

	// ------------- Optional query parameter "master" -------------

	err = runtime.BindQueryParameter("form", true, false, "master", ctx.QueryParams(), &params.Master)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter master: %s", err))
	}

	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// ------------- Optional query parameter "rid" -------------

	err = runtime.BindQueryParameter("form", true, false, "rid", ctx.QueryParams(), &params.Rid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rid: %s", err))
	}

	// ------------- Optional query parameter "slave" -------------

	err = runtime.BindQueryParameter("form", true, false, "slave", ctx.QueryParams(), &params.Slave)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slave: %s", err))
	}

	// ------------- Optional query parameter "subset" -------------

	err = runtime.BindQueryParameter("form", true, false, "subset", ctx.QueryParams(), &params.Subset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subset: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceActionStartStandby(ctx, nodename, namespace, kind, name, params)
	return err
}

// PostInstanceActionStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceActionStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostInstanceActionStatusParams
	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceActionStatus(ctx, nodename, namespace, kind, name, params)
	return err
}

// PostInstanceActionStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceActionStop(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostInstanceActionStopParams
	// ------------- Optional query parameter "slaves" -------------

	err = runtime.BindQueryParameter("form", true, false, "slaves", ctx.QueryParams(), &params.Slaves)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slaves: %s", err))
	}

	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", ctx.QueryParams(), &params.Force)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter force: %s", err))
	}

	// ------------- Optional query parameter "master" -------------

	err = runtime.BindQueryParameter("form", true, false, "master", ctx.QueryParams(), &params.Master)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter master: %s", err))
	}

	// ------------- Optional query parameter "move-to" -------------

	err = runtime.BindQueryParameter("form", true, false, "move-to", ctx.QueryParams(), &params.MoveTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter move-to: %s", err))
	}

	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// ------------- Optional query parameter "rid" -------------

	err = runtime.BindQueryParameter("form", true, false, "rid", ctx.QueryParams(), &params.Rid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rid: %s", err))
	}

	// ------------- Optional query parameter "slave" -------------

	err = runtime.BindQueryParameter("form", true, false, "slave", ctx.QueryParams(), &params.Slave)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slave: %s", err))
	}

	// ------------- Optional query parameter "subset" -------------

	err = runtime.BindQueryParameter("form", true, false, "subset", ctx.QueryParams(), &params.Subset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subset: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceActionStop(ctx, nodename, namespace, kind, name, params)
	return err
}

// PostInstanceActionSyncIngest converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceActionSyncIngest(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostInstanceActionSyncIngestParams
	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// ------------- Optional query parameter "rid" -------------

	err = runtime.BindQueryParameter("form", true, false, "rid", ctx.QueryParams(), &params.Rid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rid: %s", err))
	}

	// ------------- Optional query parameter "subset" -------------

	err = runtime.BindQueryParameter("form", true, false, "subset", ctx.QueryParams(), &params.Subset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subset: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceActionSyncIngest(ctx, nodename, namespace, kind, name, params)
	return err
}

// PostInstanceActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceActionUnfreeze(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostInstanceActionUnfreezeParams
	// ------------- Optional query parameter "slaves" -------------

	err = runtime.BindQueryParameter("form", true, false, "slaves", ctx.QueryParams(), &params.Slaves)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slaves: %s", err))
	}

	// ------------- Optional query parameter "master" -------------

	err = runtime.BindQueryParameter("form", true, false, "master", ctx.QueryParams(), &params.Master)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter master: %s", err))
	}

	// ------------- Optional query parameter "slave" -------------

	err = runtime.BindQueryParameter("form", true, false, "slave", ctx.QueryParams(), &params.Slave)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slave: %s", err))
	}

	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceActionUnfreeze(ctx, nodename, namespace, kind, name, params)
	return err
}

// PostInstanceActionUnprovision converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceActionUnprovision(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostInstanceActionUnprovisionParams
	// ------------- Optional query parameter "slaves" -------------

	err = runtime.BindQueryParameter("form", true, false, "slaves", ctx.QueryParams(), &params.Slaves)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slaves: %s", err))
	}

	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", ctx.QueryParams(), &params.Force)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter force: %s", err))
	}

	// ------------- Optional query parameter "leader" -------------

	err = runtime.BindQueryParameter("form", true, false, "leader", ctx.QueryParams(), &params.Leader)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter leader: %s", err))
	}

	// ------------- Optional query parameter "master" -------------

	err = runtime.BindQueryParameter("form", true, false, "master", ctx.QueryParams(), &params.Master)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter master: %s", err))
	}

	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// ------------- Optional query parameter "rid" -------------

	err = runtime.BindQueryParameter("form", true, false, "rid", ctx.QueryParams(), &params.Rid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rid: %s", err))
	}

	// ------------- Optional query parameter "state_only" -------------

	err = runtime.BindQueryParameter("form", true, false, "state_only", ctx.QueryParams(), &params.StateOnly)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state_only: %s", err))
	}

	// ------------- Optional query parameter "slave" -------------

	err = runtime.BindQueryParameter("form", true, false, "slave", ctx.QueryParams(), &params.Slave)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slave: %s", err))
	}

	// ------------- Optional query parameter "subset" -------------

	err = runtime.BindQueryParameter("form", true, false, "subset", ctx.QueryParams(), &params.Subset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subset: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceActionUnprovision(ctx, nodename, namespace, kind, name, params)
	return err
}

// PostInstanceClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceClear(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceClear(ctx, nodename, namespace, kind, name)
	return err
}

// GetInstanceConfigFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceConfigFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetInstanceConfigFile(ctx, nodename, namespace, kind, name)
	return err
}

// GetInstanceLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "follow" -------------

	err = runtime.BindQueryParameter("form", true, false, "follow", ctx.QueryParams(), &params.Follow)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter follow: %s", err))
	}

	// ------------- Optional query parameter "lines" -------------

	err = runtime.BindQueryParameter("form", true, false, "lines", ctx.QueryParams(), &params.Lines)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lines: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetInstanceLogs(ctx, nodename, namespace, kind, name, params)
	return err
}

// GetInstanceResourceInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceResourceInfo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetInstanceResourceInfo(ctx, nodename, namespace, kind, name)
	return err
}

// GetInstanceSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetInstanceSchedule(ctx, nodename, namespace, kind, name)
	return err
}

// PostInstanceStateFile converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceStateFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceStateFile(ctx, nodename, namespace, kind, name)
	return err
}

// GetNodeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "follow" -------------

	err = runtime.BindQueryParameter("form", true, false, "follow", ctx.QueryParams(), &params.Follow)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter follow: %s", err))
	}

	// ------------- Optional query parameter "lines" -------------

	err = runtime.BindQueryParameter("form", true, false, "lines", ctx.QueryParams(), &params.Lines)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lines: %s", err))
	}

	// ------------- Optional query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, false, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeLogs(ctx, nodename, params)
	return err
}

// GetNodePing converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodePing(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodePing(ctx, nodename)
	return err
}

// GetNodeSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeSchedule(ctx, nodename)
	return err
}

// GetNodeSSHHostkeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeSSHHostkeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeSSHHostkeys(ctx, nodename)
	return err
}

// GetNodeSSHKey converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeSSHKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeSSHKey(ctx, nodename)
	return err
}

// PutNodeSSHTrust converts echo context to params.
func (w *ServerInterfaceWrapper) PutNodeSSHTrust(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutNodeSSHTrust(ctx, nodename)
	return err
}

// GetNodeSystemDisk converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeSystemDisk(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeSystemDisk(ctx, nodename)
	return err
}

// GetNodeSystemGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeSystemGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeSystemGroup(ctx, nodename)
	return err
}

// GetNodeSystemHardware converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeSystemHardware(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeSystemHardware(ctx, nodename)
	return err
}

// GetNodeSystemIPAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeSystemIPAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeSystemIPAddress(ctx, nodename)
	return err
}

// GetNodeSystemPackage converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeSystemPackage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeSystemPackage(ctx, nodename)
	return err
}

// GetNodeSystemPatch converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeSystemPatch(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeSystemPatch(ctx, nodename)
	return err
}

// GetNodeSystemProperty converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeSystemProperty(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeSystemProperty(ctx, nodename)
	return err
}

// GetNodeSystemSANInitiator converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeSystemSANInitiator(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeSystemSANInitiator(ctx, nodename)
	return err
}

// GetNodeSystemSANPath converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeSystemSANPath(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeSystemSANPath(ctx, nodename)
	return err
}

// GetNodeSystemUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeSystemUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeSystemUser(ctx, nodename)
	return err
}

// GetObjects converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjects(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectsParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetObjects(ctx, params)
	return err
}

// GetObjectPaths converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectPaths(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectPathsParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetObjectPaths(ctx, params)
	return err
}

// PostSvcDisable converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcDisable(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostSvcDisableParams
	// ------------- Optional query parameter "rid" -------------

	err = runtime.BindQueryParameter("form", true, false, "rid", ctx.QueryParams(), &params.Rid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rid: %s", err))
	}

	// ------------- Optional query parameter "subset" -------------

	err = runtime.BindQueryParameter("form", true, false, "subset", ctx.QueryParams(), &params.Subset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subset: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSvcDisable(ctx, namespace, name, params)
	return err
}

// PostSvcEnable converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcEnable(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostSvcEnableParams
	// ------------- Optional query parameter "rid" -------------

	err = runtime.BindQueryParameter("form", true, false, "rid", ctx.QueryParams(), &params.Rid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rid: %s", err))
	}

	// ------------- Optional query parameter "subset" -------------

	err = runtime.BindQueryParameter("form", true, false, "subset", ctx.QueryParams(), &params.Subset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subset: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSvcEnable(ctx, namespace, name, params)
	return err
}

// GetObject converts echo context to params.
func (w *ServerInterfaceWrapper) GetObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetObject(ctx, namespace, kind, name)
	return err
}

// PostObjectActionAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionAbort(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostObjectActionAbort(ctx, namespace, kind, name)
	return err
}

// PostObjectActionDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostObjectActionDelete(ctx, namespace, kind, name)
	return err
}

// PostObjectActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionFreeze(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostObjectActionFreeze(ctx, namespace, kind, name)
	return err
}

// PostObjectActionGiveback converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionGiveback(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostObjectActionGiveback(ctx, namespace, kind, name)
	return err
}

// PostObjectActionProvision converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionProvision(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostObjectActionProvision(ctx, namespace, kind, name)
	return err
}

// PostObjectActionPurge converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionPurge(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostObjectActionPurge(ctx, namespace, kind, name)
	return err
}

// PostObjectActionRestart converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionRestart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostObjectActionRestart(ctx, namespace, kind, name)
	return err
}

// PostObjectActionStart converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionStart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostObjectActionStart(ctx, namespace, kind, name)
	return err
}

// PostObjectActionStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionStop(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostObjectActionStop(ctx, namespace, kind, name)
	return err
}

// PostObjectActionSwitch converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionSwitch(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostObjectActionSwitch(ctx, namespace, kind, name)
	return err
}

// PostObjectActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionUnfreeze(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostObjectActionUnfreeze(ctx, namespace, kind, name)
	return err
}

// PostObjectActionUnprovision converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionUnprovision(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostObjectActionUnprovision(ctx, namespace, kind, name)
	return err
}

// GetObjectConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectConfigParams
	// ------------- Optional query parameter "evaluate" -------------

	err = runtime.BindQueryParameter("form", true, false, "evaluate", ctx.QueryParams(), &params.Evaluate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter evaluate: %s", err))
	}

	// ------------- Optional query parameter "impersonate" -------------

	err = runtime.BindQueryParameter("form", true, false, "impersonate", ctx.QueryParams(), &params.Impersonate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter impersonate: %s", err))
	}

	// ------------- Optional query parameter "kw" -------------

	err = runtime.BindQueryParameter("form", true, false, "kw", ctx.QueryParams(), &params.Kw)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kw: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetObjectConfig(ctx, namespace, kind, name, params)
	return err
}

// PatchObjectConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PatchObjectConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchObjectConfigParams
	// ------------- Optional query parameter "delete" -------------

	err = runtime.BindQueryParameter("form", true, false, "delete", ctx.QueryParams(), &params.Delete)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter delete: %s", err))
	}

	// ------------- Optional query parameter "unset" -------------

	err = runtime.BindQueryParameter("form", true, false, "unset", ctx.QueryParams(), &params.Unset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unset: %s", err))
	}

	// ------------- Optional query parameter "set" -------------

	err = runtime.BindQueryParameter("form", true, false, "set", ctx.QueryParams(), &params.Set)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter set: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchObjectConfig(ctx, namespace, kind, name, params)
	return err
}

// GetObjectConfigFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectConfigFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetObjectConfigFile(ctx, namespace, kind, name)
	return err
}

// PostObjectConfigFile converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectConfigFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostObjectConfigFile(ctx, namespace, kind, name)
	return err
}

// PutObjectConfigFile converts echo context to params.
func (w *ServerInterfaceWrapper) PutObjectConfigFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutObjectConfigFile(ctx, namespace, kind, name)
	return err
}

// GetObjectConfigKeywords converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectConfigKeywords(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectConfigKeywordsParams
	// ------------- Optional query parameter "driver" -------------

	err = runtime.BindQueryParameter("form", true, false, "driver", ctx.QueryParams(), &params.Driver)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter driver: %s", err))
	}

	// ------------- Optional query parameter "section" -------------

	err = runtime.BindQueryParameter("form", true, false, "section", ctx.QueryParams(), &params.Section)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter section: %s", err))
	}

	// ------------- Optional query parameter "option" -------------

	err = runtime.BindQueryParameter("form", true, false, "option", ctx.QueryParams(), &params.Option)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter option: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetObjectConfigKeywords(ctx, namespace, kind, name, params)
	return err
}

// GetObjectData converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectDataParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Names)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetObjectData(ctx, namespace, kind, name, params)
	return err
}

// PatchObjectData converts echo context to params.
func (w *ServerInterfaceWrapper) PatchObjectData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchObjectData(ctx, namespace, kind, name)
	return err
}

// DeleteObjectDataKey converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteObjectDataKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteObjectDataKeyParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteObjectDataKey(ctx, namespace, kind, name, params)
	return err
}

// GetObjectDataKey converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectDataKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectDataKeyParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetObjectDataKey(ctx, namespace, kind, name, params)
	return err
}

// PostObjectDataKey converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectDataKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostObjectDataKeyParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostObjectDataKey(ctx, namespace, kind, name, params)
	return err
}

// PutObjectDataKey converts echo context to params.
func (w *ServerInterfaceWrapper) PutObjectDataKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PutObjectDataKeyParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutObjectDataKey(ctx, namespace, kind, name, params)
	return err
}

// GetObjectDataKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectDataKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetObjectDataKeys(ctx, namespace, kind, name)
	return err
}

// GetObjectResourceInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectResourceInfo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetObjectResourceInfo(ctx, namespace, kind, name)
	return err
}

// GetObjectSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetObjectSchedule(ctx, namespace, kind, name)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPools(ctx, params)
	return err
}

// GetPoolVolumes converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolVolumes(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolVolumesParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPoolVolumes(ctx, params)
	return err
}

// GetRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelayMessageParams
	// ------------- Required query parameter "nodename" -------------

	err = runtime.BindQueryParameter("form", true, true, "nodename", ctx.QueryParams(), &params.Nodename)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Required query parameter "cluster_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "cluster_id", ctx.QueryParams(), &params.ClusterID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cluster_id: %s", err))
	}

	// ------------- Optional query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, false, "username", ctx.QueryParams(), &params.Username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRelayMessage(ctx, params)
	return err
}

// PostRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) PostRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostRelayMessage(ctx)
	return err
}

// GetRelayStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelayStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelayStatusParams
	// ------------- Optional query parameter "relay" -------------

	err = runtime.BindQueryParameter("form", true, false, "relay", ctx.QueryParams(), &params.Relays)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter relay: %s", err))
	}

	// ------------- Optional query parameter "remote" -------------

	err = runtime.BindQueryParameter("form", true, false, "remote", ctx.QueryParams(), &params.Remote)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter remote: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRelayStatus(ctx, params)
	return err
}

// GetResources converts echo context to params.
func (w *ServerInterfaceWrapper) GetResources(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetResourcesParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// ------------- Optional query parameter "resource" -------------

	err = runtime.BindQueryParameter("form", true, false, "resource", ctx.QueryParams(), &params.Resource)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetResources(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/auth/info", wrapper.GetAuthInfo)
	router.POST(baseURL+"/api/auth/refresh", wrapper.PostAuthRefresh)
	router.POST(baseURL+"/api/auth/token", wrapper.PostAuthToken)
	router.GET(baseURL+"/api/auth/whoami", wrapper.GetAuthWhoAmI)
	router.POST(baseURL+"/api/cluster/action/abort", wrapper.PostClusterActionAbort)
	router.POST(baseURL+"/api/cluster/action/freeze", wrapper.PostClusterActionFreeze)
	router.POST(baseURL+"/api/cluster/action/unfreeze", wrapper.PostClusterActionUnfreeze)
	router.GET(baseURL+"/api/cluster/config", wrapper.GetClusterConfig)
	router.PATCH(baseURL+"/api/cluster/config", wrapper.PatchClusterConfig)
	router.GET(baseURL+"/api/cluster/config/file", wrapper.GetClusterConfigFile)
	router.PUT(baseURL+"/api/cluster/config/file", wrapper.PutClusterConfigFile)
	router.GET(baseURL+"/api/cluster/config/keywords", wrapper.GetClusterConfigKeywords)
	router.POST(baseURL+"/api/cluster/join", wrapper.PostClusterJoin)
	router.POST(baseURL+"/api/cluster/leave", wrapper.PostClusterLeave)
	router.GET(baseURL+"/api/cluster/status", wrapper.GetClusterStatus)
	router.GET(baseURL+"/api/instance", wrapper.GetInstances)
	router.POST(baseURL+"/api/instance/path/:namespace/:kind/:name/progress", wrapper.PostInstanceProgress)
	router.POST(baseURL+"/api/instance/path/:namespace/:kind/:name/status", wrapper.PostInstanceStatus)
	router.GET(baseURL+"/api/network", wrapper.GetNetworks)
	router.GET(baseURL+"/api/network/ip", wrapper.GetNetworkIP)
	router.GET(baseURL+"/api/node", wrapper.GetNodes)
	router.GET(baseURL+"/api/node/info", wrapper.GetNodesInfo)
	router.POST(baseURL+"/api/node/name/:nodename/action/abort", wrapper.PostPeerActionAbort)
	router.POST(baseURL+"/api/node/name/:nodename/action/clear", wrapper.PostNodeActionClear)
	router.POST(baseURL+"/api/node/name/:nodename/action/drain", wrapper.PostPeerActionDrain)
	router.POST(baseURL+"/api/node/name/:nodename/action/freeze", wrapper.PostPeerActionFreeze)
	router.POST(baseURL+"/api/node/name/:nodename/action/push/asset", wrapper.PostNodeActionPushAsset)
	router.POST(baseURL+"/api/node/name/:nodename/action/push/disk", wrapper.PostNodeActionPushDisk)
	router.POST(baseURL+"/api/node/name/:nodename/action/push/patch", wrapper.PostNodeActionPushPatch)
	router.POST(baseURL+"/api/node/name/:nodename/action/push/pkg", wrapper.PostNodeActionPushPkg)
	router.POST(baseURL+"/api/node/name/:nodename/action/scan/capabilities", wrapper.PostNodeActionScanCapabilities)
	router.POST(baseURL+"/api/node/name/:nodename/action/sysreport", wrapper.PostNodeActionSysreport)
	router.POST(baseURL+"/api/node/name/:nodename/action/unfreeze", wrapper.PostPeerActionUnfreeze)
	router.GET(baseURL+"/api/node/name/:nodename/capabilities", wrapper.GetNodeCapabilities)
	router.GET(baseURL+"/api/node/name/:nodename/config", wrapper.GetNodeConfig)
	router.PATCH(baseURL+"/api/node/name/:nodename/config", wrapper.PatchNodeConfig)
	router.GET(baseURL+"/api/node/name/:nodename/config/file", wrapper.GetNodeConfigFile)
	router.PUT(baseURL+"/api/node/name/:nodename/config/file", wrapper.PutNodeConfigFile)
	router.GET(baseURL+"/api/node/name/:nodename/config/keywords", wrapper.GetNodeConfigKeywords)
	router.POST(baseURL+"/api/node/name/:nodename/daemon/action/restart", wrapper.PostDaemonRestart)
	router.POST(baseURL+"/api/node/name/:nodename/daemon/action/shutdown", wrapper.PostDaemonShutdown)
	router.POST(baseURL+"/api/node/name/:nodename/daemon/action/stop", wrapper.PostDaemonStop)
	router.GET(baseURL+"/api/node/name/:nodename/daemon/dns/dump", wrapper.GetDaemonDNSDump)
	router.GET(baseURL+"/api/node/name/:nodename/daemon/event", wrapper.GetDaemonEvents)
	router.POST(baseURL+"/api/node/name/:nodename/daemon/hb/name/:name/action/restart", wrapper.PostDaemonHeartbeatRestart)
	router.POST(baseURL+"/api/node/name/:nodename/daemon/hb/name/:name/action/sign", wrapper.PostDaemonHeartbeatSign)
	router.POST(baseURL+"/api/node/name/:nodename/daemon/hb/name/:name/action/start", wrapper.PostDaemonHeartbeatStart)
	router.POST(baseURL+"/api/node/name/:nodename/daemon/hb/name/:name/action/stop", wrapper.PostDaemonHeartbeatStop)
	router.POST(baseURL+"/api/node/name/:nodename/daemon/hb/name/:name/action/wipe", wrapper.PostDaemonHeartbeatWipe)
	router.POST(baseURL+"/api/node/name/:nodename/daemon/listener/name/:name/action/restart", wrapper.PostDaemonListenerRestart)
	router.POST(baseURL+"/api/node/name/:nodename/daemon/listener/name/:name/action/start", wrapper.PostDaemonListenerStart)
	router.POST(baseURL+"/api/node/name/:nodename/daemon/listener/name/:name/action/stop", wrapper.PostDaemonListenerStop)
	router.POST(baseURL+"/api/node/name/:nodename/daemon/listener/name/:name/log/control", wrapper.PostDaemonListenerLogControl)
	router.POST(baseURL+"/api/node/name/:nodename/daemon/log/control", wrapper.PostDaemonLogControl)
	router.GET(baseURL+"/api/node/name/:nodename/drbd/allocation", wrapper.GetNodeDRBDAllocation)
	router.GET(baseURL+"/api/node/name/:nodename/drbd/config", wrapper.GetNodeDRBDConfig)
	router.POST(baseURL+"/api/node/name/:nodename/drbd/config", wrapper.PostNodeDRBDConfig)
	router.POST(baseURL+"/api/node/name/:nodename/drbd/connect", wrapper.PostNodeDRBDConnect)
	router.POST(baseURL+"/api/node/name/:nodename/drbd/primary", wrapper.PostNodeDRBDPrimary)
	router.POST(baseURL+"/api/node/name/:nodename/drbd/secondary", wrapper.PostNodeDRBDSecondary)
	router.GET(baseURL+"/api/node/name/:nodename/drivers", wrapper.GetNodeDriver)
	router.GET(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name", wrapper.GetInstance)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/action/boot", wrapper.PostInstanceActionBoot)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/action/delete", wrapper.PostInstanceActionDelete)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/action/freeze", wrapper.PostInstanceActionFreeze)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/action/provision", wrapper.PostInstanceActionProvision)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/action/prstart", wrapper.PostInstanceActionPRStart)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/action/prstop", wrapper.PostInstanceActionPRStop)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/action/push/resource/info", wrapper.PostInstanceActionPushResourceInfo)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/action/restart", wrapper.PostInstanceActionRestart)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/action/run", wrapper.PostInstanceActionRun)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/action/shutdown", wrapper.PostInstanceActionShutdown)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/action/start", wrapper.PostInstanceActionStart)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/action/startstandby", wrapper.PostInstanceActionStartStandby)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/action/status", wrapper.PostInstanceActionStatus)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/action/stop", wrapper.PostInstanceActionStop)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/action/sync/ingest", wrapper.PostInstanceActionSyncIngest)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/action/unfreeze", wrapper.PostInstanceActionUnfreeze)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/action/unprovision", wrapper.PostInstanceActionUnprovision)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/clear", wrapper.PostInstanceClear)
	router.GET(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/config/file", wrapper.GetInstanceConfigFile)
	router.GET(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/log", wrapper.GetInstanceLogs)
	router.GET(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/resource/info", wrapper.GetInstanceResourceInfo)
	router.GET(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/schedule", wrapper.GetInstanceSchedule)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/state/file", wrapper.PostInstanceStateFile)
	router.GET(baseURL+"/api/node/name/:nodename/log", wrapper.GetNodeLogs)
	router.GET(baseURL+"/api/node/name/:nodename/ping", wrapper.GetNodePing)
	router.GET(baseURL+"/api/node/name/:nodename/schedule", wrapper.GetNodeSchedule)
	router.GET(baseURL+"/api/node/name/:nodename/ssh/hostkeys", wrapper.GetNodeSSHHostkeys)
	router.GET(baseURL+"/api/node/name/:nodename/ssh/key", wrapper.GetNodeSSHKey)
	router.PUT(baseURL+"/api/node/name/:nodename/ssh/trust", wrapper.PutNodeSSHTrust)
	router.GET(baseURL+"/api/node/name/:nodename/system/disk", wrapper.GetNodeSystemDisk)
	router.GET(baseURL+"/api/node/name/:nodename/system/group", wrapper.GetNodeSystemGroup)
	router.GET(baseURL+"/api/node/name/:nodename/system/hardware", wrapper.GetNodeSystemHardware)
	router.GET(baseURL+"/api/node/name/:nodename/system/ipaddress", wrapper.GetNodeSystemIPAddress)
	router.GET(baseURL+"/api/node/name/:nodename/system/package", wrapper.GetNodeSystemPackage)
	router.GET(baseURL+"/api/node/name/:nodename/system/patch", wrapper.GetNodeSystemPatch)
	router.GET(baseURL+"/api/node/name/:nodename/system/property", wrapper.GetNodeSystemProperty)
	router.GET(baseURL+"/api/node/name/:nodename/system/san/initiator", wrapper.GetNodeSystemSANInitiator)
	router.GET(baseURL+"/api/node/name/:nodename/system/san/path", wrapper.GetNodeSystemSANPath)
	router.GET(baseURL+"/api/node/name/:nodename/system/user", wrapper.GetNodeSystemUser)
	router.GET(baseURL+"/api/object", wrapper.GetObjects)
	router.GET(baseURL+"/api/object/path", wrapper.GetObjectPaths)
	router.POST(baseURL+"/api/object/path/:namespace/svc/:name/disable", wrapper.PostSvcDisable)
	router.POST(baseURL+"/api/object/path/:namespace/svc/:name/enable", wrapper.PostSvcEnable)
	router.GET(baseURL+"/api/object/path/:namespace/:kind/:name", wrapper.GetObject)
	router.POST(baseURL+"/api/object/path/:namespace/:kind/:name/action/abort", wrapper.PostObjectActionAbort)
	router.POST(baseURL+"/api/object/path/:namespace/:kind/:name/action/delete", wrapper.PostObjectActionDelete)
	router.POST(baseURL+"/api/object/path/:namespace/:kind/:name/action/freeze", wrapper.PostObjectActionFreeze)
	router.POST(baseURL+"/api/object/path/:namespace/:kind/:name/action/giveback", wrapper.PostObjectActionGiveback)
	router.POST(baseURL+"/api/object/path/:namespace/:kind/:name/action/provision", wrapper.PostObjectActionProvision)
	router.POST(baseURL+"/api/object/path/:namespace/:kind/:name/action/purge", wrapper.PostObjectActionPurge)
	router.POST(baseURL+"/api/object/path/:namespace/:kind/:name/action/restart", wrapper.PostObjectActionRestart)
	router.POST(baseURL+"/api/object/path/:namespace/:kind/:name/action/start", wrapper.PostObjectActionStart)
	router.POST(baseURL+"/api/object/path/:namespace/:kind/:name/action/stop", wrapper.PostObjectActionStop)
	router.POST(baseURL+"/api/object/path/:namespace/:kind/:name/action/switch", wrapper.PostObjectActionSwitch)
	router.POST(baseURL+"/api/object/path/:namespace/:kind/:name/action/unfreeze", wrapper.PostObjectActionUnfreeze)
	router.POST(baseURL+"/api/object/path/:namespace/:kind/:name/action/unprovision", wrapper.PostObjectActionUnprovision)
	router.GET(baseURL+"/api/object/path/:namespace/:kind/:name/config", wrapper.GetObjectConfig)
	router.PATCH(baseURL+"/api/object/path/:namespace/:kind/:name/config", wrapper.PatchObjectConfig)
	router.GET(baseURL+"/api/object/path/:namespace/:kind/:name/config/file", wrapper.GetObjectConfigFile)
	router.POST(baseURL+"/api/object/path/:namespace/:kind/:name/config/file", wrapper.PostObjectConfigFile)
	router.PUT(baseURL+"/api/object/path/:namespace/:kind/:name/config/file", wrapper.PutObjectConfigFile)
	router.GET(baseURL+"/api/object/path/:namespace/:kind/:name/config/keywords", wrapper.GetObjectConfigKeywords)
	router.GET(baseURL+"/api/object/path/:namespace/:kind/:name/data", wrapper.GetObjectData)
	router.PATCH(baseURL+"/api/object/path/:namespace/:kind/:name/data", wrapper.PatchObjectData)
	router.DELETE(baseURL+"/api/object/path/:namespace/:kind/:name/data/key", wrapper.DeleteObjectDataKey)
	router.GET(baseURL+"/api/object/path/:namespace/:kind/:name/data/key", wrapper.GetObjectDataKey)
	router.POST(baseURL+"/api/object/path/:namespace/:kind/:name/data/key", wrapper.PostObjectDataKey)
	router.PUT(baseURL+"/api/object/path/:namespace/:kind/:name/data/key", wrapper.PutObjectDataKey)
	router.GET(baseURL+"/api/object/path/:namespace/:kind/:name/data/keys", wrapper.GetObjectDataKeys)
	router.GET(baseURL+"/api/object/path/:namespace/:kind/:name/resource/info", wrapper.GetObjectResourceInfo)
	router.GET(baseURL+"/api/object/path/:namespace/:kind/:name/schedule", wrapper.GetObjectSchedule)
	router.GET(baseURL+"/api/openapi", wrapper.GetSwagger)
	router.GET(baseURL+"/api/pool", wrapper.GetPools)
	router.GET(baseURL+"/api/pool/volume", wrapper.GetPoolVolumes)
	router.GET(baseURL+"/api/relay/message", wrapper.GetRelayMessage)
	router.POST(baseURL+"/api/relay/message", wrapper.PostRelayMessage)
	router.GET(baseURL+"/api/relay/status", wrapper.GetRelayStatus)
	router.GET(baseURL+"/api/resource", wrapper.GetResources)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"w7Oo9fHz58+f//8AAAD//y83fg3sZwIA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
