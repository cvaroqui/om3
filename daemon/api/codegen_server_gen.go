// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/auth/info)
	GetAuthInfo(ctx echo.Context) error
	// Refresh access token
	// (POST /api/auth/refresh)
	PostAuthRefresh(ctx echo.Context, params PostAuthRefreshParams) error
	// Get a new access token
	// (POST /api/auth/token)
	PostAuthToken(ctx echo.Context, params PostAuthTokenParams) error

	// (GET /api/auth/whoami)
	GetAuthWhoAmI(ctx echo.Context) error

	// (POST /api/cluster/action/abort)
	PostClusterActionAbort(ctx echo.Context) error

	// (POST /api/cluster/action/freeze)
	PostClusterActionFreeze(ctx echo.Context) error

	// (POST /api/cluster/action/unfreeze)
	PostClusterActionUnfreeze(ctx echo.Context) error

	// (GET /api/cluster/config)
	GetClusterConfig(ctx echo.Context, params GetClusterConfigParams) error

	// (PATCH /api/cluster/config)
	PatchClusterConfig(ctx echo.Context, params PatchClusterConfigParams) error

	// (GET /api/cluster/config/file)
	GetClusterConfigFile(ctx echo.Context) error

	// (PUT /api/cluster/config/file)
	PutClusterConfigFile(ctx echo.Context) error

	// (GET /api/cluster/config/keywords)
	GetClusterConfigKeywords(ctx echo.Context, params GetClusterConfigKeywordsParams) error

	// (POST /api/cluster/hb/rotate)
	PostClusterHeartbeatRotate(ctx echo.Context) error

	// (POST /api/cluster/join)
	PostClusterJoin(ctx echo.Context, params PostClusterJoinParams) error

	// (POST /api/cluster/leave)
	PostClusterLeave(ctx echo.Context, params PostClusterLeaveParams) error

	// (GET /api/cluster/status)
	GetClusterStatus(ctx echo.Context, params GetClusterStatusParams) error

	// (GET /api/instance)
	GetInstances(ctx echo.Context, params GetInstancesParams) error

	// (POST /api/instance/path/{namespace}/{kind}/{name}/progress)
	PostInstanceProgress(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (POST /api/instance/path/{namespace}/{kind}/{name}/status)
	PostInstanceStatus(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (GET /api/network)
	GetNetworks(ctx echo.Context, params GetNetworksParams) error

	// (GET /api/network/ip)
	GetNetworkIP(ctx echo.Context, params GetNetworkIPParams) error

	// (GET /api/node)
	GetNodes(ctx echo.Context, params GetNodesParams) error

	// (GET /api/node/info)
	GetNodesInfo(ctx echo.Context) error

	// (POST /api/node/name/{nodename}/action/abort)
	PostPeerActionAbort(ctx echo.Context, nodename InPathNodeName) error

	// (POST /api/node/name/{nodename}/action/clear)
	PostNodeActionClear(ctx echo.Context, nodename InPathNodeName) error

	// (POST /api/node/name/{nodename}/action/drain)
	PostPeerActionDrain(ctx echo.Context, nodename InPathNodeName) error

	// (POST /api/node/name/{nodename}/action/freeze)
	PostPeerActionFreeze(ctx echo.Context, nodename InPathNodeName, params PostPeerActionFreezeParams) error

	// (POST /api/node/name/{nodename}/action/push/asset)
	PostNodeActionPushAsset(ctx echo.Context, nodename InPathNodeName, params PostNodeActionPushAssetParams) error

	// (POST /api/node/name/{nodename}/action/push/disk)
	PostNodeActionPushDisk(ctx echo.Context, nodename InPathNodeName, params PostNodeActionPushDiskParams) error

	// (POST /api/node/name/{nodename}/action/push/patch)
	PostNodeActionPushPatch(ctx echo.Context, nodename InPathNodeName, params PostNodeActionPushPatchParams) error

	// (POST /api/node/name/{nodename}/action/push/pkg)
	PostNodeActionPushPkg(ctx echo.Context, nodename InPathNodeName, params PostNodeActionPushPkgParams) error

	// (POST /api/node/name/{nodename}/action/scan/capabilities)
	PostNodeActionScanCapabilities(ctx echo.Context, nodename InPathNodeName, params PostNodeActionScanCapabilitiesParams) error

	// (POST /api/node/name/{nodename}/action/sysreport)
	PostNodeActionSysreport(ctx echo.Context, nodename InPathNodeName, params PostNodeActionSysreportParams) error

	// (POST /api/node/name/{nodename}/action/unfreeze)
	PostPeerActionUnfreeze(ctx echo.Context, nodename InPathNodeName, params PostPeerActionUnfreezeParams) error

	// (GET /api/node/name/{nodename}/capabilities)
	GetNodeCapabilities(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/config)
	GetNodeConfig(ctx echo.Context, nodename InPathNodeName, params GetNodeConfigParams) error

	// (PATCH /api/node/name/{nodename}/config)
	PatchNodeConfig(ctx echo.Context, nodename InPathNodeName, params PatchNodeConfigParams) error

	// (GET /api/node/name/{nodename}/config/file)
	GetNodeConfigFile(ctx echo.Context, nodename InPathNodeName) error

	// (PUT /api/node/name/{nodename}/config/file)
	PutNodeConfigFile(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/config/keywords)
	GetNodeConfigKeywords(ctx echo.Context, nodename InPathNodeName, params GetNodeConfigKeywordsParams) error

	// (POST /api/node/name/{nodename}/daemon/action/restart)
	PostDaemonRestart(ctx echo.Context, nodename InPathNodeName) error

	// (POST /api/node/name/{nodename}/daemon/action/shutdown)
	PostDaemonShutdown(ctx echo.Context, nodename InPathNodeName, params PostDaemonShutdownParams) error

	// (POST /api/node/name/{nodename}/daemon/action/stop)
	PostDaemonStop(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/daemon/dns/dump)
	GetDaemonDNSDump(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/daemon/event)
	GetDaemonEvents(ctx echo.Context, nodename InPathNodeName, params GetDaemonEventsParams) error

	// (POST /api/node/name/{nodename}/daemon/hb/name/{name}/action/restart)
	PostDaemonHeartbeatRestart(ctx echo.Context, nodename InPathNodeName, name InPathHeartbeatName) error

	// (POST /api/node/name/{nodename}/daemon/hb/name/{name}/action/sign)
	PostDaemonHeartbeatSign(ctx echo.Context, nodename InPathNodeName, name InPathHeartbeatName) error

	// (POST /api/node/name/{nodename}/daemon/hb/name/{name}/action/start)
	PostDaemonHeartbeatStart(ctx echo.Context, nodename InPathNodeName, name InPathHeartbeatName) error

	// (POST /api/node/name/{nodename}/daemon/hb/name/{name}/action/stop)
	PostDaemonHeartbeatStop(ctx echo.Context, nodename InPathNodeName, name InPathHeartbeatName) error

	// (POST /api/node/name/{nodename}/daemon/hb/name/{name}/action/wipe)
	PostDaemonHeartbeatWipe(ctx echo.Context, nodename InPathNodeName, name InPathHeartbeatName) error

	// (POST /api/node/name/{nodename}/daemon/listener/name/{name}/action/restart)
	PostDaemonListenerRestart(ctx echo.Context, nodename InPathNodeName, name InPathListenerName) error

	// (POST /api/node/name/{nodename}/daemon/listener/name/{name}/action/start)
	PostDaemonListenerStart(ctx echo.Context, nodename InPathNodeName, name InPathListenerName) error

	// (POST /api/node/name/{nodename}/daemon/listener/name/{name}/action/stop)
	PostDaemonListenerStop(ctx echo.Context, nodename InPathNodeName, name InPathListenerName) error

	// (POST /api/node/name/{nodename}/daemon/listener/name/{name}/log/control)
	PostDaemonListenerLogControl(ctx echo.Context, nodename InPathNodeName, name InPathListenerName) error

	// (POST /api/node/name/{nodename}/daemon/log/control)
	PostDaemonLogControl(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/drbd/allocation)
	GetNodeDRBDAllocation(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/drbd/config)
	GetNodeDRBDConfig(ctx echo.Context, nodename InPathNodeName, params GetNodeDRBDConfigParams) error

	// (POST /api/node/name/{nodename}/drbd/config)
	PostNodeDRBDConfig(ctx echo.Context, nodename InPathNodeName, params PostNodeDRBDConfigParams) error

	// (POST /api/node/name/{nodename}/drbd/connect)
	PostNodeDRBDConnect(ctx echo.Context, nodename InPathNodeName, params PostNodeDRBDConnectParams) error

	// (POST /api/node/name/{nodename}/drbd/primary)
	PostNodeDRBDPrimary(ctx echo.Context, nodename InPathNodeName, params PostNodeDRBDPrimaryParams) error

	// (POST /api/node/name/{nodename}/drbd/secondary)
	PostNodeDRBDSecondary(ctx echo.Context, nodename InPathNodeName, params PostNodeDRBDSecondaryParams) error

	// (GET /api/node/name/{nodename}/drivers)
	GetNodeDriver(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name})
	GetInstance(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/boot)
	PostInstanceActionBoot(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName, params PostInstanceActionBootParams) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/delete)
	PostInstanceActionDelete(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName, params PostInstanceActionDeleteParams) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/freeze)
	PostInstanceActionFreeze(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName, params PostInstanceActionFreezeParams) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/provision)
	PostInstanceActionProvision(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName, params PostInstanceActionProvisionParams) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/prstart)
	PostInstanceActionPRStart(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName, params PostInstanceActionPRStartParams) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/prstop)
	PostInstanceActionPRStop(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName, params PostInstanceActionPRStopParams) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/push/resource/info)
	PostInstanceActionPushResourceInfo(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName, params PostInstanceActionPushResourceInfoParams) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/restart)
	PostInstanceActionRestart(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName, params PostInstanceActionRestartParams) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/run)
	PostInstanceActionRun(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName, params PostInstanceActionRunParams) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/shutdown)
	PostInstanceActionShutdown(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName, params PostInstanceActionShutdownParams) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/start)
	PostInstanceActionStart(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName, params PostInstanceActionStartParams) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/startstandby)
	PostInstanceActionStartStandby(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName, params PostInstanceActionStartStandbyParams) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/status)
	PostInstanceActionStatus(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName, params PostInstanceActionStatusParams) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/stop)
	PostInstanceActionStop(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName, params PostInstanceActionStopParams) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/sync/ingest)
	PostInstanceActionSyncIngest(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName, params PostInstanceActionSyncIngestParams) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/unfreeze)
	PostInstanceActionUnfreeze(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName, params PostInstanceActionUnfreezeParams) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/unprovision)
	PostInstanceActionUnprovision(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName, params PostInstanceActionUnprovisionParams) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/clear)
	PostInstanceClear(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (GET /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/config/file)
	GetInstanceConfigFile(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/console)
	PostInstanceResourceConsole(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName, params PostInstanceResourceConsoleParams) error

	// (GET /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/log)
	GetInstanceLogs(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName, params GetInstanceLogsParams) error

	// (GET /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/resource/info)
	GetInstanceResourceInfo(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (GET /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/schedule)
	GetInstanceSchedule(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (POST /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/state/file)
	PostInstanceStateFile(ctx echo.Context, nodename InPathNodeName, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (GET /api/node/name/{nodename}/log)
	GetNodeLogs(ctx echo.Context, nodename InPathNodeName, params GetNodeLogsParams) error

	// (GET /api/node/name/{nodename}/ping)
	GetNodePing(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/schedule)
	GetNodeSchedule(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/ssh/hostkeys)
	GetNodeSSHHostkeys(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/ssh/key)
	GetNodeSSHKey(ctx echo.Context, nodename InPathNodeName) error

	// (PUT /api/node/name/{nodename}/ssh/trust)
	PutNodeSSHTrust(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/system/disk)
	GetNodeSystemDisk(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/system/group)
	GetNodeSystemGroup(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/system/hardware)
	GetNodeSystemHardware(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/system/ipaddress)
	GetNodeSystemIPAddress(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/system/package)
	GetNodeSystemPackage(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/system/patch)
	GetNodeSystemPatch(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/system/property)
	GetNodeSystemProperty(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/system/san/initiator)
	GetNodeSystemSANInitiator(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/system/san/path)
	GetNodeSystemSANPath(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/node/name/{nodename}/system/user)
	GetNodeSystemUser(ctx echo.Context, nodename InPathNodeName) error

	// (GET /api/object)
	GetObjects(ctx echo.Context, params GetObjectsParams) error

	// (GET /api/object/path)
	GetObjectPaths(ctx echo.Context, params GetObjectPathsParams) error

	// (POST /api/object/path/{namespace}/svc/{name}/disable)
	PostSvcDisable(ctx echo.Context, namespace InPathNamespace, name InPathName, params PostSvcDisableParams) error

	// (POST /api/object/path/{namespace}/svc/{name}/enable)
	PostSvcEnable(ctx echo.Context, namespace InPathNamespace, name InPathName, params PostSvcEnableParams) error

	// (GET /api/object/path/{namespace}/{kind}/{name})
	GetObject(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (POST /api/object/path/{namespace}/{kind}/{name}/action/abort)
	PostObjectActionAbort(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (POST /api/object/path/{namespace}/{kind}/{name}/action/delete)
	PostObjectActionDelete(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (POST /api/object/path/{namespace}/{kind}/{name}/action/freeze)
	PostObjectActionFreeze(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (POST /api/object/path/{namespace}/{kind}/{name}/action/giveback)
	PostObjectActionGiveback(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (POST /api/object/path/{namespace}/{kind}/{name}/action/provision)
	PostObjectActionProvision(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (POST /api/object/path/{namespace}/{kind}/{name}/action/purge)
	PostObjectActionPurge(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (POST /api/object/path/{namespace}/{kind}/{name}/action/restart)
	PostObjectActionRestart(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (POST /api/object/path/{namespace}/{kind}/{name}/action/start)
	PostObjectActionStart(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (POST /api/object/path/{namespace}/{kind}/{name}/action/stop)
	PostObjectActionStop(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (POST /api/object/path/{namespace}/{kind}/{name}/action/switch)
	PostObjectActionSwitch(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (POST /api/object/path/{namespace}/{kind}/{name}/action/unfreeze)
	PostObjectActionUnfreeze(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (POST /api/object/path/{namespace}/{kind}/{name}/action/unprovision)
	PostObjectActionUnprovision(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (GET /api/object/path/{namespace}/{kind}/{name}/config)
	GetObjectConfig(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName, params GetObjectConfigParams) error

	// (PATCH /api/object/path/{namespace}/{kind}/{name}/config)
	PatchObjectConfig(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName, params PatchObjectConfigParams) error

	// (GET /api/object/path/{namespace}/{kind}/{name}/config/file)
	GetObjectConfigFile(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (POST /api/object/path/{namespace}/{kind}/{name}/config/file)
	PostObjectConfigFile(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (PUT /api/object/path/{namespace}/{kind}/{name}/config/file)
	PutObjectConfigFile(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (GET /api/object/path/{namespace}/{kind}/{name}/config/keywords)
	GetObjectConfigKeywords(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName, params GetObjectConfigKeywordsParams) error

	// (GET /api/object/path/{namespace}/{kind}/{name}/data)
	GetObjectData(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName, params GetObjectDataParams) error

	// (PATCH /api/object/path/{namespace}/{kind}/{name}/data)
	PatchObjectData(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (DELETE /api/object/path/{namespace}/{kind}/{name}/data/key)
	DeleteObjectDataKey(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName, params DeleteObjectDataKeyParams) error

	// (GET /api/object/path/{namespace}/{kind}/{name}/data/key)
	GetObjectDataKey(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName, params GetObjectDataKeyParams) error

	// (POST /api/object/path/{namespace}/{kind}/{name}/data/key)
	PostObjectDataKey(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName, params PostObjectDataKeyParams) error

	// (PUT /api/object/path/{namespace}/{kind}/{name}/data/key)
	PutObjectDataKey(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName, params PutObjectDataKeyParams) error

	// (GET /api/object/path/{namespace}/{kind}/{name}/data/keys)
	GetObjectDataKeys(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (GET /api/object/path/{namespace}/{kind}/{name}/resource/info)
	GetObjectResourceInfo(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (GET /api/object/path/{namespace}/{kind}/{name}/schedule)
	GetObjectSchedule(ctx echo.Context, namespace InPathNamespace, kind InPathKind, name InPathName) error

	// (GET /api/openapi)
	GetSwagger(ctx echo.Context) error

	// (GET /api/pool)
	GetPools(ctx echo.Context, params GetPoolsParams) error

	// (GET /api/pool/volume)
	GetPoolVolumes(ctx echo.Context, params GetPoolVolumesParams) error

	// (GET /api/relay/message)
	GetRelayMessage(ctx echo.Context, params GetRelayMessageParams) error

	// (POST /api/relay/message)
	PostRelayMessage(ctx echo.Context) error

	// (GET /api/relay/status)
	GetRelayStatus(ctx echo.Context, params GetRelayStatusParams) error

	// (GET /api/resource)
	GetResources(ctx echo.Context, params GetResourcesParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAuthInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetAuthInfo(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAuthInfo(ctx)
	return err
}

// PostAuthRefresh converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthRefresh(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthRefreshParams
	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", ctx.QueryParams(), &params.Role)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role: %s", err))
	}

	// ------------- Optional query parameter "access_duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "access_duration", ctx.QueryParams(), &params.AccessDuration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter access_duration: %s", err))
	}

	// ------------- Optional query parameter "scope" -------------

	err = runtime.BindQueryParameter("form", true, false, "scope", ctx.QueryParams(), &params.Scope)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scope: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAuthRefresh(ctx, params)
	return err
}

// PostAuthToken converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthToken(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthTokenParams
	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", ctx.QueryParams(), &params.Role)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role: %s", err))
	}

	// ------------- Optional query parameter "access_duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "access_duration", ctx.QueryParams(), &params.AccessDuration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter access_duration: %s", err))
	}

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject", ctx.QueryParams(), &params.Subject)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subject: %s", err))
	}

	// ------------- Optional query parameter "scope" -------------

	err = runtime.BindQueryParameter("form", true, false, "scope", ctx.QueryParams(), &params.Scope)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scope: %s", err))
	}

	// ------------- Optional query parameter "refresh" -------------

	err = runtime.BindQueryParameter("form", true, false, "refresh", ctx.QueryParams(), &params.Refresh)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter refresh: %s", err))
	}

	// ------------- Optional query parameter "refresh_duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "refresh_duration", ctx.QueryParams(), &params.RefreshDuration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter refresh_duration: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAuthToken(ctx, params)
	return err
}

// GetAuthWhoAmI converts echo context to params.
func (w *ServerInterfaceWrapper) GetAuthWhoAmI(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAuthWhoAmI(ctx)
	return err
}

// PostClusterActionAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostClusterActionAbort(ctx)
	return err
}

// PostClusterActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionFreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostClusterActionFreeze(ctx)
	return err
}

// PostClusterActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionUnfreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostClusterActionUnfreeze(ctx)
	return err
}

// GetClusterConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetClusterConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetClusterConfigParams
	// ------------- Optional query parameter "evaluate" -------------

	err = runtime.BindQueryParameter("form", true, false, "evaluate", ctx.QueryParams(), &params.Evaluate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter evaluate: %s", err))
	}

	// ------------- Optional query parameter "impersonate" -------------

	err = runtime.BindQueryParameter("form", true, false, "impersonate", ctx.QueryParams(), &params.Impersonate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter impersonate: %s", err))
	}

	// ------------- Optional query parameter "kw" -------------

	err = runtime.BindQueryParameter("form", true, false, "kw", ctx.QueryParams(), &params.Kw)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kw: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetClusterConfig(ctx, params)
	return err
}

// PatchClusterConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PatchClusterConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchClusterConfigParams
	// ------------- Optional query parameter "delete" -------------

	err = runtime.BindQueryParameter("form", true, false, "delete", ctx.QueryParams(), &params.Delete)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter delete: %s", err))
	}

	// ------------- Optional query parameter "unset" -------------

	err = runtime.BindQueryParameter("form", true, false, "unset", ctx.QueryParams(), &params.Unset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unset: %s", err))
	}

	// ------------- Optional query parameter "set" -------------

	err = runtime.BindQueryParameter("form", true, false, "set", ctx.QueryParams(), &params.Set)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter set: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchClusterConfig(ctx, params)
	return err
}

// GetClusterConfigFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetClusterConfigFile(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetClusterConfigFile(ctx)
	return err
}

// PutClusterConfigFile converts echo context to params.
func (w *ServerInterfaceWrapper) PutClusterConfigFile(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutClusterConfigFile(ctx)
	return err
}

// GetClusterConfigKeywords converts echo context to params.
func (w *ServerInterfaceWrapper) GetClusterConfigKeywords(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetClusterConfigKeywordsParams
	// ------------- Optional query parameter "driver" -------------

	err = runtime.BindQueryParameter("form", true, false, "driver", ctx.QueryParams(), &params.Driver)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter driver: %s", err))
	}

	// ------------- Optional query parameter "section" -------------

	err = runtime.BindQueryParameter("form", true, false, "section", ctx.QueryParams(), &params.Section)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter section: %s", err))
	}

	// ------------- Optional query parameter "option" -------------

	err = runtime.BindQueryParameter("form", true, false, "option", ctx.QueryParams(), &params.Option)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter option: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetClusterConfigKeywords(ctx, params)
	return err
}

// PostClusterHeartbeatRotate converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterHeartbeatRotate(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostClusterHeartbeatRotate(ctx)
	return err
}

// PostClusterJoin converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterJoin(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostClusterJoinParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostClusterJoin(ctx, params)
	return err
}

// PostClusterLeave converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterLeave(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostClusterLeaveParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostClusterLeave(ctx, params)
	return err
}

// GetClusterStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetClusterStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetClusterStatusParams
	// ------------- Optional query parameter "namespace" -------------

	err = runtime.BindQueryParameter("form", true, false, "namespace", ctx.QueryParams(), &params.Namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Optional query parameter "selector" -------------

	err = runtime.BindQueryParameter("form", true, false, "selector", ctx.QueryParams(), &params.Selector)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter selector: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetClusterStatus(ctx, params)
	return err
}

// GetInstances converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstances(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstancesParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetInstances(ctx, params)
	return err
}

// PostInstanceProgress converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceProgress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceProgress(ctx, namespace, kind, name)
	return err
}

// PostInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceStatus(ctx, namespace, kind, name)
	return err
}

// GetNetworks converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworks(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetworksParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNetworks(ctx, params)
	return err
}

// GetNetworkIP converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworkIP(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetworkIPParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNetworkIP(ctx, params)
	return err
}

// GetNodes converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodes(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodesParams
	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodes(ctx, params)
	return err
}

// GetNodesInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodesInfo(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodesInfo(ctx)
	return err
}

// PostPeerActionAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostPeerActionAbort(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostPeerActionAbort(ctx, nodename)
	return err
}

// PostNodeActionClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeActionClear(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostNodeActionClear(ctx, nodename)
	return err
}

// PostPeerActionDrain converts echo context to params.
func (w *ServerInterfaceWrapper) PostPeerActionDrain(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostPeerActionDrain(ctx, nodename)
	return err
}

// PostPeerActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostPeerActionFreeze(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostPeerActionFreezeParams
	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostPeerActionFreeze(ctx, nodename, params)
	return err
}

// PostNodeActionPushAsset converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeActionPushAsset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeActionPushAssetParams
	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostNodeActionPushAsset(ctx, nodename, params)
	return err
}

// PostNodeActionPushDisk converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeActionPushDisk(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeActionPushDiskParams
	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostNodeActionPushDisk(ctx, nodename, params)
	return err
}

// PostNodeActionPushPatch converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeActionPushPatch(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeActionPushPatchParams
	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostNodeActionPushPatch(ctx, nodename, params)
	return err
}

// PostNodeActionPushPkg converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeActionPushPkg(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeActionPushPkgParams
	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostNodeActionPushPkg(ctx, nodename, params)
	return err
}

// PostNodeActionScanCapabilities converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeActionScanCapabilities(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeActionScanCapabilitiesParams
	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostNodeActionScanCapabilities(ctx, nodename, params)
	return err
}

// PostNodeActionSysreport converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeActionSysreport(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeActionSysreportParams
	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", ctx.QueryParams(), &params.Force)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter force: %s", err))
	}

	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostNodeActionSysreport(ctx, nodename, params)
	return err
}

// PostPeerActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostPeerActionUnfreeze(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostPeerActionUnfreezeParams
	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostPeerActionUnfreeze(ctx, nodename, params)
	return err
}

// GetNodeCapabilities converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeCapabilities(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeCapabilities(ctx, nodename)
	return err
}

// GetNodeConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeConfigParams
	// ------------- Optional query parameter "kw" -------------

	err = runtime.BindQueryParameter("form", true, false, "kw", ctx.QueryParams(), &params.Kw)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kw: %s", err))
	}

	// ------------- Optional query parameter "evaluate" -------------

	err = runtime.BindQueryParameter("form", true, false, "evaluate", ctx.QueryParams(), &params.Evaluate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter evaluate: %s", err))
	}

	// ------------- Optional query parameter "impersonate" -------------

	err = runtime.BindQueryParameter("form", true, false, "impersonate", ctx.QueryParams(), &params.Impersonate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter impersonate: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeConfig(ctx, nodename, params)
	return err
}

// PatchNodeConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PatchNodeConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchNodeConfigParams
	// ------------- Optional query parameter "delete" -------------

	err = runtime.BindQueryParameter("form", true, false, "delete", ctx.QueryParams(), &params.Delete)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter delete: %s", err))
	}

	// ------------- Optional query parameter "unset" -------------

	err = runtime.BindQueryParameter("form", true, false, "unset", ctx.QueryParams(), &params.Unset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unset: %s", err))
	}

	// ------------- Optional query parameter "set" -------------

	err = runtime.BindQueryParameter("form", true, false, "set", ctx.QueryParams(), &params.Set)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter set: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchNodeConfig(ctx, nodename, params)
	return err
}

// GetNodeConfigFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeConfigFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeConfigFile(ctx, nodename)
	return err
}

// PutNodeConfigFile converts echo context to params.
func (w *ServerInterfaceWrapper) PutNodeConfigFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutNodeConfigFile(ctx, nodename)
	return err
}

// GetNodeConfigKeywords converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeConfigKeywords(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeConfigKeywordsParams
	// ------------- Optional query parameter "driver" -------------

	err = runtime.BindQueryParameter("form", true, false, "driver", ctx.QueryParams(), &params.Driver)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter driver: %s", err))
	}

	// ------------- Optional query parameter "section" -------------

	err = runtime.BindQueryParameter("form", true, false, "section", ctx.QueryParams(), &params.Section)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter section: %s", err))
	}

	// ------------- Optional query parameter "option" -------------

	err = runtime.BindQueryParameter("form", true, false, "option", ctx.QueryParams(), &params.Option)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter option: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeConfigKeywords(ctx, nodename, params)
	return err
}

// PostDaemonRestart converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonRestart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostDaemonRestart(ctx, nodename)
	return err
}

// PostDaemonShutdown converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonShutdown(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonShutdownParams
	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostDaemonShutdown(ctx, nodename, params)
	return err
}

// PostDaemonStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonStop(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostDaemonStop(ctx, nodename)
	return err
}

// GetDaemonDNSDump converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonDNSDump(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDaemonDNSDump(ctx, nodename)
	return err
}

// GetDaemonEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonEvents(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonEventsParams
	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "cache" -------------

	err = runtime.BindQueryParameter("form", true, false, "cache", ctx.QueryParams(), &params.Cache)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cache: %s", err))
	}

	// ------------- Optional query parameter "selector" -------------

	err = runtime.BindQueryParameter("form", true, false, "selector", ctx.QueryParams(), &params.Selector)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter selector: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDaemonEvents(ctx, nodename, params)
	return err
}

// PostDaemonHeartbeatRestart converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonHeartbeatRestart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathHeartbeatName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostDaemonHeartbeatRestart(ctx, nodename, name)
	return err
}

// PostDaemonHeartbeatSign converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonHeartbeatSign(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathHeartbeatName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostDaemonHeartbeatSign(ctx, nodename, name)
	return err
}

// PostDaemonHeartbeatStart converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonHeartbeatStart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathHeartbeatName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostDaemonHeartbeatStart(ctx, nodename, name)
	return err
}

// PostDaemonHeartbeatStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonHeartbeatStop(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathHeartbeatName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostDaemonHeartbeatStop(ctx, nodename, name)
	return err
}

// PostDaemonHeartbeatWipe converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonHeartbeatWipe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathHeartbeatName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostDaemonHeartbeatWipe(ctx, nodename, name)
	return err
}

// PostDaemonListenerRestart converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonListenerRestart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathListenerName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostDaemonListenerRestart(ctx, nodename, name)
	return err
}

// PostDaemonListenerStart converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonListenerStart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathListenerName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostDaemonListenerStart(ctx, nodename, name)
	return err
}

// PostDaemonListenerStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonListenerStop(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathListenerName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostDaemonListenerStop(ctx, nodename, name)
	return err
}

// PostDaemonListenerLogControl converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonListenerLogControl(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathListenerName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostDaemonListenerLogControl(ctx, nodename, name)
	return err
}

// PostDaemonLogControl converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLogControl(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostDaemonLogControl(ctx, nodename)
	return err
}

// GetNodeDRBDAllocation converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDAllocation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeDRBDAllocation(ctx, nodename)
	return err
}

// GetNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeDRBDConfig(ctx, nodename, params)
	return err
}

// PostNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeDRBDConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostNodeDRBDConfig(ctx, nodename, params)
	return err
}

// PostNodeDRBDConnect converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeDRBDConnect(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeDRBDConnectParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "node_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "node_id", ctx.QueryParams(), &params.NodeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostNodeDRBDConnect(ctx, nodename, params)
	return err
}

// PostNodeDRBDPrimary converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeDRBDPrimary(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeDRBDPrimaryParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostNodeDRBDPrimary(ctx, nodename, params)
	return err
}

// PostNodeDRBDSecondary converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeDRBDSecondary(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeDRBDSecondaryParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostNodeDRBDSecondary(ctx, nodename, params)
	return err
}

// GetNodeDriver converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDriver(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeDriver(ctx, nodename)
	return err
}

// GetInstance converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetInstance(ctx, nodename, namespace, kind, name)
	return err
}

// PostInstanceActionBoot converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceActionBoot(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostInstanceActionBootParams
	// ------------- Optional query parameter "slaves" -------------

	err = runtime.BindQueryParameter("form", true, false, "slaves", ctx.QueryParams(), &params.Slaves)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slaves: %s", err))
	}

	// ------------- Optional query parameter "master" -------------

	err = runtime.BindQueryParameter("form", true, false, "master", ctx.QueryParams(), &params.Master)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter master: %s", err))
	}

	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// ------------- Optional query parameter "rid" -------------

	err = runtime.BindQueryParameter("form", true, false, "rid", ctx.QueryParams(), &params.Rid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rid: %s", err))
	}

	// ------------- Optional query parameter "slave" -------------

	err = runtime.BindQueryParameter("form", true, false, "slave", ctx.QueryParams(), &params.Slave)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slave: %s", err))
	}

	// ------------- Optional query parameter "subset" -------------

	err = runtime.BindQueryParameter("form", true, false, "subset", ctx.QueryParams(), &params.Subset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subset: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceActionBoot(ctx, nodename, namespace, kind, name, params)
	return err
}

// PostInstanceActionDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceActionDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostInstanceActionDeleteParams
	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceActionDelete(ctx, nodename, namespace, kind, name, params)
	return err
}

// PostInstanceActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceActionFreeze(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostInstanceActionFreezeParams
	// ------------- Optional query parameter "slaves" -------------

	err = runtime.BindQueryParameter("form", true, false, "slaves", ctx.QueryParams(), &params.Slaves)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slaves: %s", err))
	}

	// ------------- Optional query parameter "master" -------------

	err = runtime.BindQueryParameter("form", true, false, "master", ctx.QueryParams(), &params.Master)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter master: %s", err))
	}

	// ------------- Optional query parameter "slave" -------------

	err = runtime.BindQueryParameter("form", true, false, "slave", ctx.QueryParams(), &params.Slave)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slave: %s", err))
	}

	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceActionFreeze(ctx, nodename, namespace, kind, name, params)
	return err
}

// PostInstanceActionProvision converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceActionProvision(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostInstanceActionProvisionParams
	// ------------- Optional query parameter "slaves" -------------

	err = runtime.BindQueryParameter("form", true, false, "slaves", ctx.QueryParams(), &params.Slaves)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slaves: %s", err))
	}

	// ------------- Optional query parameter "disable_rollback" -------------

	err = runtime.BindQueryParameter("form", true, false, "disable_rollback", ctx.QueryParams(), &params.DisableRollback)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter disable_rollback: %s", err))
	}

	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", ctx.QueryParams(), &params.Force)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter force: %s", err))
	}

	// ------------- Optional query parameter "leader" -------------

	err = runtime.BindQueryParameter("form", true, false, "leader", ctx.QueryParams(), &params.Leader)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter leader: %s", err))
	}

	// ------------- Optional query parameter "master" -------------

	err = runtime.BindQueryParameter("form", true, false, "master", ctx.QueryParams(), &params.Master)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter master: %s", err))
	}

	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// ------------- Optional query parameter "rid" -------------

	err = runtime.BindQueryParameter("form", true, false, "rid", ctx.QueryParams(), &params.Rid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rid: %s", err))
	}

	// ------------- Optional query parameter "slave" -------------

	err = runtime.BindQueryParameter("form", true, false, "slave", ctx.QueryParams(), &params.Slave)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slave: %s", err))
	}

	// ------------- Optional query parameter "state_only" -------------

	err = runtime.BindQueryParameter("form", true, false, "state_only", ctx.QueryParams(), &params.StateOnly)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state_only: %s", err))
	}

	// ------------- Optional query parameter "subset" -------------

	err = runtime.BindQueryParameter("form", true, false, "subset", ctx.QueryParams(), &params.Subset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subset: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceActionProvision(ctx, nodename, namespace, kind, name, params)
	return err
}

// PostInstanceActionPRStart converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceActionPRStart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostInstanceActionPRStartParams
	// ------------- Optional query parameter "slaves" -------------

	err = runtime.BindQueryParameter("form", true, false, "slaves", ctx.QueryParams(), &params.Slaves)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slaves: %s", err))
	}

	// ------------- Optional query parameter "disable_rollback" -------------

	err = runtime.BindQueryParameter("form", true, false, "disable_rollback", ctx.QueryParams(), &params.DisableRollback)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter disable_rollback: %s", err))
	}

	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", ctx.QueryParams(), &params.Force)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter force: %s", err))
	}

	// ------------- Optional query parameter "master" -------------

	err = runtime.BindQueryParameter("form", true, false, "master", ctx.QueryParams(), &params.Master)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter master: %s", err))
	}

	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// ------------- Optional query parameter "rid" -------------

	err = runtime.BindQueryParameter("form", true, false, "rid", ctx.QueryParams(), &params.Rid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rid: %s", err))
	}

	// ------------- Optional query parameter "slave" -------------

	err = runtime.BindQueryParameter("form", true, false, "slave", ctx.QueryParams(), &params.Slave)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slave: %s", err))
	}

	// ------------- Optional query parameter "subset" -------------

	err = runtime.BindQueryParameter("form", true, false, "subset", ctx.QueryParams(), &params.Subset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subset: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceActionPRStart(ctx, nodename, namespace, kind, name, params)
	return err
}

// PostInstanceActionPRStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceActionPRStop(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostInstanceActionPRStopParams
	// ------------- Optional query parameter "slaves" -------------

	err = runtime.BindQueryParameter("form", true, false, "slaves", ctx.QueryParams(), &params.Slaves)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slaves: %s", err))
	}

	// ------------- Optional query parameter "disable_rollback" -------------

	err = runtime.BindQueryParameter("form", true, false, "disable_rollback", ctx.QueryParams(), &params.DisableRollback)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter disable_rollback: %s", err))
	}

	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", ctx.QueryParams(), &params.Force)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter force: %s", err))
	}

	// ------------- Optional query parameter "master" -------------

	err = runtime.BindQueryParameter("form", true, false, "master", ctx.QueryParams(), &params.Master)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter master: %s", err))
	}

	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// ------------- Optional query parameter "rid" -------------

	err = runtime.BindQueryParameter("form", true, false, "rid", ctx.QueryParams(), &params.Rid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rid: %s", err))
	}

	// ------------- Optional query parameter "slave" -------------

	err = runtime.BindQueryParameter("form", true, false, "slave", ctx.QueryParams(), &params.Slave)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slave: %s", err))
	}

	// ------------- Optional query parameter "subset" -------------

	err = runtime.BindQueryParameter("form", true, false, "subset", ctx.QueryParams(), &params.Subset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subset: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceActionPRStop(ctx, nodename, namespace, kind, name, params)
	return err
}

// PostInstanceActionPushResourceInfo converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceActionPushResourceInfo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostInstanceActionPushResourceInfoParams
	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceActionPushResourceInfo(ctx, nodename, namespace, kind, name, params)
	return err
}

// PostInstanceActionRestart converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceActionRestart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostInstanceActionRestartParams
	// ------------- Optional query parameter "slaves" -------------

	err = runtime.BindQueryParameter("form", true, false, "slaves", ctx.QueryParams(), &params.Slaves)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slaves: %s", err))
	}

	// ------------- Optional query parameter "disable_rollback" -------------

	err = runtime.BindQueryParameter("form", true, false, "disable_rollback", ctx.QueryParams(), &params.DisableRollback)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter disable_rollback: %s", err))
	}

	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", ctx.QueryParams(), &params.Force)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter force: %s", err))
	}

	// ------------- Optional query parameter "master" -------------

	err = runtime.BindQueryParameter("form", true, false, "master", ctx.QueryParams(), &params.Master)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter master: %s", err))
	}

	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// ------------- Optional query parameter "rid" -------------

	err = runtime.BindQueryParameter("form", true, false, "rid", ctx.QueryParams(), &params.Rid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rid: %s", err))
	}

	// ------------- Optional query parameter "slave" -------------

	err = runtime.BindQueryParameter("form", true, false, "slave", ctx.QueryParams(), &params.Slave)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slave: %s", err))
	}

	// ------------- Optional query parameter "subset" -------------

	err = runtime.BindQueryParameter("form", true, false, "subset", ctx.QueryParams(), &params.Subset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subset: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceActionRestart(ctx, nodename, namespace, kind, name, params)
	return err
}

// PostInstanceActionRun converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceActionRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostInstanceActionRunParams
	// ------------- Optional query parameter "slaves" -------------

	err = runtime.BindQueryParameter("form", true, false, "slaves", ctx.QueryParams(), &params.Slaves)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slaves: %s", err))
	}

	// ------------- Optional query parameter "confirm" -------------

	err = runtime.BindQueryParameter("form", true, false, "confirm", ctx.QueryParams(), &params.Confirm)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter confirm: %s", err))
	}

	// ------------- Optional query parameter "cron" -------------

	err = runtime.BindQueryParameter("form", true, false, "cron", ctx.QueryParams(), &params.Cron)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cron: %s", err))
	}

	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", ctx.QueryParams(), &params.Force)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter force: %s", err))
	}

	// ------------- Optional query parameter "master" -------------

	err = runtime.BindQueryParameter("form", true, false, "master", ctx.QueryParams(), &params.Master)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter master: %s", err))
	}

	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// ------------- Optional query parameter "rid" -------------

	err = runtime.BindQueryParameter("form", true, false, "rid", ctx.QueryParams(), &params.Rid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rid: %s", err))
	}

	// ------------- Optional query parameter "slave" -------------

	err = runtime.BindQueryParameter("form", true, false, "slave", ctx.QueryParams(), &params.Slave)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slave: %s", err))
	}

	// ------------- Optional query parameter "subset" -------------

	err = runtime.BindQueryParameter("form", true, false, "subset", ctx.QueryParams(), &params.Subset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subset: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// ------------- Optional query parameter "env" -------------

	err = runtime.BindQueryParameter("form", true, false, "env", ctx.QueryParams(), &params.Env)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter env: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceActionRun(ctx, nodename, namespace, kind, name, params)
	return err
}

// PostInstanceActionShutdown converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceActionShutdown(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostInstanceActionShutdownParams
	// ------------- Optional query parameter "slaves" -------------

	err = runtime.BindQueryParameter("form", true, false, "slaves", ctx.QueryParams(), &params.Slaves)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slaves: %s", err))
	}

	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", ctx.QueryParams(), &params.Force)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter force: %s", err))
	}

	// ------------- Optional query parameter "master" -------------

	err = runtime.BindQueryParameter("form", true, false, "master", ctx.QueryParams(), &params.Master)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter master: %s", err))
	}

	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// ------------- Optional query parameter "rid" -------------

	err = runtime.BindQueryParameter("form", true, false, "rid", ctx.QueryParams(), &params.Rid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rid: %s", err))
	}

	// ------------- Optional query parameter "slave" -------------

	err = runtime.BindQueryParameter("form", true, false, "slave", ctx.QueryParams(), &params.Slave)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slave: %s", err))
	}

	// ------------- Optional query parameter "subset" -------------

	err = runtime.BindQueryParameter("form", true, false, "subset", ctx.QueryParams(), &params.Subset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subset: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceActionShutdown(ctx, nodename, namespace, kind, name, params)
	return err
}

// PostInstanceActionStart converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceActionStart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostInstanceActionStartParams
	// ------------- Optional query parameter "slaves" -------------

	err = runtime.BindQueryParameter("form", true, false, "slaves", ctx.QueryParams(), &params.Slaves)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slaves: %s", err))
	}

	// ------------- Optional query parameter "disable_rollback" -------------

	err = runtime.BindQueryParameter("form", true, false, "disable_rollback", ctx.QueryParams(), &params.DisableRollback)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter disable_rollback: %s", err))
	}

	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", ctx.QueryParams(), &params.Force)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter force: %s", err))
	}

	// ------------- Optional query parameter "master" -------------

	err = runtime.BindQueryParameter("form", true, false, "master", ctx.QueryParams(), &params.Master)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter master: %s", err))
	}

	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// ------------- Optional query parameter "rid" -------------

	err = runtime.BindQueryParameter("form", true, false, "rid", ctx.QueryParams(), &params.Rid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rid: %s", err))
	}

	// ------------- Optional query parameter "slave" -------------

	err = runtime.BindQueryParameter("form", true, false, "slave", ctx.QueryParams(), &params.Slave)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slave: %s", err))
	}

	// ------------- Optional query parameter "subset" -------------

	err = runtime.BindQueryParameter("form", true, false, "subset", ctx.QueryParams(), &params.Subset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subset: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceActionStart(ctx, nodename, namespace, kind, name, params)
	return err
}

// PostInstanceActionStartStandby converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceActionStartStandby(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostInstanceActionStartStandbyParams
	// ------------- Optional query parameter "slaves" -------------

	err = runtime.BindQueryParameter("form", true, false, "slaves", ctx.QueryParams(), &params.Slaves)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slaves: %s", err))
	}

	// ------------- Optional query parameter "disable_rollback" -------------

	err = runtime.BindQueryParameter("form", true, false, "disable_rollback", ctx.QueryParams(), &params.DisableRollback)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter disable_rollback: %s", err))
	}

	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", ctx.QueryParams(), &params.Force)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter force: %s", err))
	}

	// ------------- Optional query parameter "master" -------------

	err = runtime.BindQueryParameter("form", true, false, "master", ctx.QueryParams(), &params.Master)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter master: %s", err))
	}

	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// ------------- Optional query parameter "rid" -------------

	err = runtime.BindQueryParameter("form", true, false, "rid", ctx.QueryParams(), &params.Rid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rid: %s", err))
	}

	// ------------- Optional query parameter "slave" -------------

	err = runtime.BindQueryParameter("form", true, false, "slave", ctx.QueryParams(), &params.Slave)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slave: %s", err))
	}

	// ------------- Optional query parameter "subset" -------------

	err = runtime.BindQueryParameter("form", true, false, "subset", ctx.QueryParams(), &params.Subset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subset: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceActionStartStandby(ctx, nodename, namespace, kind, name, params)
	return err
}

// PostInstanceActionStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceActionStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostInstanceActionStatusParams
	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceActionStatus(ctx, nodename, namespace, kind, name, params)
	return err
}

// PostInstanceActionStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceActionStop(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostInstanceActionStopParams
	// ------------- Optional query parameter "slaves" -------------

	err = runtime.BindQueryParameter("form", true, false, "slaves", ctx.QueryParams(), &params.Slaves)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slaves: %s", err))
	}

	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", ctx.QueryParams(), &params.Force)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter force: %s", err))
	}

	// ------------- Optional query parameter "master" -------------

	err = runtime.BindQueryParameter("form", true, false, "master", ctx.QueryParams(), &params.Master)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter master: %s", err))
	}

	// ------------- Optional query parameter "move-to" -------------

	err = runtime.BindQueryParameter("form", true, false, "move-to", ctx.QueryParams(), &params.MoveTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter move-to: %s", err))
	}

	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// ------------- Optional query parameter "rid" -------------

	err = runtime.BindQueryParameter("form", true, false, "rid", ctx.QueryParams(), &params.Rid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rid: %s", err))
	}

	// ------------- Optional query parameter "slave" -------------

	err = runtime.BindQueryParameter("form", true, false, "slave", ctx.QueryParams(), &params.Slave)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slave: %s", err))
	}

	// ------------- Optional query parameter "subset" -------------

	err = runtime.BindQueryParameter("form", true, false, "subset", ctx.QueryParams(), &params.Subset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subset: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceActionStop(ctx, nodename, namespace, kind, name, params)
	return err
}

// PostInstanceActionSyncIngest converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceActionSyncIngest(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostInstanceActionSyncIngestParams
	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// ------------- Optional query parameter "rid" -------------

	err = runtime.BindQueryParameter("form", true, false, "rid", ctx.QueryParams(), &params.Rid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rid: %s", err))
	}

	// ------------- Optional query parameter "subset" -------------

	err = runtime.BindQueryParameter("form", true, false, "subset", ctx.QueryParams(), &params.Subset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subset: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceActionSyncIngest(ctx, nodename, namespace, kind, name, params)
	return err
}

// PostInstanceActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceActionUnfreeze(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostInstanceActionUnfreezeParams
	// ------------- Optional query parameter "slaves" -------------

	err = runtime.BindQueryParameter("form", true, false, "slaves", ctx.QueryParams(), &params.Slaves)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slaves: %s", err))
	}

	// ------------- Optional query parameter "master" -------------

	err = runtime.BindQueryParameter("form", true, false, "master", ctx.QueryParams(), &params.Master)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter master: %s", err))
	}

	// ------------- Optional query parameter "slave" -------------

	err = runtime.BindQueryParameter("form", true, false, "slave", ctx.QueryParams(), &params.Slave)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slave: %s", err))
	}

	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceActionUnfreeze(ctx, nodename, namespace, kind, name, params)
	return err
}

// PostInstanceActionUnprovision converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceActionUnprovision(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostInstanceActionUnprovisionParams
	// ------------- Optional query parameter "slaves" -------------

	err = runtime.BindQueryParameter("form", true, false, "slaves", ctx.QueryParams(), &params.Slaves)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slaves: %s", err))
	}

	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", ctx.QueryParams(), &params.Force)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter force: %s", err))
	}

	// ------------- Optional query parameter "leader" -------------

	err = runtime.BindQueryParameter("form", true, false, "leader", ctx.QueryParams(), &params.Leader)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter leader: %s", err))
	}

	// ------------- Optional query parameter "master" -------------

	err = runtime.BindQueryParameter("form", true, false, "master", ctx.QueryParams(), &params.Master)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter master: %s", err))
	}

	// ------------- Optional query parameter "requester_sid" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester_sid", ctx.QueryParams(), &params.RequesterSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester_sid: %s", err))
	}

	// ------------- Optional query parameter "rid" -------------

	err = runtime.BindQueryParameter("form", true, false, "rid", ctx.QueryParams(), &params.Rid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rid: %s", err))
	}

	// ------------- Optional query parameter "state_only" -------------

	err = runtime.BindQueryParameter("form", true, false, "state_only", ctx.QueryParams(), &params.StateOnly)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state_only: %s", err))
	}

	// ------------- Optional query parameter "slave" -------------

	err = runtime.BindQueryParameter("form", true, false, "slave", ctx.QueryParams(), &params.Slave)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slave: %s", err))
	}

	// ------------- Optional query parameter "subset" -------------

	err = runtime.BindQueryParameter("form", true, false, "subset", ctx.QueryParams(), &params.Subset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subset: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceActionUnprovision(ctx, nodename, namespace, kind, name, params)
	return err
}

// PostInstanceClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceClear(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceClear(ctx, nodename, namespace, kind, name)
	return err
}

// GetInstanceConfigFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceConfigFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetInstanceConfigFile(ctx, nodename, namespace, kind, name)
	return err
}

// PostInstanceResourceConsole converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceResourceConsole(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostInstanceResourceConsoleParams
	// ------------- Optional query parameter "rid" -------------

	err = runtime.BindQueryParameter("form", true, false, "rid", ctx.QueryParams(), &params.Rid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rid: %s", err))
	}

	// ------------- Optional query parameter "greet_timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "greet_timeout", ctx.QueryParams(), &params.GreetTimeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter greet_timeout: %s", err))
	}

	// ------------- Optional query parameter "seats" -------------

	err = runtime.BindQueryParameter("form", true, false, "seats", ctx.QueryParams(), &params.Seats)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter seats: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceResourceConsole(ctx, nodename, namespace, kind, name, params)
	return err
}

// GetInstanceLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "follow" -------------

	err = runtime.BindQueryParameter("form", true, false, "follow", ctx.QueryParams(), &params.Follow)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter follow: %s", err))
	}

	// ------------- Optional query parameter "lines" -------------

	err = runtime.BindQueryParameter("form", true, false, "lines", ctx.QueryParams(), &params.Lines)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lines: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetInstanceLogs(ctx, nodename, namespace, kind, name, params)
	return err
}

// GetInstanceResourceInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceResourceInfo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetInstanceResourceInfo(ctx, nodename, namespace, kind, name)
	return err
}

// GetInstanceSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetInstanceSchedule(ctx, nodename, namespace, kind, name)
	return err
}

// PostInstanceStateFile converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceStateFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstanceStateFile(ctx, nodename, namespace, kind, name)
	return err
}

// GetNodeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "follow" -------------

	err = runtime.BindQueryParameter("form", true, false, "follow", ctx.QueryParams(), &params.Follow)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter follow: %s", err))
	}

	// ------------- Optional query parameter "lines" -------------

	err = runtime.BindQueryParameter("form", true, false, "lines", ctx.QueryParams(), &params.Lines)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lines: %s", err))
	}

	// ------------- Optional query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, false, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeLogs(ctx, nodename, params)
	return err
}

// GetNodePing converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodePing(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodePing(ctx, nodename)
	return err
}

// GetNodeSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeSchedule(ctx, nodename)
	return err
}

// GetNodeSSHHostkeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeSSHHostkeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeSSHHostkeys(ctx, nodename)
	return err
}

// GetNodeSSHKey converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeSSHKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeSSHKey(ctx, nodename)
	return err
}

// PutNodeSSHTrust converts echo context to params.
func (w *ServerInterfaceWrapper) PutNodeSSHTrust(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutNodeSSHTrust(ctx, nodename)
	return err
}

// GetNodeSystemDisk converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeSystemDisk(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeSystemDisk(ctx, nodename)
	return err
}

// GetNodeSystemGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeSystemGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeSystemGroup(ctx, nodename)
	return err
}

// GetNodeSystemHardware converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeSystemHardware(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeSystemHardware(ctx, nodename)
	return err
}

// GetNodeSystemIPAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeSystemIPAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeSystemIPAddress(ctx, nodename)
	return err
}

// GetNodeSystemPackage converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeSystemPackage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeSystemPackage(ctx, nodename)
	return err
}

// GetNodeSystemPatch converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeSystemPatch(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeSystemPatch(ctx, nodename)
	return err
}

// GetNodeSystemProperty converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeSystemProperty(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeSystemProperty(ctx, nodename)
	return err
}

// GetNodeSystemSANInitiator converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeSystemSANInitiator(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeSystemSANInitiator(ctx, nodename)
	return err
}

// GetNodeSystemSANPath converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeSystemSANPath(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeSystemSANPath(ctx, nodename)
	return err
}

// GetNodeSystemUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeSystemUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithOptions("simple", "nodename", ctx.Param("nodename"), &nodename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeSystemUser(ctx, nodename)
	return err
}

// GetObjects converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjects(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectsParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetObjects(ctx, params)
	return err
}

// GetObjectPaths converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectPaths(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectPathsParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetObjectPaths(ctx, params)
	return err
}

// PostSvcDisable converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcDisable(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostSvcDisableParams
	// ------------- Optional query parameter "rid" -------------

	err = runtime.BindQueryParameter("form", true, false, "rid", ctx.QueryParams(), &params.Rid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rid: %s", err))
	}

	// ------------- Optional query parameter "subset" -------------

	err = runtime.BindQueryParameter("form", true, false, "subset", ctx.QueryParams(), &params.Subset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subset: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSvcDisable(ctx, namespace, name, params)
	return err
}

// PostSvcEnable converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcEnable(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostSvcEnableParams
	// ------------- Optional query parameter "rid" -------------

	err = runtime.BindQueryParameter("form", true, false, "rid", ctx.QueryParams(), &params.Rid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rid: %s", err))
	}

	// ------------- Optional query parameter "subset" -------------

	err = runtime.BindQueryParameter("form", true, false, "subset", ctx.QueryParams(), &params.Subset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subset: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSvcEnable(ctx, namespace, name, params)
	return err
}

// GetObject converts echo context to params.
func (w *ServerInterfaceWrapper) GetObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetObject(ctx, namespace, kind, name)
	return err
}

// PostObjectActionAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionAbort(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostObjectActionAbort(ctx, namespace, kind, name)
	return err
}

// PostObjectActionDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostObjectActionDelete(ctx, namespace, kind, name)
	return err
}

// PostObjectActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionFreeze(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostObjectActionFreeze(ctx, namespace, kind, name)
	return err
}

// PostObjectActionGiveback converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionGiveback(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostObjectActionGiveback(ctx, namespace, kind, name)
	return err
}

// PostObjectActionProvision converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionProvision(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostObjectActionProvision(ctx, namespace, kind, name)
	return err
}

// PostObjectActionPurge converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionPurge(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostObjectActionPurge(ctx, namespace, kind, name)
	return err
}

// PostObjectActionRestart converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionRestart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostObjectActionRestart(ctx, namespace, kind, name)
	return err
}

// PostObjectActionStart converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionStart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostObjectActionStart(ctx, namespace, kind, name)
	return err
}

// PostObjectActionStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionStop(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostObjectActionStop(ctx, namespace, kind, name)
	return err
}

// PostObjectActionSwitch converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionSwitch(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostObjectActionSwitch(ctx, namespace, kind, name)
	return err
}

// PostObjectActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionUnfreeze(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostObjectActionUnfreeze(ctx, namespace, kind, name)
	return err
}

// PostObjectActionUnprovision converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionUnprovision(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostObjectActionUnprovision(ctx, namespace, kind, name)
	return err
}

// GetObjectConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectConfigParams
	// ------------- Optional query parameter "evaluate" -------------

	err = runtime.BindQueryParameter("form", true, false, "evaluate", ctx.QueryParams(), &params.Evaluate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter evaluate: %s", err))
	}

	// ------------- Optional query parameter "impersonate" -------------

	err = runtime.BindQueryParameter("form", true, false, "impersonate", ctx.QueryParams(), &params.Impersonate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter impersonate: %s", err))
	}

	// ------------- Optional query parameter "kw" -------------

	err = runtime.BindQueryParameter("form", true, false, "kw", ctx.QueryParams(), &params.Kw)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kw: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetObjectConfig(ctx, namespace, kind, name, params)
	return err
}

// PatchObjectConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PatchObjectConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchObjectConfigParams
	// ------------- Optional query parameter "delete" -------------

	err = runtime.BindQueryParameter("form", true, false, "delete", ctx.QueryParams(), &params.Delete)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter delete: %s", err))
	}

	// ------------- Optional query parameter "unset" -------------

	err = runtime.BindQueryParameter("form", true, false, "unset", ctx.QueryParams(), &params.Unset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unset: %s", err))
	}

	// ------------- Optional query parameter "set" -------------

	err = runtime.BindQueryParameter("form", true, false, "set", ctx.QueryParams(), &params.Set)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter set: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchObjectConfig(ctx, namespace, kind, name, params)
	return err
}

// GetObjectConfigFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectConfigFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetObjectConfigFile(ctx, namespace, kind, name)
	return err
}

// PostObjectConfigFile converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectConfigFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostObjectConfigFile(ctx, namespace, kind, name)
	return err
}

// PutObjectConfigFile converts echo context to params.
func (w *ServerInterfaceWrapper) PutObjectConfigFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutObjectConfigFile(ctx, namespace, kind, name)
	return err
}

// GetObjectConfigKeywords converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectConfigKeywords(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectConfigKeywordsParams
	// ------------- Optional query parameter "driver" -------------

	err = runtime.BindQueryParameter("form", true, false, "driver", ctx.QueryParams(), &params.Driver)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter driver: %s", err))
	}

	// ------------- Optional query parameter "section" -------------

	err = runtime.BindQueryParameter("form", true, false, "section", ctx.QueryParams(), &params.Section)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter section: %s", err))
	}

	// ------------- Optional query parameter "option" -------------

	err = runtime.BindQueryParameter("form", true, false, "option", ctx.QueryParams(), &params.Option)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter option: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetObjectConfigKeywords(ctx, namespace, kind, name, params)
	return err
}

// GetObjectData converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectDataParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Names)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetObjectData(ctx, namespace, kind, name, params)
	return err
}

// PatchObjectData converts echo context to params.
func (w *ServerInterfaceWrapper) PatchObjectData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchObjectData(ctx, namespace, kind, name)
	return err
}

// DeleteObjectDataKey converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteObjectDataKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteObjectDataKeyParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteObjectDataKey(ctx, namespace, kind, name, params)
	return err
}

// GetObjectDataKey converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectDataKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectDataKeyParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetObjectDataKey(ctx, namespace, kind, name, params)
	return err
}

// PostObjectDataKey converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectDataKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostObjectDataKeyParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostObjectDataKey(ctx, namespace, kind, name, params)
	return err
}

// PutObjectDataKey converts echo context to params.
func (w *ServerInterfaceWrapper) PutObjectDataKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PutObjectDataKeyParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutObjectDataKey(ctx, namespace, kind, name, params)
	return err
}

// GetObjectDataKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectDataKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetObjectDataKeys(ctx, namespace, kind, name)
	return err
}

// GetObjectResourceInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectResourceInfo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetObjectResourceInfo(ctx, namespace, kind, name)
	return err
}

// GetObjectSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace InPathNamespace

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind InPathKind

	err = runtime.BindStyledParameterWithOptions("simple", "kind", ctx.Param("kind"), &kind, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name InPathName

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetObjectSchedule(ctx, namespace, kind, name)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPools(ctx, params)
	return err
}

// GetPoolVolumes converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolVolumes(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolVolumesParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPoolVolumes(ctx, params)
	return err
}

// GetRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelayMessageParams
	// ------------- Required query parameter "nodename" -------------

	err = runtime.BindQueryParameter("form", true, true, "nodename", ctx.QueryParams(), &params.Nodename)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Required query parameter "cluster_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "cluster_id", ctx.QueryParams(), &params.ClusterID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cluster_id: %s", err))
	}

	// ------------- Optional query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, false, "username", ctx.QueryParams(), &params.Username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRelayMessage(ctx, params)
	return err
}

// PostRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) PostRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostRelayMessage(ctx)
	return err
}

// GetRelayStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelayStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelayStatusParams
	// ------------- Optional query parameter "relay" -------------

	err = runtime.BindQueryParameter("form", true, false, "relay", ctx.QueryParams(), &params.Relays)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter relay: %s", err))
	}

	// ------------- Optional query parameter "remote" -------------

	err = runtime.BindQueryParameter("form", true, false, "remote", ctx.QueryParams(), &params.Remote)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter remote: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRelayStatus(ctx, params)
	return err
}

// GetResources converts echo context to params.
func (w *ServerInterfaceWrapper) GetResources(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetResourcesParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// ------------- Optional query parameter "resource" -------------

	err = runtime.BindQueryParameter("form", true, false, "resource", ctx.QueryParams(), &params.Resource)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetResources(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/auth/info", wrapper.GetAuthInfo)
	router.POST(baseURL+"/api/auth/refresh", wrapper.PostAuthRefresh)
	router.POST(baseURL+"/api/auth/token", wrapper.PostAuthToken)
	router.GET(baseURL+"/api/auth/whoami", wrapper.GetAuthWhoAmI)
	router.POST(baseURL+"/api/cluster/action/abort", wrapper.PostClusterActionAbort)
	router.POST(baseURL+"/api/cluster/action/freeze", wrapper.PostClusterActionFreeze)
	router.POST(baseURL+"/api/cluster/action/unfreeze", wrapper.PostClusterActionUnfreeze)
	router.GET(baseURL+"/api/cluster/config", wrapper.GetClusterConfig)
	router.PATCH(baseURL+"/api/cluster/config", wrapper.PatchClusterConfig)
	router.GET(baseURL+"/api/cluster/config/file", wrapper.GetClusterConfigFile)
	router.PUT(baseURL+"/api/cluster/config/file", wrapper.PutClusterConfigFile)
	router.GET(baseURL+"/api/cluster/config/keywords", wrapper.GetClusterConfigKeywords)
	router.POST(baseURL+"/api/cluster/hb/rotate", wrapper.PostClusterHeartbeatRotate)
	router.POST(baseURL+"/api/cluster/join", wrapper.PostClusterJoin)
	router.POST(baseURL+"/api/cluster/leave", wrapper.PostClusterLeave)
	router.GET(baseURL+"/api/cluster/status", wrapper.GetClusterStatus)
	router.GET(baseURL+"/api/instance", wrapper.GetInstances)
	router.POST(baseURL+"/api/instance/path/:namespace/:kind/:name/progress", wrapper.PostInstanceProgress)
	router.POST(baseURL+"/api/instance/path/:namespace/:kind/:name/status", wrapper.PostInstanceStatus)
	router.GET(baseURL+"/api/network", wrapper.GetNetworks)
	router.GET(baseURL+"/api/network/ip", wrapper.GetNetworkIP)
	router.GET(baseURL+"/api/node", wrapper.GetNodes)
	router.GET(baseURL+"/api/node/info", wrapper.GetNodesInfo)
	router.POST(baseURL+"/api/node/name/:nodename/action/abort", wrapper.PostPeerActionAbort)
	router.POST(baseURL+"/api/node/name/:nodename/action/clear", wrapper.PostNodeActionClear)
	router.POST(baseURL+"/api/node/name/:nodename/action/drain", wrapper.PostPeerActionDrain)
	router.POST(baseURL+"/api/node/name/:nodename/action/freeze", wrapper.PostPeerActionFreeze)
	router.POST(baseURL+"/api/node/name/:nodename/action/push/asset", wrapper.PostNodeActionPushAsset)
	router.POST(baseURL+"/api/node/name/:nodename/action/push/disk", wrapper.PostNodeActionPushDisk)
	router.POST(baseURL+"/api/node/name/:nodename/action/push/patch", wrapper.PostNodeActionPushPatch)
	router.POST(baseURL+"/api/node/name/:nodename/action/push/pkg", wrapper.PostNodeActionPushPkg)
	router.POST(baseURL+"/api/node/name/:nodename/action/scan/capabilities", wrapper.PostNodeActionScanCapabilities)
	router.POST(baseURL+"/api/node/name/:nodename/action/sysreport", wrapper.PostNodeActionSysreport)
	router.POST(baseURL+"/api/node/name/:nodename/action/unfreeze", wrapper.PostPeerActionUnfreeze)
	router.GET(baseURL+"/api/node/name/:nodename/capabilities", wrapper.GetNodeCapabilities)
	router.GET(baseURL+"/api/node/name/:nodename/config", wrapper.GetNodeConfig)
	router.PATCH(baseURL+"/api/node/name/:nodename/config", wrapper.PatchNodeConfig)
	router.GET(baseURL+"/api/node/name/:nodename/config/file", wrapper.GetNodeConfigFile)
	router.PUT(baseURL+"/api/node/name/:nodename/config/file", wrapper.PutNodeConfigFile)
	router.GET(baseURL+"/api/node/name/:nodename/config/keywords", wrapper.GetNodeConfigKeywords)
	router.POST(baseURL+"/api/node/name/:nodename/daemon/action/restart", wrapper.PostDaemonRestart)
	router.POST(baseURL+"/api/node/name/:nodename/daemon/action/shutdown", wrapper.PostDaemonShutdown)
	router.POST(baseURL+"/api/node/name/:nodename/daemon/action/stop", wrapper.PostDaemonStop)
	router.GET(baseURL+"/api/node/name/:nodename/daemon/dns/dump", wrapper.GetDaemonDNSDump)
	router.GET(baseURL+"/api/node/name/:nodename/daemon/event", wrapper.GetDaemonEvents)
	router.POST(baseURL+"/api/node/name/:nodename/daemon/hb/name/:name/action/restart", wrapper.PostDaemonHeartbeatRestart)
	router.POST(baseURL+"/api/node/name/:nodename/daemon/hb/name/:name/action/sign", wrapper.PostDaemonHeartbeatSign)
	router.POST(baseURL+"/api/node/name/:nodename/daemon/hb/name/:name/action/start", wrapper.PostDaemonHeartbeatStart)
	router.POST(baseURL+"/api/node/name/:nodename/daemon/hb/name/:name/action/stop", wrapper.PostDaemonHeartbeatStop)
	router.POST(baseURL+"/api/node/name/:nodename/daemon/hb/name/:name/action/wipe", wrapper.PostDaemonHeartbeatWipe)
	router.POST(baseURL+"/api/node/name/:nodename/daemon/listener/name/:name/action/restart", wrapper.PostDaemonListenerRestart)
	router.POST(baseURL+"/api/node/name/:nodename/daemon/listener/name/:name/action/start", wrapper.PostDaemonListenerStart)
	router.POST(baseURL+"/api/node/name/:nodename/daemon/listener/name/:name/action/stop", wrapper.PostDaemonListenerStop)
	router.POST(baseURL+"/api/node/name/:nodename/daemon/listener/name/:name/log/control", wrapper.PostDaemonListenerLogControl)
	router.POST(baseURL+"/api/node/name/:nodename/daemon/log/control", wrapper.PostDaemonLogControl)
	router.GET(baseURL+"/api/node/name/:nodename/drbd/allocation", wrapper.GetNodeDRBDAllocation)
	router.GET(baseURL+"/api/node/name/:nodename/drbd/config", wrapper.GetNodeDRBDConfig)
	router.POST(baseURL+"/api/node/name/:nodename/drbd/config", wrapper.PostNodeDRBDConfig)
	router.POST(baseURL+"/api/node/name/:nodename/drbd/connect", wrapper.PostNodeDRBDConnect)
	router.POST(baseURL+"/api/node/name/:nodename/drbd/primary", wrapper.PostNodeDRBDPrimary)
	router.POST(baseURL+"/api/node/name/:nodename/drbd/secondary", wrapper.PostNodeDRBDSecondary)
	router.GET(baseURL+"/api/node/name/:nodename/drivers", wrapper.GetNodeDriver)
	router.GET(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name", wrapper.GetInstance)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/action/boot", wrapper.PostInstanceActionBoot)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/action/delete", wrapper.PostInstanceActionDelete)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/action/freeze", wrapper.PostInstanceActionFreeze)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/action/provision", wrapper.PostInstanceActionProvision)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/action/prstart", wrapper.PostInstanceActionPRStart)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/action/prstop", wrapper.PostInstanceActionPRStop)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/action/push/resource/info", wrapper.PostInstanceActionPushResourceInfo)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/action/restart", wrapper.PostInstanceActionRestart)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/action/run", wrapper.PostInstanceActionRun)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/action/shutdown", wrapper.PostInstanceActionShutdown)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/action/start", wrapper.PostInstanceActionStart)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/action/startstandby", wrapper.PostInstanceActionStartStandby)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/action/status", wrapper.PostInstanceActionStatus)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/action/stop", wrapper.PostInstanceActionStop)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/action/sync/ingest", wrapper.PostInstanceActionSyncIngest)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/action/unfreeze", wrapper.PostInstanceActionUnfreeze)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/action/unprovision", wrapper.PostInstanceActionUnprovision)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/clear", wrapper.PostInstanceClear)
	router.GET(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/config/file", wrapper.GetInstanceConfigFile)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/console", wrapper.PostInstanceResourceConsole)
	router.GET(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/log", wrapper.GetInstanceLogs)
	router.GET(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/resource/info", wrapper.GetInstanceResourceInfo)
	router.GET(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/schedule", wrapper.GetInstanceSchedule)
	router.POST(baseURL+"/api/node/name/:nodename/instance/path/:namespace/:kind/:name/state/file", wrapper.PostInstanceStateFile)
	router.GET(baseURL+"/api/node/name/:nodename/log", wrapper.GetNodeLogs)
	router.GET(baseURL+"/api/node/name/:nodename/ping", wrapper.GetNodePing)
	router.GET(baseURL+"/api/node/name/:nodename/schedule", wrapper.GetNodeSchedule)
	router.GET(baseURL+"/api/node/name/:nodename/ssh/hostkeys", wrapper.GetNodeSSHHostkeys)
	router.GET(baseURL+"/api/node/name/:nodename/ssh/key", wrapper.GetNodeSSHKey)
	router.PUT(baseURL+"/api/node/name/:nodename/ssh/trust", wrapper.PutNodeSSHTrust)
	router.GET(baseURL+"/api/node/name/:nodename/system/disk", wrapper.GetNodeSystemDisk)
	router.GET(baseURL+"/api/node/name/:nodename/system/group", wrapper.GetNodeSystemGroup)
	router.GET(baseURL+"/api/node/name/:nodename/system/hardware", wrapper.GetNodeSystemHardware)
	router.GET(baseURL+"/api/node/name/:nodename/system/ipaddress", wrapper.GetNodeSystemIPAddress)
	router.GET(baseURL+"/api/node/name/:nodename/system/package", wrapper.GetNodeSystemPackage)
	router.GET(baseURL+"/api/node/name/:nodename/system/patch", wrapper.GetNodeSystemPatch)
	router.GET(baseURL+"/api/node/name/:nodename/system/property", wrapper.GetNodeSystemProperty)
	router.GET(baseURL+"/api/node/name/:nodename/system/san/initiator", wrapper.GetNodeSystemSANInitiator)
	router.GET(baseURL+"/api/node/name/:nodename/system/san/path", wrapper.GetNodeSystemSANPath)
	router.GET(baseURL+"/api/node/name/:nodename/system/user", wrapper.GetNodeSystemUser)
	router.GET(baseURL+"/api/object", wrapper.GetObjects)
	router.GET(baseURL+"/api/object/path", wrapper.GetObjectPaths)
	router.POST(baseURL+"/api/object/path/:namespace/svc/:name/disable", wrapper.PostSvcDisable)
	router.POST(baseURL+"/api/object/path/:namespace/svc/:name/enable", wrapper.PostSvcEnable)
	router.GET(baseURL+"/api/object/path/:namespace/:kind/:name", wrapper.GetObject)
	router.POST(baseURL+"/api/object/path/:namespace/:kind/:name/action/abort", wrapper.PostObjectActionAbort)
	router.POST(baseURL+"/api/object/path/:namespace/:kind/:name/action/delete", wrapper.PostObjectActionDelete)
	router.POST(baseURL+"/api/object/path/:namespace/:kind/:name/action/freeze", wrapper.PostObjectActionFreeze)
	router.POST(baseURL+"/api/object/path/:namespace/:kind/:name/action/giveback", wrapper.PostObjectActionGiveback)
	router.POST(baseURL+"/api/object/path/:namespace/:kind/:name/action/provision", wrapper.PostObjectActionProvision)
	router.POST(baseURL+"/api/object/path/:namespace/:kind/:name/action/purge", wrapper.PostObjectActionPurge)
	router.POST(baseURL+"/api/object/path/:namespace/:kind/:name/action/restart", wrapper.PostObjectActionRestart)
	router.POST(baseURL+"/api/object/path/:namespace/:kind/:name/action/start", wrapper.PostObjectActionStart)
	router.POST(baseURL+"/api/object/path/:namespace/:kind/:name/action/stop", wrapper.PostObjectActionStop)
	router.POST(baseURL+"/api/object/path/:namespace/:kind/:name/action/switch", wrapper.PostObjectActionSwitch)
	router.POST(baseURL+"/api/object/path/:namespace/:kind/:name/action/unfreeze", wrapper.PostObjectActionUnfreeze)
	router.POST(baseURL+"/api/object/path/:namespace/:kind/:name/action/unprovision", wrapper.PostObjectActionUnprovision)
	router.GET(baseURL+"/api/object/path/:namespace/:kind/:name/config", wrapper.GetObjectConfig)
	router.PATCH(baseURL+"/api/object/path/:namespace/:kind/:name/config", wrapper.PatchObjectConfig)
	router.GET(baseURL+"/api/object/path/:namespace/:kind/:name/config/file", wrapper.GetObjectConfigFile)
	router.POST(baseURL+"/api/object/path/:namespace/:kind/:name/config/file", wrapper.PostObjectConfigFile)
	router.PUT(baseURL+"/api/object/path/:namespace/:kind/:name/config/file", wrapper.PutObjectConfigFile)
	router.GET(baseURL+"/api/object/path/:namespace/:kind/:name/config/keywords", wrapper.GetObjectConfigKeywords)
	router.GET(baseURL+"/api/object/path/:namespace/:kind/:name/data", wrapper.GetObjectData)
	router.PATCH(baseURL+"/api/object/path/:namespace/:kind/:name/data", wrapper.PatchObjectData)
	router.DELETE(baseURL+"/api/object/path/:namespace/:kind/:name/data/key", wrapper.DeleteObjectDataKey)
	router.GET(baseURL+"/api/object/path/:namespace/:kind/:name/data/key", wrapper.GetObjectDataKey)
	router.POST(baseURL+"/api/object/path/:namespace/:kind/:name/data/key", wrapper.PostObjectDataKey)
	router.PUT(baseURL+"/api/object/path/:namespace/:kind/:name/data/key", wrapper.PutObjectDataKey)
	router.GET(baseURL+"/api/object/path/:namespace/:kind/:name/data/keys", wrapper.GetObjectDataKeys)
	router.GET(baseURL+"/api/object/path/:namespace/:kind/:name/resource/info", wrapper.GetObjectResourceInfo)
	router.GET(baseURL+"/api/object/path/:namespace/:kind/:name/schedule", wrapper.GetObjectSchedule)
	router.GET(baseURL+"/api/openapi", wrapper.GetSwagger)
	router.GET(baseURL+"/api/pool", wrapper.GetPools)
	router.GET(baseURL+"/api/pool/volume", wrapper.GetPoolVolumes)
	router.GET(baseURL+"/api/relay/message", wrapper.GetRelayMessage)
	router.POST(baseURL+"/api/relay/message", wrapper.PostRelayMessage)
	router.GET(baseURL+"/api/relay/status", wrapper.GetRelayStatus)
	router.GET(baseURL+"/api/resource", wrapper.GetResources)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
