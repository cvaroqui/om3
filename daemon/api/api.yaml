openapi: 3.0.0

info:
  title: opensvc agent api
  version: 3.16.0

paths:
  /api/auth/info:
    get:
      description: |
        List the authentication methods supported by the server.
      operationId: GetAuthInfo
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthInfo'
      tags:
        - auth

  /api/auth/token:
    post:
      description: |
        Create and return a JSON Web Token the client can use as a Authorization
        header in its following requests.

        The requested roles are embedded as a 'grant' claim if matching the usr
        'grant' keyword.
      operationId: PostAuthToken
      parameters:
        - $ref: '#/components/parameters/Roles'
        - in: query
          name: duration
          description: max token duration, maximum value 24h
          schema:
            type: string
            example: 10m
        - in: query
          name: subject
          description: the token subject claim, must be an existing cluster user
          schema:
            type: string
            example: foo
        - in: query
          name: scope
          description: the scope value used to create the token grant claim
          schema:
            type: string
            example: ns1
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
      security:
        - basicAuth: []
        - bearerAuth: []
      tags:
        - auth

  /api/auth/whoami:
    get:
      operationId: GetAuthWhoAmI
      security:
        - basicAuth: []
        - bearerAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserIdentity'
        401:
          $ref: '#/components/responses/401'
      tags:
        - auth

  /api/cluster/action/abort:
    post:
      description: |
        Abort the running cluster-wide action orchestration.

        Reset the node monitor global expect value on all nodes.
      operationId: PostClusterActionAbort
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrchestrationQueued'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        408:
          $ref: '#/components/responses/408'
        409:
          $ref: '#/components/responses/409'
        500:
          $ref: '#/components/responses/500'
      security:
        - basicAuth: []
        - bearerAuth: []
      tags:
        - cluster

  /api/cluster/action/freeze:
    post:
      description: |
        Freeze all the cluster nodes.

        Prevent all service monitors decisions, for example services takeover.

        Nodes should be frozen before any maintenance operation on the system,
        the clusterware or the managed applications.
      operationId: PostClusterActionFreeze
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrchestrationQueued'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        408:
          $ref: '#/components/responses/408'
        409:
          $ref: '#/components/responses/409'
        500:
          $ref: '#/components/responses/500'
      security:
        - basicAuth: []
        - bearerAuth: []
      tags:
        - cluster

  /api/cluster/action/unfreeze:
    post:
      description: |
        Unfreeze all the cluster nodes.

        Restore service monitors decision taking capability, for example services takeover.

        Nodes should be unfrozen before leaving the nodes after a maintenance operation on
        the system, the clusterware or the managed applications, so unattended failover is
        enabled again.
      operationId: PostClusterActionUnfreeze
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrchestrationQueued'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        408:
          $ref: '#/components/responses/408'
        409:
          $ref: '#/components/responses/409'
        500:
          $ref: '#/components/responses/500'
      security:
        - basicAuth: []
        - bearerAuth: []
      tags:
        - cluster

  /api/cluster/config:
    get:
      operationId: GetClusterConfig
      tags:
        - cluster
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/inQueryEvaluate'
        - $ref: '#/components/parameters/inQueryImpersonate'
        - $ref: '#/components/parameters/inQueryKeywords'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeywordList'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
    patch:
      operationId: PatchClusterConfig
      tags:
        - cluster
      security:
        - basicAuth: []
        - bearerAuth: []
      description: Delete sections, unset and set keywords in the object configuration file.
      parameters:
        - $ref: '#/components/parameters/inQueryDeletes'
        - $ref: '#/components/parameters/inQueryUnsets'
        - $ref: '#/components/parameters/inQuerySets'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Committed'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

  /api/cluster/config/file:
    get:
      description: |
        Return the cluster configuration.
      operationId: GetClusterConfigFile
      tags:
        - cluster
      security:
        - basicAuth: []
        - bearerAuth: []
      responses:
        200:
          description: OK
          headers:
            x-last-modified-rfc3339nano:
              type: string
              format: date-time
              pattern: '^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d{1,9})?Z?$'
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
    put:
      operationId: PutClusterConfigFile
      tags:
        - cluster
      security:
        - basicAuth: []
        - bearerAuth: []
      requestBody:
        description: OK
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        204:
          $ref: '#/components/responses/204'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        409:
          $ref: '#/components/responses/409'
        500:
          $ref: '#/components/responses/500'

  /api/cluster/status:
    get:
      description: |
        Dump all the information available to the daemon.
      operationId: GetClusterStatus
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/NamespaceOptional'
        - $ref: '#/components/parameters/SelectorOptional'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterStatus'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      tags:
        - cluster

  /api/cluster/join:
    post:
      description: |
        For internal use only.

        Add a new node to the cluster of the requested api node.

        The requester must be granted the 'root' or 'join' roles.

        The processing of the join request is asynchronous.
       
        The HTTP response is sent when the join request event has been published.
        This event is labeled node=<api_node>.

        To follow the processing of the join request, use the following event filters,
        - JoinSuccess,node=<api_node>,added=<node> (the new node has been added to cluster nodes)
        - JoinIgnored,node=<api_node>,join-node=<node> (the new node was already a cluster node)
        - JoinError,node=<api_node>,join-node=<node> (an error occur during update cluster node list)
      operationId: PostClusterJoin
      parameters:
        - in: query
          name: node
          description: The node to add to cluster nodes
          required: true
          schema:
            type: string
            example: new_node
            minLength: 2
      responses:
        200:
          description: OK
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      security:
        - basicAuth: [ ]
        - bearerAuth: [ ]
      tags:
        - cluster
      x-internal: true

  /api/cluster/leave:
    post:
      description: |
        Register a leave request to remove a cluster node member.
        The requester must be granted the 'root' or 'Leave' roles.

        The processing of the leave request is asynchronous.

        The HTTP response is sent when the leave request event has been published.
        This event is labeled node=<api_node>.

        To follow the processing of the leave request, use the following event filters,
        - LeaveSuccess,node=<api_node>,removed=<node> (node has been removed to cluster nodes)
        - LeaveIgnored,node=<api_node>,leave-node=<node> (node is not a cluster node)
        - LeaveError,node=<api_node>,leave-node=<node> (an error occur during update cluster node list)
      operationId: PostClusterLeave
      parameters:
        - in: query
          name: node
          description: The leaving cluster node
          required: true
          schema:
            type: string
            example: node-wto-remove
            minLength: 2
      responses:
        200:
          description: OK
        400:
          $ref: '#/components/responses/400'
      security:
        - basicAuth: [ ]
        - bearerAuth: [ ]
      tags:
        - cluster

  /api/node/name/{nodename}/capabilities:
    get:
      operationId: GetNodeCapabilities
      description: |
        Return the capabilities of the node.
        Capability scanners are provided by the core agent and by every resource driver.
        Capabalities are used to enable or disable features based on the current operating system state.
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CapabilityList'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      security:
        - basicAuth: []
        - bearerAuth: []
      tags:
        - node

  /api/cluster/config/keywords:
    get:
      operationId: GetClusterConfigKeywords
      description: |
        Return the list of supported keywords in cluster.conf
      parameters:
        - $ref: '#/components/parameters/inQueryDriver'
        - $ref: '#/components/parameters/inQuerySection'
        - $ref: '#/components/parameters/inQueryOption'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeywordDefinitionList'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
      security:
        - basicAuth: [ ]
        - bearerAuth: [ ]
      tags:
        - cluster

  /api/node/name/{nodename}/config/keywords:
    get:
      operationId: GetNodeConfigKeywords
      description: |
        Return the list of supported keywords in node
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
        - $ref: '#/components/parameters/inQueryDriver'
        - $ref: '#/components/parameters/inQuerySection'
        - $ref: '#/components/parameters/inQueryOption'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeywordDefinitionList'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
      security:
        - basicAuth: [ ]
        - bearerAuth: [ ]
      tags:
        - node

  /api/object/path/{namespace}/{kind}/{name}/config/keywords:
    get:
      operationId: GetObjectConfigKeywords
      description: |
        Return the list of supported keywords in object
      parameters:
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
        - $ref: '#/components/parameters/inQueryDriver'
        - $ref: '#/components/parameters/inQuerySection'
        - $ref: '#/components/parameters/inQueryOption'
      tags:
        - object / svc
        - object / vol
        - object / cfg
        - object / sec
        - object / usr
      security:
        - basicAuth: [ ]
        - bearerAuth: [ ]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeywordDefinitionList'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'

  /api/node/name/{nodename}/daemon/action/restart:
    post:
      description: |
        Restart the daemon on this node.

        The node svc and vol instances do not change state.

        The peer nodes are notified of our maintenance state so they will not
        try to takeover services during the restart.
      operationId: PostDaemonRestart
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
      responses:
        200:
          $ref: '#/components/responses/200'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      security:
        - basicAuth: []
        - bearerAuth: []
      tags:
        - node / daemon

  /api/node/name/{nodename}/daemon/action/shutdown:
    post:
      description: |
        Shut down all the node svc and vol instances, then stop the daemon.

        Peer nodes are not notified of a maintenance period, so they will try
        to takeover services as soon as their instance on the shutdown daemon's
        node is down.
      operationId: PostDaemonShutdown
      parameters:
        - $ref: '#/components/parameters/Duration'
        - $ref: '#/components/parameters/inPathNodeName'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaemonPid'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      tags:
        - node / daemon
      security:
        - basicAuth: []
        - bearerAuth: []

  /api/node/name/{nodename}/daemon/action/stop:
    post:
      description: |
        Stop the daemon.

        The node svc and vol instances do not change state.
        The peer nodes are notified of our maintenance state so they will
        not takeover services until the maintenance_grace_period is expired.
      operationId: PostDaemonStop
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaemonPid'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      security:
        - basicAuth: []
        - bearerAuth: []
      tags:
        - node / daemon

  /api/node/name/{nodename}/daemon/dns/dump:
    get:
      description: |
        Dump the cluster DNS zone content.
      operationId: GetDaemonDNSDump
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DNSZone'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      security:
        - basicAuth: []
        - bearerAuth: []
      tags:
        - node / daemon

  /api/node/name/{nodename}/daemon/event:
    get:
      operationId: GetDaemonEvents
      description: |
        Listen node daemon events
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
        - $ref: '#/components/parameters/Duration'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/EventFilter'
        - $ref: '#/components/parameters/EventCache'
        - $ref: '#/components/parameters/SelectorOptional'
      responses:
        200:
          description: OK
          content:
            text/event-stream:
              schema:
                $ref: '#/components/schemas/EventList'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      security:
        - basicAuth: []
        - bearerAuth: []
      tags:
        - node / daemon

  /api/node/name/{nodename}/daemon/hb/name/{name}/action/restart:
    post:
      description: |
        Restart daemon hb `name` on `nodename`.
      operationId: PostDaemonHeartbeatRestart
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
        - $ref: '#/components/parameters/inPathHeartbeatName'
      tags:
        - node / daemon
      security:
        - basicAuth: [ ]
        - bearerAuth: [ ]
      responses:
        200:
          $ref: '#/components/responses/200'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

  /api/node/name/{nodename}/daemon/hb/name/{name}/action/start:
    post:
      description: |
        Start daemon hb `name` on `nodename`.
      operationId: PostDaemonHeartbeatStart
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
        - $ref: '#/components/parameters/inPathHeartbeatName'
      tags:
        - node / daemon
      security:
        - basicAuth: [ ]
        - bearerAuth: [ ]
      responses:
        200:
          $ref: '#/components/responses/200'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

  /api/node/name/{nodename}/daemon/hb/name/{name}/action/stop:
    post:
      description: |
        Stop daemon hb `name` on `nodename`.
      operationId: PostDaemonHeartbeatStop
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
        - $ref: '#/components/parameters/inPathHeartbeatName'
      tags:
        - node / daemon
      security:
        - basicAuth: [ ]
        - bearerAuth: [ ]
      responses:
        200:
          $ref: '#/components/responses/200'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

  /api/node/name/{nodename}/daemon/listener/name/{name}/action/restart:
    post:
      description: |
        Restart daemon listener `name` on `nodename`.
      operationId: PostDaemonListenerRestart
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
        - $ref: '#/components/parameters/inPathListenerName'
      tags:
        - node / daemon
      security:
        - basicAuth: [ ]
        - bearerAuth: [ ]
      responses:
        200:
          $ref: '#/components/responses/200'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

  /api/node/name/{nodename}/daemon/listener/name/{name}/action/start:
    post:
      description: |
        Start daemon listener `name` on `nodename`.
      operationId: PostDaemonListenerStart
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
        - $ref: '#/components/parameters/inPathListenerName'
      tags:
        - node / daemon
      security:
        - basicAuth: [ ]
        - bearerAuth: [ ]
      responses:
        200:
          $ref: '#/components/responses/200'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

  /api/node/name/{nodename}/daemon/listener/name/{name}/log/control:
    post:
      operationId: PostDaemonListenerLogControl
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
        - $ref: '#/components/parameters/inPathListenerName'
      tags:
        - node / daemon
      security:
        - basicAuth: []
        - bearerAuth: []
      requestBody:
        description: |
          Set a daemon listener log level.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogControlBody'
      responses:
        200:
          $ref: '#/components/responses/200'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

  /api/node/name/{nodename}/daemon/listener/name/{name}/action/stop:
    post:
      description: |
        Stop daemon listener `name` on `nodename`.
      operationId: PostDaemonListenerStop
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
        - $ref: '#/components/parameters/inPathListenerName'
      tags:
        - node / daemon
      security:
        - basicAuth: [ ]
        - bearerAuth: [ ]
      responses:
        200:
          $ref: '#/components/responses/200'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

  /api/node/name/{nodename}/daemon/log/control:
    post:
      operationId: PostDaemonLogControl
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
      security:
        - basicAuth: []
        - bearerAuth: []
      requestBody:
        description: set daemon log level
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogControlBody'
      responses:
        200:
          $ref: '#/components/responses/200'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      tags:
        - node / daemon

  /api/node/name/{nodename}/schedule:
    get:
      operationId: GetNodeSchedule
      description: |
        Return the schedule table of the node.
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleList'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      security:
        - basicAuth: []
        - bearerAuth: []
      tags:
        - node

  /api/node/name/{nodename}/ssh/hostkeys:
    get:
      description: |
        Return the ssh public host keys so the peer can trust them in its known_hosts file.
      operationId: GetNodeSSHHostkeys
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
      responses:
        200:
          description: OK
          content:
            text/plain:
              schema:
                type: string
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      security:
        - basicAuth: []
        - bearerAuth: []
      tags:
        - node

  /api/node/name/{nodename}/ssh/key:
    get:
      description: |
        Return the ssh public key defined by node.sshkey so the peer can trust it in its authorized_keys file.
      operationId: GetNodeSSHKey
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
      responses:
        200:
          description: OK
          content:
            text/plain:
              schema:
                type: string
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      security:
        - basicAuth: []
        - bearerAuth: []
      tags:
        - node

  /api/node/name/{nodename}/ssh/trust:
    put:
      description: |
        Trust the ssh public keys of peer nodes.
      operationId: PutNodeSSHTrust
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
      responses:
        204:
          $ref: '#/components/responses/204'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      security:
        - basicAuth: []
        - bearerAuth: []
      tags:
        - node

  /api/network:
    get:
      operationId: GetNetworks
      tags:
        - network
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - in: query
          name: name
          description: the name of a cluster backend network
          required: false
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkList'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

  /api/network/ip:
    get:
      operationId: GetNetworkIP
      tags:
        - network
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
      - in: query
        name: name
        description: the name of a cluster backend network
        required: false
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkIPList'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

  /api/node:
    get:
      description: |
        Return the monitor, status and config data of all nodes.
      operationId: GetNodes
      tags:
        - node
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/NodeOptional'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeList'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

  /api/node/name/{nodename}/action/abort:
    post:
      description: |
        Abort the current node orchestration.
      operationId: PostPeerActionAbort
      tags:
        - node
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrchestrationQueued'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        408:
          $ref: '#/components/responses/408'
        409:
          $ref: '#/components/responses/409'
        500:
          $ref: '#/components/responses/500'

  /api/node/name/{nodename}/action/clear:
    post:
      description: |
        Clears errors (for example, failed) in the node monitor state.
      operationId: PostNodeActionClear
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
      tags:
        - node
      security:
        - basicAuth: []
        - bearerAuth: []
      responses:
        200:
          $ref: '#/components/responses/200'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

  /api/node/name/{nodename}/action/drain:
    post:
      operationId: PostPeerActionDrain
      tags:
        - node
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrchestrationQueued'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        408:
          $ref: '#/components/responses/408'
        409:
          $ref: '#/components/responses/409'
        500:
          $ref: '#/components/responses/500'

  /api/node/name/{nodename}/action/freeze:
    post:
      operationId: PostPeerActionFreeze
      tags:
        - node
      security:
        - basicAuth: []
        - bearerAuth: []
      description: Freeze the node.
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
        - $ref: '#/components/parameters/inQueryRequesterSid'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeActionAccepted'
          description: OK
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

  /api/node/name/{nodename}/action/push/asset:
    post:
      operationId: PostNodeActionPushAsset
      tags:
        - node
      security:
        - basicAuth: []
        - bearerAuth: []
      description: Refresh and send to the collector the asset discovery.
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
        - $ref: '#/components/parameters/inQueryRequesterSid'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeActionAccepted'
          description: OK
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

  /api/node/name/{nodename}/action/push/disk:
    post:
      operationId: PostNodeActionPushDisk
      tags:
        - node
      security:
        - basicAuth: []
        - bearerAuth: []
      description: Refresh and send to the collector the disk discovery.
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
        - $ref: '#/components/parameters/inQueryRequesterSid'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeActionAccepted'
          description: OK
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

  /api/node/name/{nodename}/action/push/patch:
    post:
      operationId: PostNodeActionPushPatch
      tags:
        - node
      security:
        - basicAuth: []
        - bearerAuth: []
      description: Refresh and send to the collector the package discovery.
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
        - $ref: '#/components/parameters/inQueryRequesterSid'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeActionAccepted'
          description: OK
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

  /api/node/name/{nodename}/action/push/pkg:
    post:
      operationId: PostNodeActionPushPkg
      tags:
        - node
      security:
        - basicAuth: []
        - bearerAuth: []
      description: Refresh and send to the collector the package discovery.
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
        - $ref: '#/components/parameters/inQueryRequesterSid'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeActionAccepted'
          description: OK
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

  /api/node/name/{nodename}/action/scan/capabilities:
    post:
      operationId: PostNodeActionScanCapabilities
      tags:
        - node
      security:
        - basicAuth: []
        - bearerAuth: []
      description: |
        Refresh the node capabilities cache.
        Capability scanners are provided by the core agent and by every resource driver.
        Capabalities are used to enable or disable features based on the current operating system state.
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
        - $ref: '#/components/parameters/inQueryRequesterSid'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeActionAccepted'
          description: OK
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

  /api/node/name/{nodename}/action/sysreport:
    post:
      operationId: PostNodeActionSysreport
      tags:
        - node
      security:
        - basicAuth: []
        - bearerAuth: []
      description: Collect and send a new sysreport.
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
        - $ref: '#/components/parameters/inQueryForce'
        - $ref: '#/components/parameters/inQueryRequesterSid'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeActionAccepted'
          description: OK
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

  /api/node/name/{nodename}/action/unfreeze:
    post:
      operationId: PostPeerActionUnfreeze
      tags:
        - node
      security:
        - basicAuth: []
        - bearerAuth: []
      description: Unfreeze the node.
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
        - $ref: '#/components/parameters/inQueryRequesterSid'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeActionAccepted'
          description: OK
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

  /api/node/name/{nodename}/config:
    get:
      operationId: GetNodeConfig
      tags:
        - node
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
        - $ref: '#/components/parameters/inQueryKeywords'
        - $ref: '#/components/parameters/inQueryEvaluate'
        - $ref: '#/components/parameters/inQueryImpersonate'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeywordList'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
    patch:
      operationId: PatchNodeConfig
      tags:
        - node
      security:
        - basicAuth: []
        - bearerAuth: []
      description: Delete sections, unset and set keywords in the node configuration file.
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
        - $ref: '#/components/parameters/inQueryDeletes'
        - $ref: '#/components/parameters/inQueryUnsets'
        - $ref: '#/components/parameters/inQuerySets'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Committed'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'


  /api/node/name/{nodename}/config/file:
    get:
      description: |
        Return the node configuration. If nodename is not the local node name, do proxy.
      operationId: GetNodeConfigFile
      tags:
        - node
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
      responses:
        200:
          description: OK
          headers:
            x-last-modified-rfc3339nano:
              type: string
              format: date-time
              pattern: '^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d{1,9})?Z?$'
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
    put:
      operationId: PutNodeConfigFile
      tags:
        - node
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
      requestBody:
        description: OK
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        204:
          $ref: '#/components/responses/204'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        409:
          $ref: '#/components/responses/409'
        500:
          $ref: '#/components/responses/500'

  /api/node/name/{nodename}/drbd/allocation:
    get:
      description: |
        Get the drbd driver minor numbers and ports already allocated on the node.
      operationId: GetNodeDRBDAllocation
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DRBDAllocation'
        400:
          $ref: '#/components/responses/400'
        500:
          $ref: '#/components/responses/500'
      security:
        - basicAuth: []
        - bearerAuth: []
      tags:
        - node

  /api/node/name/{nodename}/drbd/config:
    get:
      operationId: GetNodeDRBDConfig
      description: |
        Fetch from a node a drbd configuration file fragment.
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
        - $ref: '#/components/parameters/DRBDConfigName'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DRBDConfig'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      security:
        - basicAuth: []
        - bearerAuth: []
      tags:
        - node
    post:
      operationId: PostNodeDRBDConfig
      description: |
        Send to a node a drbd configuration file fragment to install.
      tags:
        - node
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
        - $ref: '#/components/parameters/DRBDConfigName'
      requestBody:
        description: monitor
        required: true
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/PostNodeDRBDConfigRequest'
      responses:
        200:
          description: OK
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

  /api/node/name/{nodename}/drivers:
    get:
      description: Get the node drivers
      operationId: GetNodeDriver
      tags:
        - node
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
      security:
        - basicAuth: []
        - bearerAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DriverList'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

  /api/node/info:
    get:
      operationId: GetNodesInfo
      tags:
        - node
      security:
        - basicAuth: []
        - bearerAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesInfo'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

  /api/object:
    get:
      operationId: GetObjects
      tags:
        - object
      security:
        - basicAuth: []
        - bearerAuth: []
      description: |
        List all objects in the cluster.
      parameters:
        - $ref: '#/components/parameters/PathOptional'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectList'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

  /api/instance:
    get:
      operationId: GetInstances
      tags:
        - instance
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PathOptional'
        - $ref: '#/components/parameters/NodeOptional'
      responses:
        200:
          description: get instance config, monitor and status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceList'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

  /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}:
    get:
      operationId: GetInstance
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
      responses:
        200:
          description: get instance config, monitor and status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceItem'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      tags:
        - node / instance / svc
        - node / instance / vol
        - node / instance / cfg
        - node / instance / sec
        - node / instance / usr

  /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/boot:
    post:
      description: Boot the object instance.
      operationId: PostInstanceActionBoot
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
        - $ref: '#/components/parameters/inQueryAllSlaves'
        - $ref: '#/components/parameters/inQueryMaster'
        - $ref: '#/components/parameters/inQueryRequesterSid'
        - $ref: '#/components/parameters/inQueryRid'
        - $ref: '#/components/parameters/inQuerySlaves'
        - $ref: '#/components/parameters/inQuerySubset'
        - $ref: '#/components/parameters/inQueryTag'
        - $ref: '#/components/parameters/inQueryTo'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceActionAccepted'
          description: OK
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      security:
        - basicAuth: []
        - bearerAuth: []
      tags:
        - node / instance / svc
        - node / instance / vol

  /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/delete:
    post:
      description: Delete the object instance.
      operationId: PostInstanceActionDelete
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
        - $ref: '#/components/parameters/inQueryRequesterSid'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceActionAccepted'
          description: OK
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      security:
        - basicAuth: []
        - bearerAuth: []
      tags:
        - node / instance / svc
        - node / instance / vol
        - node / instance / sec
        - node / instance / cfg
        - node / instance / usr

  /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/freeze:
    post:
      description: Freeze the object instance.
      operationId: PostInstanceActionFreeze
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
        - $ref: '#/components/parameters/inQueryAllSlaves'
        - $ref: '#/components/parameters/inQueryMaster'
        - $ref: '#/components/parameters/inQuerySlaves'
        - $ref: '#/components/parameters/inQueryRequesterSid'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceActionAccepted'
          description: OK
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      security:
        - basicAuth: []
        - bearerAuth: []
      tags:
        - node / instance / svc
        - node / instance / vol

  /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/provision:
    post:
      description: Provision the object instance. When state_only parameter is true, only internal provisioned state is changed.
      operationId: PostInstanceActionProvision
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
        - $ref: '#/components/parameters/inQueryAllSlaves'
        - $ref: '#/components/parameters/inQueryDisableRollback'
        - $ref: '#/components/parameters/inQueryForce'
        - $ref: '#/components/parameters/inQueryLeader'
        - $ref: '#/components/parameters/inQueryMaster'
        - $ref: '#/components/parameters/inQueryRequesterSid'
        - $ref: '#/components/parameters/inQueryRid'
        - $ref: '#/components/parameters/inQuerySlaves'
        - $ref: '#/components/parameters/inQueryStateOnly'
        - $ref: '#/components/parameters/inQuerySubset'
        - $ref: '#/components/parameters/inQueryTag'
        - $ref: '#/components/parameters/inQueryTo'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceActionAccepted'
          description: OK
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      tags:
        - node / instance / svc
        - node / instance / vol
      security:
        - basicAuth: []
        - bearerAuth: []

  /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/push/resource/info:
    post:
      operationId: PostInstanceActionPushResourceInfo
      description: Refresh and send to the collector the object instance resource information.
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
        - $ref: '#/components/parameters/inQueryRequesterSid'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceActionAccepted'
          description: OK
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      security:
        - basicAuth: []
        - bearerAuth: []
      tags:
        - node / instance / svc
        - node / instance / vol

  /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/restart:
    post:
      description: Restart the object instance.
      operationId: PostInstanceActionRestart
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
        - $ref: '#/components/parameters/inQueryAllSlaves'
        - $ref: '#/components/parameters/inQueryDisableRollback'
        - $ref: '#/components/parameters/inQueryForce'
        - $ref: '#/components/parameters/inQueryMaster'
        - $ref: '#/components/parameters/inQueryRequesterSid'
        - $ref: '#/components/parameters/inQueryRid'
        - $ref: '#/components/parameters/inQuerySlaves'
        - $ref: '#/components/parameters/inQuerySubset'
        - $ref: '#/components/parameters/inQueryTag'
        - $ref: '#/components/parameters/inQueryTo'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceActionAccepted'
          description: OK
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      security:
        - basicAuth: []
        - bearerAuth: []
      tags:
        - node / instance / svc
        - node / instance / vol

  /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/run:
    post:
      description: Run the object instance task.
      operationId: PostInstanceActionRun
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
        - $ref: '#/components/parameters/inQueryAllSlaves'
        - $ref: '#/components/parameters/inQueryConfirm'
        - $ref: '#/components/parameters/inQueryCron'
        - $ref: '#/components/parameters/inQueryForce'
        - $ref: '#/components/parameters/inQueryMaster'
        - $ref: '#/components/parameters/inQueryRequesterSid'
        - $ref: '#/components/parameters/inQueryRid'
        - $ref: '#/components/parameters/inQuerySlaves'
        - $ref: '#/components/parameters/inQuerySubset'
        - $ref: '#/components/parameters/inQueryTag'
        - $ref: '#/components/parameters/inQueryTo'
        - $ref: '#/components/parameters/inQueryEnvs'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceActionAccepted'
          description: OK
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      security:
        - basicAuth: []
        - bearerAuth: []
      tags:
        - node / instance / svc
        - node / instance / vol

  /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/start:
    post:
      description: Start the object instance.
      operationId: PostInstanceActionStart
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
        - $ref: '#/components/parameters/inQueryAllSlaves'
        - $ref: '#/components/parameters/inQueryDisableRollback'
        - $ref: '#/components/parameters/inQueryForce'
        - $ref: '#/components/parameters/inQueryMaster'
        - $ref: '#/components/parameters/inQueryRequesterSid'
        - $ref: '#/components/parameters/inQueryRid'
        - $ref: '#/components/parameters/inQuerySlaves'
        - $ref: '#/components/parameters/inQuerySubset'
        - $ref: '#/components/parameters/inQueryTag'
        - $ref: '#/components/parameters/inQueryTo'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceActionAccepted'
          description: OK
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      security:
        - basicAuth: []
        - bearerAuth: []
      tags:
        - node / instance / svc
        - node / instance / vol

  /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/startstandby:
    post:
      description: Start the object instance in standby mode.
      operationId: PostInstanceActionStartStandby
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
        - $ref: '#/components/parameters/inQueryAllSlaves'
        - $ref: '#/components/parameters/inQueryDisableRollback'
        - $ref: '#/components/parameters/inQueryForce'
        - $ref: '#/components/parameters/inQueryMaster'
        - $ref: '#/components/parameters/inQueryRequesterSid'
        - $ref: '#/components/parameters/inQueryRid'
        - $ref: '#/components/parameters/inQuerySlaves'
        - $ref: '#/components/parameters/inQuerySubset'
        - $ref: '#/components/parameters/inQueryTag'
        - $ref: '#/components/parameters/inQueryTo'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceActionAccepted'
          description: OK
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      security:
        - basicAuth: []
        - bearerAuth: []
      tags:
        - node / instance / svc
        - node / instance / vol

  /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/status:
    post:
      description: Refresh the object instance status.
      operationId: PostInstanceActionStatus
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
        - $ref: '#/components/parameters/inQueryRequesterSid'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceActionAccepted'
          description: OK
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      security:
        - basicAuth: []
        - bearerAuth: []
      tags:
        - node / instance / svc
        - node / instance / vol

  /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/shutdown:
    post:
      description: Shutdown the object instance.
      operationId: PostInstanceActionShutdown
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
        - $ref: '#/components/parameters/inQueryAllSlaves'
        - $ref: '#/components/parameters/inQueryForce'
        - $ref: '#/components/parameters/inQueryMaster'
        - $ref: '#/components/parameters/inQueryRequesterSid'
        - $ref: '#/components/parameters/inQueryRid'
        - $ref: '#/components/parameters/inQuerySlaves'
        - $ref: '#/components/parameters/inQuerySubset'
        - $ref: '#/components/parameters/inQueryTag'
        - $ref: '#/components/parameters/inQueryTo'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceActionAccepted'
          description: OK
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      security:
        - basicAuth: []
        - bearerAuth: []
      tags:
        - node / instance / svc
        - node / instance / vol

  /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/stop:
    post:
      description: Stop the object instance.
      operationId: PostInstanceActionStop
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
        - $ref: '#/components/parameters/inQueryAllSlaves'
        - $ref: '#/components/parameters/inQueryForce'
        - $ref: '#/components/parameters/inQueryMaster'
        - $ref: '#/components/parameters/inQueryRequesterSid'
        - $ref: '#/components/parameters/inQueryRid'
        - $ref: '#/components/parameters/inQuerySlaves'
        - $ref: '#/components/parameters/inQuerySubset'
        - $ref: '#/components/parameters/inQueryTag'
        - $ref: '#/components/parameters/inQueryTo'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceActionAccepted'
          description: OK
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      security:
        - basicAuth: []
        - bearerAuth: []
      tags:
        - node / instance / svc
        - node / instance / vol

  /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/sync/ingest:
    post:
      description: Ingest resource var files received by the active instance sync update action.
      operationId: PostInstanceActionSyncIngest
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
        - $ref: '#/components/parameters/inQueryRequesterSid'
        - $ref: '#/components/parameters/inQueryRid'
        - $ref: '#/components/parameters/inQuerySubset'
        - $ref: '#/components/parameters/inQueryTag'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceActionAccepted'
          description: OK
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      security:
        - basicAuth: []
        - bearerAuth: []
      tags:
        - node / instance / svc
        - node / instance / vol

  /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/unfreeze:
    post:
      description: Unfreeze the object instance.
      operationId: PostInstanceActionUnfreeze
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
        - $ref: '#/components/parameters/inQueryAllSlaves'
        - $ref: '#/components/parameters/inQueryMaster'
        - $ref: '#/components/parameters/inQuerySlaves'
        - $ref: '#/components/parameters/inQueryRequesterSid'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceActionAccepted'
          description: OK
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      security:
        - basicAuth: []
        - bearerAuth: []
      tags:
        - node / instance / svc
        - node / instance / vol

  /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/unprovision:
    post:
      description: Unprovision the object instance. When state_only parameter is true, only internal provisioned state is changed.
      operationId: PostInstanceActionUnprovision
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
        - $ref: '#/components/parameters/inQueryAllSlaves'
        - $ref: '#/components/parameters/inQueryForce'
        - $ref: '#/components/parameters/inQueryLeader'
        - $ref: '#/components/parameters/inQueryMaster'
        - $ref: '#/components/parameters/inQueryRequesterSid'
        - $ref: '#/components/parameters/inQueryRid'
        - $ref: '#/components/parameters/inQueryStateOnly'
        - $ref: '#/components/parameters/inQuerySlaves'
        - $ref: '#/components/parameters/inQuerySubset'
        - $ref: '#/components/parameters/inQueryTag'
        - $ref: '#/components/parameters/inQueryTo'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceActionAccepted'
          description: OK
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      security:
        - basicAuth: []
        - bearerAuth: []
      tags:
        - node / instance / svc
        - node / instance / vol

  /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/config/file:
    get:
      description: |
        Return the object configuration file from nodename. If nodename is not the local node, do proxy.
      operationId: GetInstanceConfigFile
      tags:
        - node / instance / svc
        - node / instance / vol
        - node / instance / cfg
        - node / instance / sec
        - node / instance / usr
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
      responses:
        200:
          description: OK
          headers:
            x-last-modified-rfc3339nano:
              type: string
              format: date-time
              pattern: '^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d{1,9})?Z?$'
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

  /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/clear:
    post:
      description: |
        Clear an error ("start failed" for example) in the instance monitor state.
      operationId: PostInstanceClear
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
      responses:
        200:
          description: OK
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      security:
        - basicAuth: []
        - bearerAuth: []
      tags:
        - node / instance / svc
        - node / instance / vol
        - node / instance / cfg
        - node / instance / sec
        - node / instance / usr

  /api/node/name/{nodename}/log:
    get:
      operationId: GetNodeLogs
      tags:
        - node
      security:
        - basicAuth: []
        - bearerAuth: []
      description: |
        Serve new logs
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
        - $ref: '#/components/parameters/LogFilter'
        - $ref: '#/components/parameters/LogFollow'
        - $ref: '#/components/parameters/LogLines'
        - $ref: '#/components/parameters/Paths'
      responses:
        200:
          description: OK
          content:
            text/event-stream:
              schema:
                $ref: '#/components/schemas/LogList'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

  /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/resource/info:
    get:
      operationId: GetInstanceResourceInfo
      description: |
        Return the resource info table of the object instance.
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInfoList'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      security:
        - basicAuth: []
        - bearerAuth: []
      tags:
        - node / instance / svc
        - node / instance / vol

  /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/schedule:
    get:
      operationId: GetInstanceSchedule
      description: |
        Return the schedule table of the object instance.
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleList'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
      security:
        - basicAuth: []
        - bearerAuth: []
      tags:
        - node / instance / svc
        - node / instance / vol

  /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/log:
    get:
      operationId: GetInstanceLogs
      tags:
        - node / instance / svc
        - node / instance / vol
        - node / instance / cfg
        - node / instance / sec
        - node / instance / usr
      security:
        - basicAuth: []
        - bearerAuth: []
      description: |
        Serve new logs
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
        - $ref: '#/components/parameters/LogFilter'
        - $ref: '#/components/parameters/LogFollow'
        - $ref: '#/components/parameters/LogLines'
      responses:
        200:
          description: OK
          content:
            text/event-stream:
              schema:
                $ref: '#/components/schemas/LogList'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

  /api/node/name/{nodename}/ping:
    get:
      description: |
        ask node to ping all cluster nodes.
      operationId: GetNodePing
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
      responses:
        204:
          $ref: '#/components/responses/204'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      security:
        - basicAuth: [ ]
        - bearerAuth: [ ]
      tags:
        - node

  /api/node/name/{nodename}/system/disk:
    get:
      description: View the disk
      operationId: GetNodeSystemDisk
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiskList'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      security:
        - basicAuth: [ ]
        - bearerAuth: [ ]
      tags:
        - node

  /api/node/name/{nodename}/system/group:
    get:
      description: View the group
      operationId: GetNodeSystemGroup
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupList'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      security:
        - basicAuth: [ ]
        - bearerAuth: [ ]
      tags:
        - node

  /api/node/name/{nodename}/system/package:
    get:
      description: View the package
      operationId: GetNodeSystemPackage
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PackageList'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      security:
        - basicAuth: [ ]
        - bearerAuth: [ ]
      tags:
        - node

  /api/node/name/{nodename}/system/patch:
    get:
      description: View the patch
      operationId: GetNodeSystemPatch
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatchList'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      security:
        - basicAuth: [ ]
        - bearerAuth: [ ]
      tags:
        - node

  /api/node/name/{nodename}/system/hardware:
    get:
      description: View the hardwares
      operationId: GetNodeSystemHardware
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HardwareList'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      security:
        - basicAuth: [ ]
        - bearerAuth: [ ]
      tags:
        - node

  /api/node/name/{nodename}/system/ipaddress:
    get:
      description: View the group
      operationId: GetNodeSystemIPAddress
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IPAddressList'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      security:
        - basicAuth: [ ]
        - bearerAuth: [ ]
      tags:
        - node

  /api/node/name/{nodename}/system/property:
    get:
      description: View the property
      operationId: GetNodeSystemProperty
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyList'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      security:
        - basicAuth: [ ]
        - bearerAuth: [ ]
      tags:
        - node

  /api/node/name/{nodename}/system/san/initiator:
    get:
      description: View the initiator
      operationId: GetNodeSystemSANInitiator
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SANPathInitiatorList'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      security:
        - basicAuth: [ ]
        - bearerAuth: [ ]
      tags:
        - node

  /api/node/name/{nodename}/system/san/path:
    get:
      description: View the targets
      operationId: GetNodeSystemSANPath
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SANPathList'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      security:
        - basicAuth: [ ]
        - bearerAuth: [ ]
      tags:
        - node

  /api/node/name/{nodename}/system/user:
    get:
      description: View the users
      operationId: GetNodeSystemUser
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      security:
        - basicAuth: [ ]
        - bearerAuth: [ ]
      tags:
        - node

  /api/instance/path/{namespace}/{kind}/{name}/progress:
    post:
      description: |
        For internal use only.

        Used by the CRM to annonce to the daemon the action it is starting to process, if this action was not triggered by the daemon.
      operationId: PostInstanceProgress
      tags:
        - instance
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
      requestBody:
        description: Change the instance monitor state to reflect the progress of actions the daemon did not started.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostInstanceProgress'
      responses:
        200:
          description: OK
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      x-internal: true

  /api/instance/path/{namespace}/{kind}/{name}/status:
    post:
      description: |
        For internal use only.

        Used by the CRM to annonce to the daemon the status of the instance at the end of an action.
      operationId: PostInstanceStatus
      tags:
        - instance
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
      requestBody:
        description: post object status
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstanceStatus'
      responses:
        200:
          description: OK
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

  /api/object/path:
    get:
      description: |
        Return the list of object paths matching the selector expression given by the path parameter.
      operationId: GetObjectPaths
      tags:
        - object
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Path'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectPaths'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

  /api/object/path/{namespace}/{kind}/{name}:
    get:
      operationId: GetObject
      tags:
        - object / svc
        - object / vol
        - object / cfg
        - object / sec
        - object / usr
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectItem'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

  /api/object/path/{namespace}/{kind}/{name}/action/abort:
    post:
      operationId: PostObjectActionAbort
      tags:
        - object / svc
        - object / vol
        - object / cfg
        - object / sec
        - object / usr
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrchestrationQueued'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        408:
          $ref: '#/components/responses/408'
        409:
          $ref: '#/components/responses/409'
        500:
          $ref: '#/components/responses/500'

  /api/object/path/{namespace}/{kind}/{name}/action/delete:
    post:
      operationId: PostObjectActionDelete
      tags:
        - object / svc
        - object / vol
        - object / cfg
        - object / sec
        - object / usr
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrchestrationQueued'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        408:
          $ref: '#/components/responses/408'
        409:
          $ref: '#/components/responses/409'
        500:
          $ref: '#/components/responses/500'

  /api/object/path/{namespace}/svc/{name}/disable:
    post:
      operationId: PostSvcDisable
      tags:
        - object / svc
      security:
        - basicAuth: []
        - bearerAuth: []
      description: Disable the whole svc or some of its resources.
      parameters:
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathName'
        - $ref: '#/components/parameters/inQueryRid'
        - $ref: '#/components/parameters/inQuerySubset'
        - $ref: '#/components/parameters/inQueryTag'
      responses:
        204:
          $ref: '#/components/responses/204'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

  /api/object/path/{namespace}/svc/{name}/enable:
    post:
      operationId: PostSvcEnable
      tags:
        - object / svc
      security:
        - basicAuth: []
        - bearerAuth: []
      description: Enable the whole svc or some of its resources.
      parameters:
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathName'
        - $ref: '#/components/parameters/inQueryRid'
        - $ref: '#/components/parameters/inQuerySubset'
        - $ref: '#/components/parameters/inQueryTag'
      responses:
        204:
          $ref: '#/components/responses/204'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

  /api/object/path/{namespace}/{kind}/{name}/action/freeze:
    post:
      operationId: PostObjectActionFreeze
      tags:
        - object / svc
        - object / vol
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrchestrationQueued'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        408:
          $ref: '#/components/responses/408'
        409:
          $ref: '#/components/responses/409'
        500:
          $ref: '#/components/responses/500'

  /api/object/path/{namespace}/{kind}/{name}/action/giveback:
    post:
      operationId: PostObjectActionGiveback
      tags:
        - object / svc
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrchestrationQueued'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        408:
          $ref: '#/components/responses/408'
        409:
          $ref: '#/components/responses/409'
        500:
          $ref: '#/components/responses/500'

  /api/object/path/{namespace}/{kind}/{name}/action/provision:
    post:
      operationId: PostObjectActionProvision
      tags:
        - object / svc
        - object / vol
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrchestrationQueued'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        408:
          $ref: '#/components/responses/408'
        409:
          $ref: '#/components/responses/409'
        500:
          $ref: '#/components/responses/500'

  /api/object/path/{namespace}/{kind}/{name}/data/keys:
    get:
      description: |
        List the keys in the key-value store.
      operationId: GetObjectDataKeys
      tags:
        - object / cfg
        - object / sec
        - object / usr
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataKeyList'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'

  /api/object/path/{namespace}/{kind}/{name}/data/key:
    get:
      description: |
        Return a single key value as the response body.
      operationId: GetObjectDataKey
      tags:
        - object / cfg
        - object / sec
        - object / usr
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
        - $ref: '#/components/parameters/inQueryKeyName'
      responses:
        200:
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

    delete:
      description: |
        Delete a key from the key-value store.
      operationId: DeleteObjectDataKey
      tags:
        - object / cfg
        - object / sec
        - object / usr
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
        - $ref: '#/components/parameters/inQueryKeyName'
      responses:
        204:
          $ref: '#/components/responses/204'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

    post:
      description: |
        Create a new key in the key-value store.
      operationId: PostObjectDataKey
      tags:
        - object / cfg
        - object / sec
        - object / usr
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
        - $ref: '#/components/parameters/inQueryKeyName'
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        204:
          $ref: '#/components/responses/204'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

    put:
      description: |
        Change the value of an existing key in the key-value store.
      operationId: PutObjectDataKey
      tags:
        - object / cfg
        - object / sec
        - object / usr
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
        - $ref: '#/components/parameters/inQueryKeyName'
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        204:
          $ref: '#/components/responses/204'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

  /api/object/path/{namespace}/{kind}/{name}/data:
    get:
      description: |
        Return a structured list of key and values objects.
      operationId: GetObjectData
      tags:
        - object / cfg
        - object / sec
        - object / usr
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
        - $ref: '#/components/parameters/inQueryKeyNames'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataKeys'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
    patch:
      description: |
        A single-transaction combination of add, change or delete operations on the key-value store keys.
      operationId: PatchObjectData
      tags:
        - object / cfg
        - object / sec
        - object / usr
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchDataKeys'
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
      responses:
        204:
          $ref: '#/components/responses/204'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        408:
          $ref: '#/components/responses/408'
        409:
          $ref: '#/components/responses/409'
        500:
          $ref: '#/components/responses/500'

  /api/object/path/{namespace}/{kind}/{name}/resource/info:
    get:
      operationId: GetObjectResourceInfo
      description: |
        Return the resource info table of all object instances.
      parameters:
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInfoList'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      security:
        - basicAuth: []
        - bearerAuth: []
      tags:
        - object / svc
        - object / vol

  /api/object/path/{namespace}/{kind}/{name}/schedule:
    get:
      operationId: GetObjectSchedule
      description: |
        Return the schedule table of all the object instances.
      parameters:
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleList'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
      security:
        - basicAuth: []
        - bearerAuth: []
      tags:
        - object / svc
        - object / vol

  /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/prstart:
    post:
      description: |
        Register and reserve the instance scsi devices using the node key.
      operationId: PostInstanceActionPRStart
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
        - $ref: '#/components/parameters/inQueryAllSlaves'
        - $ref: '#/components/parameters/inQueryDisableRollback'
        - $ref: '#/components/parameters/inQueryForce'
        - $ref: '#/components/parameters/inQueryMaster'
        - $ref: '#/components/parameters/inQueryRequesterSid'
        - $ref: '#/components/parameters/inQueryRid'
        - $ref: '#/components/parameters/inQuerySlaves'
        - $ref: '#/components/parameters/inQuerySubset'
        - $ref: '#/components/parameters/inQueryTag'
        - $ref: '#/components/parameters/inQueryTo'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceActionAccepted'
          description: OK
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      security:
        - basicAuth: []
        - bearerAuth: []
      tags:
        - node / instance / svc
        - node / instance / vol

  /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/prstop:
    post:
      description: |
        Drop reservations and registrations held by the node key on the instance scsi devices.
      operationId: PostInstanceActionPRStop
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
        - $ref: '#/components/parameters/inQueryAllSlaves'
        - $ref: '#/components/parameters/inQueryDisableRollback'
        - $ref: '#/components/parameters/inQueryForce'
        - $ref: '#/components/parameters/inQueryMaster'
        - $ref: '#/components/parameters/inQueryRequesterSid'
        - $ref: '#/components/parameters/inQueryRid'
        - $ref: '#/components/parameters/inQuerySlaves'
        - $ref: '#/components/parameters/inQuerySubset'
        - $ref: '#/components/parameters/inQueryTag'
        - $ref: '#/components/parameters/inQueryTo'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceActionAccepted'
          description: OK
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      security:
        - basicAuth: []
        - bearerAuth: []
      tags:
        - node / instance / svc
        - node / instance / vol


  /api/object/path/{namespace}/{kind}/{name}/action/purge:
    post:
      description: |
        Unprovision resources and delete the object.
        Disk and fs resources hold data. Beware, unprovision usually deletes the data.
        Purging a svc does not purge the vol objects used by the svc.
      operationId: PostObjectActionPurge
      tags:
        - object / svc
        - object / vol
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrchestrationQueued'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        408:
          $ref: '#/components/responses/408'
        409:
          $ref: '#/components/responses/409'
        500:
          $ref: '#/components/responses/500'

  /api/object/path/{namespace}/{kind}/{name}/action/restart:
    post:
      operationId: PostObjectActionRestart
      tags:
        - object / svc
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostObjectActionRestart'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrchestrationQueued'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        408:
          $ref: '#/components/responses/408'
        409:
          $ref: '#/components/responses/409'
        500:
          $ref: '#/components/responses/500'

  /api/object/path/{namespace}/{kind}/{name}/action/start:
    post:
      operationId: PostObjectActionStart
      tags:
        - object / svc
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrchestrationQueued'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        408:
          $ref: '#/components/responses/408'
        409:
          $ref: '#/components/responses/409'
        500:
          $ref: '#/components/responses/500'

  /api/object/path/{namespace}/{kind}/{name}/action/stop:
    post:
      operationId: PostObjectActionStop
      tags:
        - object / svc
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrchestrationQueued'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        408:
          $ref: '#/components/responses/408'
        409:
          $ref: '#/components/responses/409'
        500:
          $ref: '#/components/responses/500'

  /api/object/path/{namespace}/{kind}/{name}/action/switch:
    post:
      operationId: PostObjectActionSwitch
      tags:
        - object / svc
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostObjectActionSwitch'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrchestrationQueued'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        408:
          $ref: '#/components/responses/408'
        409:
          $ref: '#/components/responses/409'
        500:
          $ref: '#/components/responses/500'

  /api/object/path/{namespace}/{kind}/{name}/action/unfreeze:
    post:
      description: |
        Allow automatic failover of svc with `orchestrate=ha`.
        Allow the quorum vote for this node.
        Allow the monitor action when `monitor=true` resources are degraded and not restartable.
      operationId: PostObjectActionUnfreeze
      tags:
        - object / svc
        - object / vol
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrchestrationQueued'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        408:
          $ref: '#/components/responses/408'
        409:
          $ref: '#/components/responses/409'
        500:
          $ref: '#/components/responses/500'

  /api/object/path/{namespace}/{kind}/{name}/action/unprovision:
    post:
      description: |
        Unprovision resources and keep the object configuration.
        Disk and fs resources hold data. Beware, unprovision usually deletes the data.
        Unprovisioning a svc does not unprovision the vol objects used by the svc.
      operationId: PostObjectActionUnprovision
      tags:
        - object / svc
        - object / vol
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrchestrationQueued'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        408:
          $ref: '#/components/responses/408'
        409:
          $ref: '#/components/responses/409'
        500:
          $ref: '#/components/responses/500'

  /api/object/path/{namespace}/{kind}/{name}/config:
    get:
      operationId: GetObjectConfig
      tags:
        - object / svc
        - object / vol
        - object / cfg
        - object / sec
        - object / usr
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
        - $ref: '#/components/parameters/inQueryEvaluate'
        - $ref: '#/components/parameters/inQueryImpersonate'
        - $ref: '#/components/parameters/inQueryKeywords'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeywordList'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
    patch:
      operationId: PatchObjectConfig
      tags:
        - object / svc
        - object / vol
        - object / cfg
        - object / sec
        - object / usr
      security:
        - basicAuth: []
        - bearerAuth: []
      description: Delete sections, unset and set keywords in the object configuration file.
      parameters:
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
        - $ref: '#/components/parameters/inQueryDeletes'
        - $ref: '#/components/parameters/inQueryUnsets'
        - $ref: '#/components/parameters/inQuerySets'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Committed'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'


  /api/object/path/{namespace}/{kind}/{name}/config/file:
    get:
      description: |
        Return the object configuration file from any node with a deployed instance. Look for the configuration file on the local node first. If the local node has no instance of the object, do proxy.
      operationId: GetObjectConfigFile
      tags:
        - object / svc
        - object / vol
        - object / cfg
        - object / sec
        - object / usr
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
      responses:
        200:
          description: OK
          headers:
            x-last-modified-rfc3339nano:
              type: string
              format: date-time
              pattern: '^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d{1,9})?Z?$'
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
    post:
      operationId: PostObjectConfigFile
      tags:
        - object / svc
        - object / vol
        - object / cfg
        - object / sec
        - object / usr
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
      requestBody:
        description: OK
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        204:
          $ref: '#/components/responses/204'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        409:
          $ref: '#/components/responses/409'
        500:
          $ref: '#/components/responses/500'
    put:
      operationId: PutObjectConfigFile
      tags:
        - object / svc
        - object / vol
        - object / cfg
        - object / sec
        - object / usr
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
      requestBody:
        description: OK
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        204:
          $ref: '#/components/responses/204'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        409:
          $ref: '#/components/responses/409'
        500:
          $ref: '#/components/responses/500'

  /api/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/state/file:
    post:
      operationId: PostInstanceStateFile
      tags:
        - node / instance / svc
        - node / instance / vol
      security:
        - basicAuth: []
        - bearerAuth: []
      headers:
        x-relative-path:
          type: string
      parameters:
        - $ref: '#/components/parameters/inPathNodeName'
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
      requestBody:
        description: OK
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        204:
          $ref: '#/components/responses/204'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        409:
          $ref: '#/components/responses/409'
        500:
          $ref: '#/components/responses/500'

  /api/pool:
    get:
      operationId: GetPools
      tags:
        - pool
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
      - in: query
        name: name
        description: the name of a backend storage pool
        required: false
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PoolList'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

  /api/pool/volume:
    get:
      operationId: GetPoolVolumes
      tags:
        - pool
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
      - in: query
        name: name
        description: the name of a backend storage pool
        required: false
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PoolVolumeList'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

  /api/relay/status:
    get:
      description: |
        Get messages of all relays used by the responding node.
        The login/password used to fetch information are the same the heartbeats use.
      operationId: GetRelayStatus
      tags:
        - relay
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Relays'
        - $ref: '#/components/parameters/RelayRemote'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelayStatusList'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

  /api/relay/message:
    get:
      operationId: GetRelayMessage
      tags:
        - relay
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/RelayNodename'
        - $ref: '#/components/parameters/RelayClusterID'
        - $ref: '#/components/parameters/RelayUsername'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelayMessage'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
    post:
      operationId: PostRelayMessage
      tags:
        - relay
      security:
        - basicAuth: []
        - bearerAuth: []
      requestBody:
        description: post a node dataset from a relay heartbeat
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostRelayMessage'
      responses:
        200:
          $ref: '#/components/responses/200'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

  /api/resource:
    get:
      operationId: GetResources
      tags:
        - resource
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PathOptional'
        - $ref: '#/components/parameters/NodeOptional'
        - $ref: '#/components/parameters/RidOptional'
      responses:
        200:
          description: get resource config, monitor and status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceList'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

  /api/openapi:
    get:
      operationId: GetSwagger
      tags:
        - public
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

components:
  schemas:
    ArbitratorStatus:
      type: object
      required:
        - url
        - status
      properties:
        url:
          type: string
        status:
          $ref: '#/components/schemas/Status'
    AuthInfo:
      type: object
      required:
        - methods
      properties:
        methods :
          type: array
          items:
            type: string
            enum:
              - openid
              - basic
              - x509
              - session
        openid:
          required:
            - issuer
            - client_id
          properties:
            issuer:
              type: string
            client_id:
              type: string
    AuthToken:
      type: object
      required:
        - expired_at
        - token
      properties:
        expired_at:
          type: string
          format: date-time
        token:
          type: string

    CapabilityList:
      type: object
      required:
        - kind
        - items
      properties:
        kind:
          type: string
          enum:
            - CapabilityList
        items:
          $ref: '#/components/schemas/CapabilityItems'
    KeywordDefinitionList:
      type: object
      required:
        - kind
        - items
      properties:
        kind:
          type: string
          enum:
            - KeywordDefinitionList
        items:
          $ref: '#/components/schemas/KeywordDefinitionItems'

    CapabilityItems:
      type: array
      items:
        $ref: '#/components/schemas/CapabilityItem'
    KeywordDefinitionItems:
      type: array
      items:
        $ref: '#/components/schemas/KeywordDefinitionItem'

    CapabilityItem:
      type: object
      required:
        - kind
        - meta
        - data
      properties:
        kind:
          type: string
          enum:
            - CapabilityItem
        meta:
          $ref: '#/components/schemas/NodeMeta'
        data:
          $ref: '#/components/schemas/Capability'
    KeywordDefinitionItem:
      type: object
      required:
        - section
        - option
      properties:
        section:
          type: string
        option:
          type: string
        scopable:
          type: boolean
        converter:
          type: string
        text:
          type: string
        defaultText:
          type: string
        example:
          type: string
        default:
          type: string
        defaultOption:
          type: string
        candidates:
          type: array
          items:
            type: string
        depends:
          type : array
          items:
            type: string
        kind:
          type: array
          items:
            type: string
        provisioning:
          type: boolean
        types:
          type: array
          items:
            type: string
        aliases:
          type: array
          items:
            type: string
        inherit:
          type: string
        deprecated:
          type: string

    Capability:
      type: object
      required:
        - name
      properties:
        name:
          type: string

    Cluster:
      type: object
      required:
        - config
        - node
        - object
        - status
      properties:
        config:
          $ref: '#/components/schemas/ClusterConfig'
        node:
          $ref: '#/components/schemas/ClusterNode'
        object:
          $ref: '#/components/schemas/ClusterObject'
        status:
          $ref: '#/components/schemas/ClusterStatus'

    ClusterConfig:
      type: object

    ClusterNode:
      type: object

    ClusterObject:
      type: object

    ClusterStatus:
      type: object

    Committed:
      type: object
      required:
        - is_changed
      properties:
        is_changed:
          type: boolean

    Daemon:
      type: object
      required:
        - nodename
        - pid
        - daemondata
        - collector
        - dns
        - heartbeat
        - listener
        - monitor
        - imon_runner
        - scheduler
        - started_at
      properties:
        nodename:
          type: string
        pid:
          type: integer
          description: the main daemon process id
        daemondata:
          $ref: '#/components/schemas/DaemonDaemondata'
        collector:
          $ref: '#/components/schemas/DaemonCollector'
        dns:
          $ref: '#/components/schemas/DaemonDns'
        heartbeat:
          $ref: '#/components/schemas/DaemonHeartbeat'
        listener:
          $ref: '#/components/schemas/DaemonListener'
        runner_imon:
          $ref: '#/components/schemas/DaemonRunnerImon'
        scheduler:
          $ref: '#/components/schemas/DaemonScheduler'
        started_at:
          type: string
          format: date-time

    DaemonLocal:
      type: object
      required:
        - nodename
        - routines
      properties:
        nodename:
          type: string
        routines:
          type: integer

    DaemonCollector:
      description: |
        DaemonCollector describes the OpenSVC daemon collector subsystem state,
        which is responsible for communicating with the collector on behalf
        of the cluster. Only one node on the cluster is the collector speaker
      allOf:
        - $ref: '#/components/schemas/DaemonSubsystemStatus'
        - type: object
          properties:
            url:
              type: string
          required:
            - url

    DaemonDaemondata:
      description: |
        DaemonDaemondata describes the OpenSVC daemon data subsystem state,
        which is responsible for aggregating data messages and selecting
        candidate data messages to forward to peer nodes.
      allOf:
        - $ref: '#/components/schemas/DaemonSubsystemStatus'
        - type: object
          properties:
            queue_size:
              type: integer
              description: the subscription queue size
          required:
            - queue_size

    DaemonDns:
      description: |
        DaemonDNS describes the OpenSVC daemon dns subsystem state, which is 
        responsible for janitoring and serving the cluster Dns zone.
        This zone is dynamically populated by ip address allocated for the 
        services (frontend and backend).
      allOf:
        - $ref: '#/components/schemas/DaemonSubsystemStatus'
        - type: object
          properties:
            nameservers:
              type: array
              items:
                type: string
              description: list of nameservers
          required:
            - nameservers

    DaemonHeartbeat:
      type: object
      required:
        - streams
        - last_message
        - last_messages
        - updated_at
      properties:
        streams:
          type: array
          description: |
            list of sending or receiving heartbeats:
              - a sending daemon heartbeat is responsible for sending node dataset
                changes to peers
              - a receiving daemon heartbeat is responsible for receiving node dataset
                changes from peers
          items:
            $ref: '#/components/schemas/DaemonHeartbeatStream'
        last_message:
          description: The last message mode sent by node
          $ref: '#/components/schemas/DaemonHeartbeatLastMessage'
        last_messages:
          type: array
          items:
            $ref: '#/components/schemas/DaemonHeartbeatLastMessage'
        updated_at:
          type: string
          format: date-time

    DaemonHeartbeatLastMessage:
      type: object
      description: describe the hb messaging mode
      required:
        - from
        - type
        - patch_length
      properties:
        from:
          type: string
          description: a cluster node
        patch_length:
          type: integer
          description: the patch queue length when type is patch, else it is 0
        type:
          type: string
          description: the heartbeat message type used by node
          enum:
            - unset
            - ping
            - full
            - patch

    DaemonHeartbeatName:
      type: string
      example: 1.rx
      description: Heartbeat name, example '1.rx' for heartbeat receiver of 'hb#1' section

    DaemonHeartbeatStream:
      allOf:
        - $ref: '#/components/schemas/DaemonSubsystemStatus'
        - $ref: '#/components/schemas/DaemonHeartbeatStreamType'
        - $ref: '#/components/schemas/DaemonHeartbeatStreamPeers'

    DaemonHeartbeatStreamType:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          description: heartbeat stream type (unicast, multicast, ...)
          example: unicast

    DaemonHeartbeatStreamPeers:
      type: object
      required:
        - peers
      properties:
        peers:
          type: object
          description: map of peer names to daemon heartbeat stream peer status
          additionalProperties:
            $ref: '#/components/schemas/DaemonHeartbeatStreamPeerStatus'

    DaemonHeartbeatStreamPeerStatus:
      type: object
      description: status of the communication with a specific peer node.
      required:
        - is_beating
        - last_at
      properties:
        is_beating:
          type: boolean
        last_at:
          type: string
          format: date-time

    DaemonListener:
      description: |
        DaemonListener describes the OpenSVC daemon listener subsystem state,
        which is responsible for serving the API.
      allOf:
        - $ref: '#/components/schemas/DaemonSubsystemStatus'
        - type: object
          properties:
            addr:
              type: string
            port:
              type: string
          required:
            - addr
            - port

    DaemonListenerName:
      type: string
      example: http-inet
      description: Listener name

    DaemonPid:
      type: object
      required:
        - pid
      properties:
        pid:
          type: integer

    DaemonRunnerImon:
      allOf:
        - $ref: '#/components/schemas/DaemonSubsystemStatus'
        - type: object
          properties:
            max_running:
              type: integer
          required:
            - max_running

    DaemonScheduler:
      description: |
        DaemonScheduler describes the OpenSVC daemon scheduler subsystem state,
        which is responsible for executing node and objects scheduled jobs.
      allOf:
        - $ref: '#/components/schemas/DaemonSubsystemStatus'
        - type: object
          required:
            - count
            - max_running
          properties:
            count:
              type: integer
              description: count of defined scheduled jobs
            max_running:
              type: integer
              description: maximum number of running jobs

    DaemonSubsystemStatus:
      type: object
      required:
        - configured_at
        - created_at
        - updated_at
        - id
        - state
      description: |
        Describes a OpenSVC daemon subsystem: when it was last created, 
        configured an updated, what its current state is and its id.
      properties:
        configured_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        id:
          type: string
          x-go-name: ID
        state:
          type: string

    DiskList:
      type: object
      required:
        - kind
        - items
      properties:
          kind:
            type: string
            enum:
              - DiskList
          items:
            $ref: '#/components/schemas/DiskItems'

    DiskItems:
      type: array
      items:
        $ref: '#/components/schemas/DiskItem'

    DiskItem:
      type: object
      required:
        - kind
        - data
        - meta
      properties:
        kind:
          type: string
          enum:
            - DiskItem
        data:
          $ref: '#/components/schemas/Disk'
        meta:
          $ref: '#/components/schemas/NodeMeta'

    Disk:
      type: object
      required:
        - id
        - devpath
        - size
        - vendor
        - model
        - type
        - regions
      properties:
        id:
          type: string
          x-go-name: ID
        devpath:
          type: string
        size:
          type: integer
          format: uint64
        vendor:
          type: string
        model:
          type: string
        type:
          type: string
        regions:
          type: array
          items:
            $ref: '#/components/schemas/Region'

    Region:
      type: object
      required:
        - id
        - devpath
        - object
        - size
        - group
      properties:
        id:
          type: string
          x-go-name: ID
        devpath:
          type: string
        object:
          type: string
        size:
          type: integer
          format: uint64
        group:
          type: string

    DNSRecord:
      type: object
      required:
        - name
        - type
        - class
        - ttl
        - data
      properties:
        name:
          type: string
        type:
          type: string
        class:
          type: string
        ttl:
          type: integer
        data:
          type: string

    DNSZone:
      type: array
      items:
        $ref: '#/components/schemas/DNSRecord'

    DRBDAllocation:
      type: object
      required:
        - port
        - minor
        - expired_at
        - id
      properties:
        id:
          type: string
          format: uuid
          x-go-name: ID
        port:
          type: integer
        minor:
          type: integer
        expired_at:
          type: string
          format: date-time

    DriverList:
      type: object
      required:
        - kind
        - items
      properties:
          kind:
            type: string
            enum:
              - DriversList
          items:
            $ref: '#/components/schemas/DriverItems'

    DriverItems:
      type: array
      items:
        $ref: '#/components/schemas/DriverItem'

    DriverItem:
      type: object
      required:
        - kind
        - data
        - meta
      properties:
        kind:
          type: string
          enum:
            - DriversItem
        data:
          $ref: '#/components/schemas/Driver'
        meta:
          $ref: '#/components/schemas/NodeMeta'

    Driver:
      type: object
      required:
        - name
      properties:
        name:
          type: string

    GroupList:
      type: object
      required:
        - kind
        - items
      properties:
        kind:
          type: string
          enum:
            - GroupList
        items:
          $ref: '#/components/schemas/GroupItems'

    GroupItems:
      type: array
      items:
        $ref: '#/components/schemas/GroupItem'

    GroupItem:
      type: object
      required:
        - kind
        - data
        - meta
      properties:
        kind:
          type: string
          enum:
            - GroupItem
        data:
          $ref: '#/components/schemas/Group'
        meta:
          $ref: '#/components/schemas/NodeMeta'

    Group:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          x-go-name: ID
        name:
          type: string

    HardwareList:
      type: object
      required:
        - kind
        - items
      properties:
        kind:
          type: string
          enum:
            - HardwareList
        items:
          $ref: '#/components/schemas/HardwareItems'

    HardwareItems:
      type: array
      items:
        $ref: '#/components/schemas/HardwareItem'

    HardwareItem:
      type: object
      required:
        - kind
        - data
        - meta
      properties:
        kind:
          type: string
          enum:
            - HardwareItem
        data:
          $ref: '#/components/schemas/Hardware'
        meta:
          $ref: '#/components/schemas/NodeMeta'

    Hardware:
      type: object
      required:
        - path
        - description
        - class
        - driver
        - type
      properties:
        path:
          type: string
        description:
          type: string
        class:
          type: string
        driver:
          type: string
        type:
          type: string

    InstanceMeta:
      type: object
      required:
        - object
        - node
      properties:
        object:
          type: string
        node:
          type: string

    InstanceConfig:
      x-go-type: instance.Config
      x-go-type-import:
          path: github.com/opensvc/om3/core/instance
      type: object
      required:
        - app
        - checksum
        - children
        - drp
        - env
        - flex_max
        - flex_min
        - flex_target
        - monitor_action
        - pre_monitor_action
        - nodename
        - orchestrate
        - path
        - parents
        - placement_policy
        - priority
        - resources
        - scope
        - subsets
        - topology
        - updated_at
      properties:
        app:
          type: string
        checksum:
          type: string
        children:
          type: array
          items:
            type: string
        drp:
          type: boolean
        env:
          type: string
        flex_max:
          type: integer
        flex_min:
          type: integer
        flex_target:
          type: integer
        monitor_action:
          type: array
          items:
            type: string
        pre_monitor_action:
          type: string
        nodename:
          type: string
        orchestrate:
          $ref: '#/components/schemas/Orchestrate'
        path:
          type: string
        parents:
          type: array
          items:
            type: string
        pool:
          type: string
        placement_policy:
          $ref: '#/components/schemas/PlacementPolicy'
        priority:
          type: integer
        resources:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ResourceConfig'
        scope:
          type: array
          items:
            type: string
        size:
          type: integer
          format: int64
        subsets:
          $ref: '#/components/schemas/SubsetsConfig'
        topology:
          $ref: '#/components/schemas/Topology'
        updated_at:
          type: string
          format: date-time

    InstanceMonitor:
      x-go-type: instance.Monitor
      x-go-type-import:
          path: github.com/opensvc/om3/core/instance
      type: object
      required:
        - global_expect
        - global_expect_updated_at
        - global_expect_options
        - is_leader
        - is_ha_leader
        - local_expect
        - local_expect_updated_at
        - orchestration_id
        - orchestration_is_done
        - session_id
        - state
        - state_updated_at
        - monitor_action_executed_at
        - is_preserved
        - resources
        - updated_at
        - parents
        - children
      properties:
        global_expect:
          type: string
        global_expect_updated_at:
          type: string
          format: date-time
        global_expect_options:
          type: object
        is_leader:
          type: boolean
        is_ha_leader:
          type: boolean
        local_expect:
          type: string
        local_expect_updated_at:
          type: string
          format: date-time
        orchestration_id:
          type: string
          x-go-name: OrchestrationID
        orchestration_is_done:
          type: boolean
        session_id:
          type: string
          x-go-name: SessionID
        state:
          type: string
        state_updated_at:
          type: string
          format: date-time
        monitor_action_executed_at:
          type: string
          format: date-time
        is_preserved:
          type: boolean
        resources:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ResourceMonitor'
        updated_at:
          type: string
          format: date-time
        parents:
          type: object
        children:
          type: object

    InstanceStatus:
      x-go-type: instance.Status
      x-go-type-import:
          path: github.com/opensvc/om3/core/instance
      type: object
      required:
        - avail
        - csum
        - encap
        - frozen_at
        - last_started_at
        - optional
        - overall
        - is_preserved
        - provisioned
        - resources
        - running
        - scale
        - updated_at
      properties:
        avail:
          $ref: '#/components/schemas/Status'
        csum:
          type: string
        encap:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/InstanceStatus'
        frozen_at:
          type: string
          format: date-time
        last_started_at:
          type: string
          format: date-time
        optional:
          $ref: '#/components/schemas/Status'
        overall:
          $ref: '#/components/schemas/Status'
        is_preserved:
          type: boolean
          description: |
            preserve is true if this status has not been updated due to a
            heartbeat downtime covered by a maintenance period.
            when the maintenance period ends, the status should be unchanged,
            and preserve will be set to false.
          default: false
        provisioned:
          $ref: '#/components/schemas/Provisioned'
        resources:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ResourceStatus'
        running:
          type: array
          items:
            $ref: '#/components/schemas/RunningInfo'
        scale:
          type: integer
        updated_at:
          type: string
          format: date-time

    RunningInfo:
      type: object
      required:
        - rid
        - session_id
        - pid
        - at
      properties:
        at:
          type: string
          format: date-time
        rid:
          type: string
        session_id:
          type: string
        pid:
          type: integer

    IPAddressList:
      type: object
      required:
        - kind
        - items
      properties:
        kind:
          type: string
          enum:
            - IDAddressList
        items:
          $ref: '#/components/schemas/IPAddressItems'

    IPAddressItems:
      type: array
      items:
        $ref: '#/components/schemas/IPAddressItem'

    IPAddressItem:
      type: object
      required:
        - kind
        - data
        - meta
      properties:
        kind:
          type: string
          enum:
            - IPAddressItem
        data:
          $ref: '#/components/schemas/IPAddress'
        meta:
          $ref: '#/components/schemas/NodeMeta'

    IPAddress:
      type: object
      required:
        - mac
        - address
        - flagdeprecated
        - intf
        - mask
        - type
      properties:
        mac:
          type: string
        address:
          type: string
        flagdeprecated:
          type: boolean
          x-go-name: FlagDeprecated
        intf:
          type: string
        mask:
          type: string
        type:
          type: string

    KeywordList:
      type: object
      required:
        - kind
        - items
      properties:
        kind:
          type: string
          enum:
            - KeywordList
        items:
          $ref: '#/components/schemas/KeywordItems'

    KeywordItems:
      type: array
      items:
        $ref: '#/components/schemas/KeywordItem'

    KeywordItem:
      type: object
      required:
        - node
        - object
        - keyword
        - evaluated_as
        - value
      properties:
        evaluated:
          x-go-type: any
        node:
          type: string
        object:
          type: string
        value:
          type: string
        keyword:
          type: string
        evaluated_as:
          type: string

    Network:
      type: object
      required:
        - name
        - type
        - network
        - usage
        - free
        - used
        - size
      properties:
        name:
          type: string
        type:
          type: string
        network:
          type: string
        errors:
          type: array
          items:
            type: string
        free:
          type: integer
        used:
          type: integer
        size:
          type: integer

    PackageList:
      type: object
      required:
        - kind
        - items
      properties:
        kind:
          type: string
          enum:
            - PackageList
        items:
          $ref: '#/components/schemas/PackageItems'

    PackageItems:
      type: array
      items:
        $ref: '#/components/schemas/PackageItem'

    PackageItem:
      type: object
      required:
        - kind
        - data
        - meta
      properties:
        kind:
          type: string
          enum:
            - PackageItem
        data:
          $ref: '#/components/schemas/Package'
        meta:
          $ref: '#/components/schemas/NodeMeta'

    Package:
      type: object
      required:
        - name
        - version
        - arch
        - type
        - installedat
        - sig
      properties:
        name:
          type: string
        version:
          type: string
        arch:
          type: string
        type:
          type: string
        installedat:
          type: string
          format: data-time
          x-go-type: "time.Time"
          x-go-name: InstalledAt
        sig:
          type: string

    PatchList:
      type: object
      required:
        - kind
        - items
      properties:
        kind:
          type: string
          enum:
            - PatchList
        items:
          $ref: '#/components/schemas/PatchItems'

    PatchItems:
      type: array
      items:
        $ref: '#/components/schemas/PatchItem'

    PatchItem:
      type: object
      required:
        - kind
        - data
        - meta
      properties:
        kind:
          type: string
          enum:
            - PacthItem
        data:
          $ref: '#/components/schemas/Patch'
        meta:
          $ref: '#/components/schemas/NodeMeta'

    Patch:
      type: object
      required:
        - number
        - revision
        - installedat
      properties:
        number:
          type: string
        revision:
          type: string
        installedat:
          format: date-time
          x-go-type: "time.Time"
          x-go-name: InstalledAt

    PropertyList:
      type: object
      required:
        - kind
        - items
      properties:
        kind:
          type: string
          enum:
            - PropertyList
        items:
          $ref: '#/components/schemas/PropertyItems'

    PropertyItems:
      type: array
      items:
        $ref: '#/components/schemas/PropertyItem'

    PropertyItem:
      type: object
      required:
        - kind
        - meta
        - data
      properties:
        kind:
          type: string
        meta:
          $ref: '#/components/schemas/NodeMeta'
        data:
          $ref: '#/components/schemas/Property'

    Property:
      type: object
      required:
        - error
        - name
        - source
        - title
        - value
      properties:
        error:
          type: string
        name:
          type: string
        source:
          type: string
        title:
          type: string
        value: !!set
          type1: string
          type2: number
          type3: boolean

    NetworkIPNetwork:
      type: object
      required:
        - name
        - type
        - network
      properties:
        name:
          type: string
        type:
          type: string
        network:
          type: string

    NetworkList:
      type: object
      required:
        - items
        - kind
      properties:
        kind:
          type: string
          enum:
            - NetworkList
        items:
          $ref: '#/components/schemas/NetworkItems'

    NetworkItems:
      type: array
      items:
        $ref: '#/components/schemas/Network'

    NetworkIP:
      type: object
      required:
        - ip
        - node
        - path
        - rid
        - network
      properties:
        ip:
          type: string
          x-go-name: IP
        node:
          type: string
        path:
          type: string
        rid:
          type: string
          x-go-name: RID
        network:
          $ref: '#/components/schemas/NetworkIPNetwork'

    NetworkIPList:
      type: object
      required:
        - items
        - kind
      properties:
        kind:
          type: string
          enum:
            - NetworkIPList
        items:
          $ref: '#/components/schemas/NetworkIPItems'

    NetworkIPItems:
      type: array
      items:
        $ref: '#/components/schemas/NetworkIP'

    # ========================================================================
    # node schemas
    # ========================================================================

    NodeList:
      type: object
      required:
        - items
        - kind
      properties:
        kind:
          type: string
          enum:
            - NodeList
        items:
          $ref: '#/components/schemas/NodeItems'

    Node:
      type: object
      properties:
        config:
          $ref: '#/components/schemas/NodeConfig'
        monitor:
          $ref: '#/components/schemas/NodeMonitor'
        status:
          $ref: '#/components/schemas/NodeStatus'

    NodeActionAccepted:
      type: object
      properties:
        session_id:
          type: string
          format: uuid
          x-go-name: SessionID
      required:
        - session_id

    NodeItems:
      type: array
      items:
        $ref: '#/components/schemas/NodeItem'

    NodeItem:
      type: object
      required:
        - kind
        - meta
        - data
      properties:
        kind:
          type: string
          enum:
            - NodeItem
        meta:
          $ref: '#/components/schemas/NodeMeta'
        data:
          $ref: '#/components/schemas/Node'

    NodeConfig:
      x-go-type: node.Config
      x-go-type-import:
          path: github.com/opensvc/om3/core/node
      type: object
      required:
        - env
        - maintenance_grace_period
        - min_avail_mem
        - min_avail_swap
        - ready_period
        - rejoin_grace_period
        - split_action
      properties:
        env:
          type: string
        maintenance_grace_period:
          type: string
          format: duration
        min_avail_mem:
          type: integer
        min_avail_swap:
          type: integer
        ready_period:
          type: string
          format: duration
        rejoin_grace_period:
          type: string
          format: duration
        split_action:
          type: string

    NodeMonitor:
      x-go-type: node.Monitor
      x-go-type-import:
          path: github.com/opensvc/om3/core/node
      type: object
      required:
        - global_expect
        - global_expect_updated_at
        - local_expect
        - local_expect_updated_at
        - orchestration_id
        - orchestration_is_done
        - session_id
        - state
        - state_updated_at
        - updated_at
      properties:
        global_expect:
          type: string
        global_expect_updated_at:
          type: string
          format: date-time
        local_expect:
          type: string
        local_expect_updated_at:
          type: string
          format: date-time
        orchestration_id:
          type: string
          x-go-name: OrchestrationID
        orchestration_is_done:
          type: boolean
        session_id:
          type: string
          x-go-name: SessionID
        state:
          type: string
        state_updated_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    NodeStatus:
      x-go-type: node.Status
      x-go-type-import:
          path: github.com/opensvc/om3/core/node
      type: object
      required:
        - agent
        - api
        - arbitrators
        - compat
        - frozen_at
        - gen
        - is_leader
        - is_overloaded
        - labels
      properties:
        agent:
          type: string
        api:
          type: string
        arbitrators:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ArbitratorStatus'
        compat:
          type: boolean
        frozen_at:
          type: string
          format: date-time
        gen:
          additionalProperties:
            type: integer
        is_leader:
          type: boolean
        is_overloaded:
          type: boolean
        labels:
          type: object

    NodeInfo:
      x-go-type: node.NodeInfo
      x-go-type-import:
          path: github.com/opensvc/om3/core/node
      type: object
      required:
        - labels
        - nodename
        - paths
      properties:
        labels:
          type: array
          description: labels is the list of node labels.
          items:
            $ref: '#/components/schemas/NodeLabel'
        nodename:
          type: string
          description: nodename is the name of the node where the labels and paths are coming from.
        paths:
          type: array
          description: paths is the list of node to storage array san paths.
          items:
            $ref: '#/components/schemas/SANPath'

    NodeLabel:
      type: object
      required:
        - name
        - value
      properties:
        name:
          type: string
          description: name is the label name.
        value:
          type: string
          description: value is the label value.

    NodeMeta:
      type: object
      required:
        - node
      properties:
        node:
          type: string

    NodesInfo:
      x-go-type: node.NodesInfo
      x-go-type-import:
          path: github.com/opensvc/om3/core/node
      type: array
      items:
        $ref: '#/components/schemas/NodeInfo'

    # ========================================================================
    # object schemas
    # ========================================================================

    ObjectList:
      type: object
      required:
        - items
        - kind
      properties:
        kind:
          type: string
          enum:
            - ObjectList
        items:
          $ref: '#/components/schemas/ObjectItems'

    ObjectItems:
      type: array
      items:
        $ref: '#/components/schemas/ObjectItem'

    ObjectItem:
      type: object
      required:
        - kind
        - meta
        - data
      properties:
        kind:
          type: string
          enum:
            - ObjectItem
        meta:
          $ref: '#/components/schemas/ObjectMeta'
        data:
          $ref: '#/components/schemas/ObjectData'

    ObjectConfig:
      type: object
      required:
        - data
        - mtime
      properties:
        data:
          type: object
          additionalProperties: true
          x-go-type: orderedmap.OrderedMap
          x-go-type-import:
            path: github.com/iancoleman/orderedmap
        mtime:
          type: string
          format: date-time

    ObjectConfigFile:
      type: object
      required:
        - data
        - mtime
      properties:
        data:
          type: string
          format: byte
        mtime:
          type: string
          format: date-time

    ObjectMeta:
      type: object
      required:
        - object
      properties:
        object:
          type: string

    ObjectPaths:
      type: array
      items:
        type: string

    ObjectData:
      type: object
      required:
        - avail
        - flex_max
        - flex_min
        - flex_target
        - frozen
        - instances
        - orchestrate
        - overall
        - placement_policy
        - placement_state
        - priority
        - provisioned
        - scope
        - topology
        - up_instances_count
        - updated_at
      properties:
        avail:
          $ref: '#/components/schemas/Status'
        flex_max:
          type: integer
        flex_min:
          type: integer
        flex_target:
          type: integer
        frozen:
          type: string
        instances:
          $ref: '#/components/schemas/InstanceMap'
        orchestrate:
          $ref: '#/components/schemas/Orchestrate'
        overall:
          $ref: '#/components/schemas/Status'
        placement_policy:
          $ref: '#/components/schemas/PlacementPolicy'
        placement_state:
          $ref: '#/components/schemas/PlacementState'
        pool:
          type: string
        priority:
          type: integer
        provisioned:
          $ref: '#/components/schemas/Provisioned'
        scope:
          type: array
          items:
            type: string
        size:
          type: integer
          format: int64
        topology:
          $ref: '#/components/schemas/Topology'
        up_instances_count:
          type: integer
        updated_at:
          type: string

    Orchestrate:
      type: string
      enum:
        - ha
        - no
        - start
      default: no

    InstanceActionAccepted:
      type: object
      properties:
        session_id:
          type: string
          format: uuid
          x-go-name: SessionID
      required:
        - session_id

    OrchestrationQueued:
      type: object
      properties:
        orchestration_id:
          type: string
          format: uuid
          x-go-name: OrchestrationID
      required:
        - orchestration_id

    PathRelation:
      type: array
      items:
        type: string
        description: object path or an instance path (path@node)

    PlacementPolicy:
      type: string
      default: none
      description: object placement policy
      enum:
        - last start
        - load avg
        - nodes order
        - none
        - score
        - spread
        - shift

    PlacementState:
      type: string
      description: object placement state
      enum:
        - optimal
        - non-optimal
        - n/a
        - undef

    LogControlBody:
      type: object
      x-go-type: LogControl
      required:
        - level
      properties:
        level:
          type: string
          enum:
            - debug
            - info
            - warn
            - error
            - fatal
            - panic
            - none
          default: info

    DaemonSubNameBody:
      type: object
      required:
        - name
      properties:
        name:
          type: array
          description: List of daemon subsystem ids. Example for heartbeat is hb#myvalue.tx
          items:
            type: string

    PostNodeDRBDConfigRequest:
      type: object
      required:
        - allocation_id
        - data
      properties:
        allocation_id:
          type: string
          format: uuid
          x-go-name: AllocationID
        data:
          type: string
          format: byte

    PostInstanceProgress:
      type: object
      required:
        - session_id
        - state
      properties:
        session_id:
          type: string
          format: uuid
          x-go-name: SessionID
        state:
          type: string
        is_partial:
          type: boolean

    # ========================================================================
    # instance schemas
    # ========================================================================

    InstanceList:
      type: object
      required:
        - items
        - kind
      properties:
        kind:
          type: string
          enum:
            - InstanceList
        items:
          $ref: '#/components/schemas/InstanceItems'

    Instance:
      type: object
      properties:
        config:
          $ref: '#/components/schemas/InstanceConfig'
        monitor:
          $ref: '#/components/schemas/InstanceMonitor'
        status:
          $ref: '#/components/schemas/InstanceStatus'

    InstanceItems:
      type: array
      items:
        $ref: '#/components/schemas/InstanceItem'

    InstanceItem:
      type: object
      required:
        - kind
        - meta
        - data
      properties:
        kind:
          type: string
          enum:
            - InstanceItem
        meta:
          $ref: '#/components/schemas/InstanceMeta'
        data:
          $ref: '#/components/schemas/Instance'

    InstanceMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Instance'

    Kind:
      x-go-type: naming.Kind
      x-go-type-import:
          path: github.com/opensvc/om3/core/naming
      type: string
      enum:
        - svc
        - vol
        - cfg
        - sec
        - usr
        - nscfg
        - ccfg

    # ========================================================================
    # pool schemas
    # ========================================================================

    PoolList:
      type: object
      required:
        - items
        - kind
      properties:
        kind:
          type: string
          enum:
            - PoolList
        items:
          $ref: '#/components/schemas/PoolItems'

    PoolItems:
      type: array
      items:
        $ref: '#/components/schemas/Pool'

    Pool:
      type: object
      required:
        - name
        - type
        - head
        - capabilities
        - volume_count
        - free
        - used
        - size
      properties:
        name:
          type: string
        type:
          type: string
        head:
          type: string
        capabilities:
          type: array
          items:
            type: string
        errors:
          type: array
          items:
            type: string
        free:
          type: integer
          format: int64
        used:
          type: integer
          format: int64
        size:
          type: integer
          format: int64
        volume_count:
          type: integer

    # ========================================================================
    # pool volume schemas
    # ========================================================================

    PoolVolumeList:
      type: object
      required:
        - items
        - kind
      properties:
        kind:
          type: string
          enum:
            - PoolVolumeList
        items:
          $ref: '#/components/schemas/PoolVolumeItems'

    PoolVolumeItems:
      type: array
      items:
        $ref: '#/components/schemas/PoolVolume'

    PoolVolume:
      type: object
      required:
        - pool
        - path
        - children
        - is_orphan
        - size
      properties:
        pool:
          type: string
        path:
          type: string
        children:
          type: array
          items:
            type: string
        is_orphan:
          type: boolean
        size:
          type: integer
          format: int64

    PostObjectActionRestart:
      type: object
      properties:
        force:
          type: boolean

    PostObjectActionSwitch:
      type: object
      required:
        - destination
      properties:
        destination:
          type: array
          minItems: 1
          items:
            type: string

    PostRelayMessage:
      type: object
      required:
        - cluster_id
        - cluster_name
        - msg
        - nodename
      properties:
        cluster_id:
          type: string
          x-go-name: ClusterID
        cluster_name:
          type: string
        nodename:
          type: string
        msg:
          type: string

    Problem:
      type: object
      properties:
        detail:
          description: |
            A human-readable explanation specific to this occurrence of the
            problem.
          type: string
        status:
          type: integer
          description: |
            The HTTP status code ([RFC7231], Section 6) generated by the
            origin server for this occurrence of the problem.
        title:
          type: string
          description: |
            A short, human-readable summary of the problem type.  It SHOULD
            NOT change from occurrence to occurrence of the problem, except
            for purposes of localization (e.g., using proactive content
            negotiation; see [RFC7231], Section 3.4).
      required:
        - detail
        - status
        - title

    Provisioned:
      type: string
      description: service, instance or resource provisioned state
      enum:
        - "false"
        - "mixed"
        - "n/a"
        - "true"

    RelayStatusItem:
      type: object
      required:
        - relay
        - node_addr
        - cluster_id
        - cluster_name
        - msg_len
        - nodename
        - updated_at
        - username
        - status
      properties:
        relay:
          type: string
        node_addr:
          type: string
        cluster_id:
          type: string
          x-go-name: ClusterID
        cluster_name:
          type: string
        msg_len:
          type: integer
        nodename:
          type: string
        updated_at:
          type: string
          format: date-time
        username:
          type: string
        status:
          type: string

    RelayStatusList:
      type: object
      required:
        - items
        - kind
      properties:
        kind:
          type: string
          enum:
            - RelayStatusList
        items:
          $ref: '#/components/schemas/RelayStatusItems'

    RelayStatusItems:
      type: array
      items:
        $ref: '#/components/schemas/RelayStatusItem'

    RelayMessage:
      type: object
      required:
        - relay
        - node_addr
        - cluster_id
        - cluster_name
        - msg
        - nodename
        - updated_at
        - username
      properties:
        relay:
          type: string
        node_addr:
          type: string
        cluster_id:
          type: string
          x-go-name: ClusterID
        cluster_name:
          type: string
        msg:
          type: string
        nodename:
          type: string
        updated_at:
          type: string
          format: date-time
        username:
          type: string

    # ========================================================================
    # resource schemas
    # ========================================================================

    ResourceList:
      type: object
      required:
        - items
        - kind
      properties:
        kind:
          type: string
          enum:
            - ResourceList
        items:
          $ref: '#/components/schemas/ResourceItems'

    Resource:
      type: object
      properties:
        config:
          $ref: '#/components/schemas/ResourceConfig'
        monitor:
          $ref: '#/components/schemas/ResourceMonitor'
        status:
          $ref: '#/components/schemas/ResourceStatus'

    ResourceItems:
      type: array
      items:
        $ref: '#/components/schemas/ResourceItem'

    ResourceItem:
      type: object
      required:
        - kind
        - meta
        - data
      properties:
        kind:
          type: string
          enum:
            - ResourceItem
        meta:
          $ref: '#/components/schemas/ResourceMeta'
        data:
          $ref: '#/components/schemas/Resource'

    ResourceConfig:
      x-go-type: instance.ResourceConfig
      x-go-type-import:
          path: github.com/opensvc/om3/core/instance
      type: object
      required:
        - is_disabled
        - is_monitored
        - is_standby
        - restart
        - restart_delay
      properties:
        is_disabled:
          type: boolean
        is_monitored:
          type: boolean
        is_standby:
          type: boolean
        restart:
          type: integer
        restart_delay:
          type: string
          format: duration

    ResourceLog:
      type: array
      items:
        $ref: '#/components/schemas/ResourceLogEntry'

    ResourceLogEntry:
      type: object
      required:
        - level
        - message
      properties:
        level:
          type: string
        message:
          type: string

    ResourceProvisionStatus:
      type: object
      required:
        - state
        - mtime
      properties:
        mtime:
          type: string
          format: date-time
        state:
          $ref: '#/components/schemas/Provisioned'

    ResourceMeta:
      type: object
      required:
        - node
        - object
        - rid
      properties:
        node:
          type: string
        object:
          type: string
        rid:
          type: string
          x-go-name: RID

    ResourceMonitor:
      x-go-type: instance.ResourceMonitor
      x-go-type-import:
          path: github.com/opensvc/om3/core/instance
      type: object
      required:
        - restart
      properties:
        restart:
          $ref: '#/components/schemas/ResourceMonitorRestart'

    ResourceInfoList:
      type: object
      required:
        - items
        - kind
      properties:
        kind:
          type: string
          enum:
            - ResourceInfoList
        items:
          $ref: '#/components/schemas/ResourceInfoItems'

    ResourceInfoItems:
      type: array
      items:
        $ref: '#/components/schemas/ResourceInfoItem'

    ResourceInfoItem:
      type: object
      required:
        - node
        - object
        - rid
        - key
        - value
      properties:
        node:
          type: string
        object:
          type: string
        rid:
          type: string
        key:
          type: string
        value:
          type: string

    DataKeys:
        type: array
        items:
          $ref: '#/components/schemas/DataKey'

    DataKey:
      type: object
      required:
        - name
        - bytes
      properties:
        name:
          type: string
        bytes:
          type: string
          format: byte

    DataKeyList:
      type: object
      required:
        - kind
        - items
      properties:
        kind:
          type: string
          enum:
            - DataKeyList
        items:
          $ref: '#/components/schemas/DataKeyListItems'

    DataKeyListItems:
        type: array
        items:
          $ref: '#/components/schemas/DataKeyListItem'

    DataKeyListItem:
      type: object
      required:
        - node
        - object
        - name
        - size
      properties:
        node:
          type: string
        object:
          type: string
        name:
          type: string
        size:
          type: integer

    PatchDataKeys:
        type: array
        items:
          $ref: '#/components/schemas/PatchDataKey'

    PatchDataKey:
      type: object
      required:
        - action
        - name
      properties:
        action:
          type: string
          enum:
            - add
            - change
            - remove
            - rename
        name:
          type: string
        to:
          type: string
        string:
          type: string
        bytes:
          type: string
          format: byte

    ResourceMonitorRestart:
      type: object
      required:
        - remaining
        - last_at
      properties:
        remaining:
          type: integer
        last_at:
          type: string
          format: date-time

    ResourceStatus:
      x-go-type: resource.Status
      x-go-type-import:
          path: github.com/opensvc/om3/core/resource
      type: object
      required:
        - disable
        - encap
        - info
        - label
        - log
        - monitor
        - optional
        - provisioned
        - restart
        - standby
        - status
        - subset
        - tags
        - type
      properties:
        disable:
          type: boolean
          description: hints the resource ignores all state transition actions
        encap:
          type: boolean
          description: |
            indicates that the resource is handled by the encapsulated agents,
            and ignored at the hypervisor level
        info:
          type: object
          description: |
            key-value pairs providing interesting information to collect
            site-wide about this resource
        label:
          type: string
        log:
          $ref: '#/components/schemas/ResourceLog'
        monitor:
          type: boolean
          description: |
            tells the daemon if it should trigger a monitor action when the
            resource is not up
        optional:
          type: boolean
          description: |
            is resource status aggregated into Overall instead of Avail instance status.
            Errors in optional resource don't stop a state transition action
        provisioned:
          $ref: '#/components/schemas/ResourceProvisionStatus'
        restart:
          type: integer
        standby:
          type: boolean
          description: |
            resource should always be up, even after a stop state transition action
        status:
          $ref: '#/components/schemas/Status'
        subset:
          type: string
          description: the name of the subset this resource is assigned to
        tags:
          type: array
          items:
            type: string
        type:
          type: string

    DaemonStatus:
      type: object
      required:
        - cluster
        - daemon
      properties:
        cluster:
          $ref: '#/components/schemas/Cluster'
        daemon:
          $ref: '#/components/schemas/DaemonLocal'

    LogList:
      description: responseLogList is a list of sse
      type: string
      format: binary

    EventList:
      description: responseEventList is a list of sse
      type: string
      format: binary

    DRBDConfig:
      type: object
      required:
        - data
      properties:
        data:
          type: string
          format: byte

    Role:
      type: string
      enum:
        - admin
        - blacklistadmin
        - guest
        - heartbeat
        - join
        - leave
        - operator
        - prioritizer
        - root
        - squatter

    SANPathList:
      type: object
      required:
        - kind
        - items
      properties:
        kind:
          type: string
          enum:
            - SANPathList
        items:
          $ref: '#/components/schemas/SANPathItems'

    SANPathItems:
      type: array
      items:
        $ref: '#/components/schemas/SANPath'

    SANPath:
      type: object
      required:
        - initiator
        - target
      properties:
        initiator:
          $ref: '#/components/schemas/SANPathInitiator'
        target:
          $ref: '#/components/schemas/SANPathTarget'

    SANPathInitiatorList:
      type: object
      required:
        - kind
        - items
      properties:
        kind:
          type: string
          enum:
            - SANPathInitiatorList
        items:
          $ref: '#/components/schemas/SANPathInitiatorItems'

    SANPathInitiatorItems:
      type: array
      items:
        $ref: '#/components/schemas/SANPathInitiatorItem'

    SANPathInitiatorItem:
      type: object
      required:
        - kind
        - data
        - meta
      properties:
        kind:
          type: string
          enum:
            - SANPathInitiatorItem
        data:
          $ref: '#/components/schemas/SANPathInitiator'
        meta:
          $ref: '#/components/schemas/NodeMeta'

    SANPathInitiator:
      type: object
      description: initiator is the host side san path endpoint.
      required:
        - name
        - type
      properties:
        name:
          type: string
          description: name is a worldwide unique path endpoint identifier.
          example: iqn.2004-10.com.ubuntu:01:e6bd4a3b554
        type:
          type: string
          description: type is the endpoint type.
          example: iscsi

    SANPathTarget:
      type: object
      description: target is the storage array side san path endpoint.
      required:
        - name
        - type
      properties:
        name:
          type: string
          description: name is a worldwide unique path endpoint identifier.
          example: iqn.2009-11.com.opensvc.srv:dev2n1.storage.target.1
        type:
          type: string
          description: type is a the endpoint type.
          example: iscsi

    ScheduleList:
      type: object
      required:
        - items
        - kind
      properties:
        kind:
          type: string
          enum:
            - ScheduleList
        items:
          $ref: '#/components/schemas/ScheduleItems'

    Schedule:
      type: object
      required:
        - action
        - schedule
        - key
        - last_run_at
        - last_run_file
        - last_success_file
        - next_run_at
        - require
        - require_collector
        - require_provisioned
      properties:
        action:
          type: string
        schedule:
          type: string
        key:
          type: string
        last_run_at:
          type: string
          format: date-time
        last_run_file:
          type: string
        last_success_file:
          type: string
        next_run_at:
          type: string
          format: date-time
        require:
          type: string
        require_collector:
          type: boolean
        require_provisioned:
          type: boolean

    ScheduleItems:
      type: array
      items:
        $ref: '#/components/schemas/ScheduleItem'

    ScheduleItem:
      type: object
      required:
        - kind
        - meta
        - data
      properties:
        kind:
          type: string
          enum:
            - ResourceItem
        meta:
          $ref: '#/components/schemas/InstanceMeta'
        data:
          $ref: '#/components/schemas/Schedule'

    Status:
      type: string
      enum:
        - up
        - down
        - warn
        - n/a
        - undef
        - stdby up
        - stdby down

    SubsetsConfig:
      type: array
      items:
        $ref: '#/components/schemas/SubsetConfig'

    SubsetConfig:
      x-go-type: instance.SubsetConfig
      x-go-type-import:
          path: github.com/opensvc/om3/core/instance
      type: object
      required:
        - parallel
      properties:
        parallel:
          type: boolean

    Topology:
      type: string
      description: "object topology"
      enum:
        - failover
        - flex
      default: failover

    UserIdentity :
      type: object
      required:
        - name
        - raw_grant
        - grant
        - namespace
      properties:
        name:
          type: string
        namespace:
          type: string
        auth:
          type: string
        raw_grant:
          type: string
        grant:
          type: object
          additionalProperties:
            type: array
            items:
              type: string

    UserList:
      type: object
      required:
        - kind
        - items
      properties:
        kind:
          type: string
          enum:
            - UserList
        items:
          $ref: '#/components/schemas/UserItems'

    UserItems:
      type: array
      items:
        $ref: '#/components/schemas/UserItem'

    UserItem:
      type: object
      required:
        - kind
        - data
        - meta
      properties:
        kind:
          type: string
          enum:
            - UserItem
        data:
          $ref: '#/components/schemas/User'
        meta:
          $ref: '#/components/schemas/NodeMeta'

    User:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          x-go-name: ID
        name:
          type: string

  parameters:
    inPathHeartbeatName:
      in: path
      name: name
      required: true
      schema:
        $ref: '#/components/schemas/DaemonHeartbeatName'

    inPathListenerName:
      in: path
      name: name
      required: true
      schema:
        $ref: '#/components/schemas/DaemonListenerName'

    inPathName:
      in: path
      name: name
      required: true
      schema:
        type: string

    inPathNamespace:
      in: path
      name: namespace
      required: true
      schema:
        type: string
        example: test

    inPathNodeName:
      in: path
      name: nodename
      required: true
      schema:
        type: string
        description: |
            The cluster node to relay the request to. `_` and `localhost` refer tp
            the node that received the request.
        example: localhost

    inPathKind:
      in: path
      name: kind
      required: true
      schema:
        $ref: '#/components/schemas/Kind'

    inQueryDeletes:
      in: query
      name: delete
      schema:
        type: array
        items:
          type: string
          description: The name of a section to delete, without brackets.
          example: task#unwanted

    inQueryDisableRollback:
      in: query
      name: disable_rollback
      schema:
        type: boolean

    inQueryEvaluate:
      in: query
      name: evaluate
      schema:
        type: boolean
        description: Dereference, scope and convert the keyword raw value.

    inQueryConfirm:
      in: query
      name: confirm
      schema:
        type: boolean

    inQueryCron:
      in: query
      name: cron
      schema:
        type: boolean

    inQueryForce:
      in: query
      name: force
      schema:
        type: boolean

    inQueryImpersonate:
      in: query
      name: impersonate
      schema:
        type: string
        description: The node name to impersonate when evaluating a keyword. Setting impersonate without evaluate=true returns a Bad Request error.

    inQueryKeyword:
      in: query
      name: kw
      schema:
        type: string

    inQueryKeyName:
      in: query
      name: name
      required: true
      schema:
        type: string
        description: A datastore key name

    inQueryKeyNames:
      in: query
      name: name
      x-go-name: Names
      schema:
        type: array
        items:
          type: string
          description: A datastore key name

    inQuerySets:
      in: query
      name: set
      schema:
        type: array
        items:
          type: string
          description: A keyword operation expressed as <kw>[<index>]<op><value>, with op like = += -=.
          example: env.eat=fruits

    inQueryUnsets:
      in: query
      name: unset
      schema:
        type: array
        items:
          type: string
          description: The name of the section to remove, without brackets.
          example: task#unwanted

    inQueryKeywords:
      in: query
      name: kw
      schema:
        type: array
        items:
          type: string
          description: A keyword to remove.
          example: env.unwanted

    inQueryEnvs:
      in: query
      name: env
      schema:
        type: array
        items:
          type: string
          description: An environment variable to set in the task commands execution context.
          example: MYVAR=myval

    inQueryKeywordOps:
      in: query
      name: kw
      schema:
        type: array
        items:
          type: string
          description: An operation and value to do on a keyword.
          example: env.unwanted=removeMe

    inQueryMaster:
      in: query
      name: master
      schema:
        type: boolean
        description: Act on the host instance of the service, and don't act on encap instance if not asked for explicitely.

    inQueryNoLock:
      in: query
      name: no_lock
      schema:
        type: boolean

    inQueryLeader:
      in: query
      name: leader
      schema:
        type: boolean

    inQueryRequesterSid:
      in: query
      name: requester_sid
      schema:
        type: string
        format: uuid
        x-go-name: RequesterSessionID

    inQueryRid:
      in: query
      name: rid
      schema:
        type: string
        x-go-name: RID

    inQueryStateOnly:
      in: query
      name: state_only
      schema:
        type: boolean

    inQuerySlaves:
      in: query
      name: slave
      schema:
        type: array
        items:
          type: string
          description: Act on the encap instances specified by hostname, and don't act on the host instance if not asked for explicitely.

    inQueryAllSlaves:
      in: query
      name: slaves
      schema:
        type: boolean
        description: Act on all encap instances, and don't act on the host instance if not asked for explicitely.

    inQuerySubset:
      in: query
      name: subset
      schema:
        type: string

    inQueryTag:
      in: query
      name: tag
      schema:
        type: string

    inQueryTo:
      in: query
      name: to
      schema:
        type: string

    inQueryWaitLock:
      in: query
      name: wait_lock
      schema:
        type: string
        format: duration

    inQueryDriver:
      in: query
      name: driver
      description: show only keywords of this driver
      schema:
        type: string
        example: fs.ext4

    inQuerySection:   
      in: query
      name: section
      description: show supported keywords of this configuration section
      schema:
        type: string
        example: fs#2

    inQueryOption:
      in: query
      name: option
      description: show the keyword referenced by section and option
      schema:
        type: string
        example: fs#2

    Duration:
      name: duration
      in: query
      description: max duration
      schema:
        type: string
        example: 5s
    Paths:
      name: paths
      in: query
      description: list of object paths to send logs for
      schema:
        type: array
        items:
          type: string
          description: object path
          example: svc1, svc2
    LogFilter:
      name: filter
      in: query
      description: list of log filter
      schema:
        type: array
        items:
          type: string
          description: "a filter expression: label=value[,label=value]..."
          example: sid=9a8e04e6-bc12-43e6-83d1-fe10d5363ea7
    LogFollow:
      name: follow
      in: query
      description: follow the logs
      schema:
        type: boolean
    LogLines:
      name: lines
      in: query
      description: report this number of past last log entries
      schema:
        type: integer
    EventCache:
      name: cache
      in: query
      description: start the event feed using the latest past events from the cache that match the specified kind and labels.
      schema:
        type: boolean
        default: false
    EventFilter:
      name: filter
      in: query
      description: list of event filter
      schema:
        type: array
        items:
          type: string
          description: |
            filter expression: [kind][,label=value]*[.dataxxx=value]
          example: ObjectStatusUpdated,path=foo
    DRBDConfigName:
      name: name
      in: query
      description: the full path of the file is deduced from the name
      required: true
      schema:
        type: string
    Roles:
      name: role
      in: query
      description: list of api role
      schema:
        type: array
        items:
          $ref: '#/components/schemas/Role'
    Limit:
      name: limit
      in: query
      description: limit items count
      schema:
        type: integer
        format: int64
        example: 1
    NamespaceOptional:
      name: namespace
      in: query
      description: namespace
      schema:
        type: string
    ObjectPath:
      name: path
      in: query
      description: object path
      required: true
      schema:
        type: string
    Path:
      name: path
      in: query
      description: object selector expression.
      required: true
      schema:
        type: string
        example: db1,web*
    PathOptional:
      name: path
      in: query
      description: object selector expression.
      schema:
        type: string
        example: db1,web*
    Node:
      name: node
      in: query
      description: node selector expression.
      required: true
      schema:
        type: string
        example: n2,az=eu1
    NodeOptional:
      name: node
      in: query
      description: node selector expression.
      schema:
        type: string
        example: n2,az=eu1
    RidOptional:
      name: resource
      in: query
      description: resource selector expression.
      schema:
        type: string
        example: fs#1,ip
    RelayClusterID:
      name: cluster_id
      in: query
      description: the cluster id component of the slot id on the relay
      x-go-name: ClusterID
      required: true
      schema:
        type: string
    Relays:
      name: relay
      x-go-name: Relays
      in: query
      description: list of relays to include in the response dataset
      schema:
        type: array
        items:
          type: string
    RelayNodename:
      name: nodename
      in: query
      description: the nodename component of the slot id on the relay
      required: true
      schema:
        type: string
    RelayRemote:
      name: remote
      in: query
      description: If true, report the status of relays the server is client of. If false or not set, report the status of the server embedded relay.
      schema:
        type: boolean
    RelayUsername:
      name: username
      in: query
      description: If true and the requester has the root grant, read the message from the specified user relay partition instead of the requester's partition.
      schema:
        type: string
    SelectorOptional:
      name: selector
      in: query
      description: selector
      schema:
        type: string
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    '200':
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
    '204':
      description: No Content
    '400':
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
    '401':
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
    '403':
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
    '404':
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
    '408':
      description: Request Timeout
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
    '409':
      description: Conflict
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
    '500':
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
    '503':
      description: Service Unavailable
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
